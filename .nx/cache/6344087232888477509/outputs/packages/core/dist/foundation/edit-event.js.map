{"version":3,"file":"edit-event.js","sourceRoot":"","sources":["../../foundation/edit-event.ts"],"names":[],"mappings":"AA0BA,MAAM,UAAU,SAAS,CAAC,IAAU;IAClC,OAAO,IAAI,YAAY,KAAK,CAAC;AAC/B,CAAC;AAED,MAAM,UAAU,QAAQ,CAAC,IAAU;IACjC,OAAQ,IAAe,CAAC,MAAM,KAAK,SAAS,CAAC;AAC/C,CAAC;AAED,MAAM,UAAU,YAAY,CAC1B,KAAqB;IAErB,OAAO,KAAK,KAAK,IAAI,IAAI,OAAO,KAAK,KAAK,QAAQ,CAAC;AACrD,CAAC;AAED,MAAM,UAAU,QAAQ,CAAC,IAAU;IACjC,OAAQ,IAAe,CAAC,OAAO,KAAK,SAAS,CAAC;AAChD,CAAC;AAED,MAAM,UAAU,QAAQ,CAAC,IAAU;IACjC,OAAO,CACJ,IAAe,CAAC,MAAM,KAAK,SAAS,IAAK,IAAe,CAAC,IAAI,KAAK,SAAS,CAC7E,CAAC;AACJ,CAAC;AAID,MAAM,UAAU,YAAY,CAAiB,IAAO;IAClD,OAAO,IAAI,WAAW,CAAI,WAAW,EAAE;QACrC,QAAQ,EAAE,IAAI;QACd,OAAO,EAAE,IAAI;QACb,MAAM,EAAE,IAAI;KACb,CAAC,CAAC;AACL,CAAC","sourcesContent":["/** Intent to `parent.insertBefore(node, reference)` */\nexport type Insert = {\n  parent: Node;\n  node: Node;\n  reference: Node | null;\n};\n\nexport type NamespacedAttributeValue = {\n  value: string | null;\n  namespaceURI: string | null;\n};\nexport type AttributeValue = string | null | NamespacedAttributeValue;\n/** Intent to set or remove (if null) attributes on element */\nexport type Update = {\n  element: Element;\n  attributes: Partial<Record<string, AttributeValue>>;\n};\n\n/** Intent to remove a node from its ownerDocument */\nexport type Remove = {\n  node: Node;\n};\n\n/** Represents the user's intent to change an XMLDocument */\nexport type Edit = Insert | Update | Remove | Edit[];\n\nexport function isComplex(edit: Edit): edit is Edit[] {\n  return edit instanceof Array;\n}\n\nexport function isInsert(edit: Edit): edit is Insert {\n  return (edit as Insert).parent !== undefined;\n}\n\nexport function isNamespaced(\n  value: AttributeValue\n): value is NamespacedAttributeValue {\n  return value !== null && typeof value !== 'string';\n}\n\nexport function isUpdate(edit: Edit): edit is Update {\n  return (edit as Update).element !== undefined;\n}\n\nexport function isRemove(edit: Edit): edit is Remove {\n  return (\n    (edit as Insert).parent === undefined && (edit as Remove).node !== undefined\n  );\n}\n\nexport type EditEvent<E extends Edit = Edit> = CustomEvent<E>;\n\nexport function newEditEvent<E extends Edit>(edit: E): EditEvent<E> {\n  return new CustomEvent<E>('oscd-edit', {\n    composed: true,\n    bubbles: true,\n    detail: edit,\n  });\n}\n\ndeclare global {\n  interface ElementEventMap {\n    ['oscd-edit']: EditEvent;\n  }\n}\n"]}