{"version":3,"file":"Plugging.js","sourceRoot":"","sources":["../../mixins/Plugging.ts"],"names":[],"mappings":";AAEA,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,mBAAmB,CAAC;AAEpD,OAAO,EAAE,MAAM,EAAyB,MAAM,kBAAkB,CAAC;AAajE,MAAM,UAAU,GAAG,IAAI,GAAG,EAAkB,CAAC;AAE7C,sEAAsE;AACtE,MAAM,UAAU,SAAS,CAAC,GAAW;IACnC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC;QAAE,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,SAAS,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IACtE,OAAO,UAAU,CAAC,GAAG,CAAC,GAAG,CAAE,CAAC;AAC9B,CAAC;AASD,MAAM,UAAU,QAAQ,CACtB,IAAW;;IAEX,MAAM,eAAgB,SAAQ,IAAI;QAAlC;;YACE,yCAAiB,IAAI,GAAG,EAAkB,EAAC;YAO3C,mCAAsB,EAAE,IAAI,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,EAAC;QAyBjD,CAAC;QA7BC,IAAI,aAAa;YACf,OAAO,uBAAA,IAAI,sCAAe,CAAC;QAC7B,CAAC;QAID;;WAEG;QAEH,IAAI,OAAO;YACT,OAAO,uBAAA,IAAI,gCAAS,CAAC;QACvB,CAAC;QAED,IAAI,OAAO,CAAC,OAA2B;YACrC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CACpC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;gBACpB,MAAM,OAAO,GAAG,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBACtC,IAAI,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,OAAO,CAAC;oBAAE,OAAO;gBAC5C,uBAAA,IAAI,sCAAe,CAAC,GAAG,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;gBACzC,IAAI,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC;oBAAE,OAAO;gBACxC,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,CAAC;gBACjE,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,cAAc,CAAC,MAAM,CAAC,OAAO,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;YACvE,CAAC,CAAC,CACH,CAAC;YAEF,uBAAA,IAAI,4BAAY,EAAE,IAAI,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,GAAG,OAAO,EAAE,MAAA,CAAC;YACrD,IAAI,CAAC,aAAa,EAAE,CAAC;QACvB,CAAC;KACF;;IA7BC;QADC,KAAK,EAAE;wDAGP;IAQD;QADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;kDAG1B;IAkBH,OAAO,eAAe,CAAC;AACzB,CAAC","sourcesContent":["import { LitElement } from 'lit';\n\nimport { property, state } from 'lit/decorators.js';\n\nimport { cyrb64, LitElementConstructor } from '../foundation.js';\nimport { targetLocales } from '../locales.js';\n\nexport type Plugin = {\n  name: string;\n  translations?: Record<typeof targetLocales[number], string>;\n  src: string;\n  icon: string;\n  requireDoc?: boolean;\n  active?: boolean;\n};\nexport type PluginSet = { menu: Plugin[]; editor: Plugin[] };\n\nconst pluginTags = new Map<string, string>();\n\n/** @returns a valid customElement tagName containing the URI hash. */\nexport function pluginTag(uri: string): string {\n  if (!pluginTags.has(uri)) pluginTags.set(uri, `oscd-p${cyrb64(uri)}`);\n  return pluginTags.get(uri)!;\n}\n\nexport interface PluginMixin {\n  loadedPlugins: Map<string, Plugin>;\n  plugins: Partial<PluginSet>;\n}\n\ntype ReturnConstructor = new (...args: any[]) => LitElement & PluginMixin;\n\nexport function Plugging<TBase extends LitElementConstructor>(\n  Base: TBase\n): TBase & ReturnConstructor {\n  class PluggingElement extends Base {\n    #loadedPlugins = new Map<string, Plugin>();\n\n    @state()\n    get loadedPlugins(): Map<string, Plugin> {\n      return this.#loadedPlugins;\n    }\n\n    #plugins: PluginSet = { menu: [], editor: [] };\n\n    /**\n     * @prop {PluginSet} plugins - Set of plugins that are used by OpenSCD\n     */\n    @property({ type: Object })\n    get plugins(): PluginSet {\n      return this.#plugins;\n    }\n\n    set plugins(plugins: Partial<PluginSet>) {\n      Object.values(plugins).forEach(kind =>\n        kind.forEach(plugin => {\n          const tagName = pluginTag(plugin.src);\n          if (this.loadedPlugins.has(tagName)) return;\n          this.#loadedPlugins.set(tagName, plugin);\n          if (customElements.get(tagName)) return;\n          const url = new URL(plugin.src, window.location.href).toString();\n          import(url).then(mod => customElements.define(tagName, mod.default));\n        })\n      );\n\n      this.#plugins = { menu: [], editor: [], ...plugins };\n      this.requestUpdate();\n    }\n  }\n  return PluggingElement;\n}\n"]}