{"version":3,"file":"history.js","sourceRoot":"","sources":["../../../foundation/deprecated/history.ts"],"names":[],"mappings":"AA8CA,MAAM,UAAU,WAAW,CACzB,MAAiB,EACjB,aAA0C;IAE1C,OAAO,IAAI,WAAW,CAAY,KAAK,EAAE;QACvC,OAAO,EAAE,IAAI;QACb,QAAQ,EAAE,IAAI;QACd,GAAG,aAAa;QAChB,MAAM,EAAE,EAAE,GAAG,MAAM,EAAE,GAAG,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,MAAM,EAAE;KAChD,CAAC,CAAC;AACL,CAAC;AAED,MAAM,UAAU,aAAa,CAC3B,MAAmB,EACnB,aAA4C;IAE5C,OAAO,IAAI,WAAW,CAAc,OAAO,EAAE;QAC3C,OAAO,EAAE,IAAI;QACb,QAAQ,EAAE,IAAI;QACd,GAAG,aAAa;QAChB,MAAM,EAAE,EAAE,GAAG,MAAM,EAAE,GAAG,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,MAAM,EAAE;KAChD,CAAC,CAAC;AACL,CAAC","sourcesContent":["import { EditorAction } from './editor';\n\ntype InfoEntryKind = 'info' | 'warning' | 'error';\n\nexport type LogEntryType = 'info' | 'warning' | 'error' | 'action' | 'reset';\n\n/** The basic information contained in each [[`LogEntry`]]. */\nexport interface LogDetailBase {\n  title: string;\n  message?: string;\n}\n/** The [[`LogEntry`]] for a committed [[`EditorAction`]]. */\nexport interface CommitDetail extends LogDetailBase {\n  kind: 'action';\n  action: EditorAction;\n}\n/** A [[`LogEntry`]] for notifying the user. */\nexport interface InfoDetail extends LogDetailBase {\n  kind: InfoEntryKind;\n  cause?: LogEntry;\n}\n\nexport interface ResetDetail {\n  kind: 'reset';\n}\n\nexport type LogDetail = InfoDetail | CommitDetail | ResetDetail;\nexport type LogEvent = CustomEvent<LogDetail>;\n\nexport interface IssueDetail extends LogDetailBase {\n  validatorId: string;\n  element?: Element;\n}\nexport type IssueEvent = CustomEvent<IssueDetail>;\n\n/** [[`LogEntry`]]s are timestamped upon being committed to the `history`. */\ninterface Timestamped {\n  time: Date | null;\n}\n\nexport type CommitEntry = Timestamped & CommitDetail;\nexport type InfoEntry = Timestamped & InfoDetail;\n\nexport type LogEntry = InfoEntry | CommitEntry;\n\n\nexport function newLogEvent(\n  detail: LogDetail,\n  eventInitDict?: CustomEventInit<LogDetail>\n): LogEvent {\n  return new CustomEvent<LogDetail>('log', {\n    bubbles: true,\n    composed: true,\n    ...eventInitDict,\n    detail: { ...detail, ...eventInitDict?.detail },\n  });\n}\n\nexport function newIssueEvent(\n  detail: IssueDetail,\n  eventInitDict?: CustomEventInit<IssueDetail>\n): IssueEvent {\n  return new CustomEvent<IssueDetail>('issue', {\n    bubbles: true,\n    composed: true,\n    ...eventInitDict,\n    detail: { ...detail, ...eventInitDict?.detail },\n  });\n}\n\ndeclare global {\n    interface ElementEventMap {\n      ['log']: LogEvent;\n      ['issue']: IssueEvent;\n    }\n  }\n  "]}