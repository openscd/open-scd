{"version":3,"file":"sw.js","sources":["node_modules/workbox-core/_version.js","node_modules/workbox-core/_private/logger.js","node_modules/workbox-core/models/messages/messageGenerator.js","node_modules/workbox-core/_private/WorkboxError.js","node_modules/workbox-routing/_version.js","node_modules/workbox-routing/utils/constants.js","node_modules/workbox-routing/utils/normalizeHandler.js","node_modules/workbox-routing/Route.js","node_modules/workbox-routing/RegExpRoute.js","node_modules/workbox-routing/Router.js","node_modules/workbox-routing/utils/getOrCreateDefaultRouter.js","node_modules/workbox-routing/registerRoute.js","node_modules/workbox-strategies/_version.js","node_modules/workbox-strategies/plugins/cacheOkAndOpaquePlugin.js","node_modules/workbox-core/_private/cacheNames.js","node_modules/workbox-core/_private/cacheMatchIgnoreParams.js","node_modules/workbox-core/_private/Deferred.js","node_modules/workbox-core/models/quotaErrorCallbacks.js","node_modules/workbox-strategies/StrategyHandler.js","node_modules/workbox-core/_private/timeout.js","node_modules/workbox-core/_private/getFriendlyURL.js","node_modules/workbox-core/_private/executeQuotaErrorCallbacks.js","node_modules/workbox-strategies/Strategy.js","node_modules/workbox-core/_private/waitUntil.js","node_modules/workbox-precaching/_version.js","node_modules/workbox-precaching/utils/createCacheKey.js","node_modules/workbox-precaching/utils/PrecacheInstallReportPlugin.js","node_modules/workbox-precaching/utils/PrecacheCacheKeyPlugin.js","node_modules/workbox-core/_private/canConstructResponseFromBodyStream.js","node_modules/workbox-precaching/utils/getOrCreatePrecacheController.js","node_modules/workbox-core/copyResponse.js","node_modules/workbox-precaching/PrecacheStrategy.js","node_modules/workbox-precaching/PrecacheController.js","node_modules/workbox-precaching/PrecacheRoute.js","node_modules/workbox-precaching/utils/generateURLVariations.js","node_modules/workbox-precaching/utils/removeIgnoredSearchParams.js","node_modules/workbox-precaching/precacheAndRoute.js","../../../../../private/var/folders/sn/2n1w6bqs63l5lwq03z461gpr0000gn/T/2a34e253bb39d72e1e7695f684004b81/sw.js","node_modules/workbox-precaching/precache.js","node_modules/workbox-precaching/addRoute.js","node_modules/workbox-strategies/NetworkFirst.js"],"sourcesContent":["\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:core:6.5.3'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst logger = (process.env.NODE_ENV === 'production'\n    ? null\n    : (() => {\n        // Don't overwrite this value if it's already set.\n        // See https://github.com/GoogleChrome/workbox/pull/2284#issuecomment-560470923\n        if (!('__WB_DISABLE_DEV_LOGS' in self)) {\n            self.__WB_DISABLE_DEV_LOGS = false;\n        }\n        let inGroup = false;\n        const methodToColorMap = {\n            debug: `#7f8c8d`,\n            log: `#2ecc71`,\n            warn: `#f39c12`,\n            error: `#c0392b`,\n            groupCollapsed: `#3498db`,\n            groupEnd: null, // No colored prefix on groupEnd\n        };\n        const print = function (method, args) {\n            if (self.__WB_DISABLE_DEV_LOGS) {\n                return;\n            }\n            if (method === 'groupCollapsed') {\n                // Safari doesn't print all console.groupCollapsed() arguments:\n                // https://bugs.webkit.org/show_bug.cgi?id=182754\n                if (/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {\n                    console[method](...args);\n                    return;\n                }\n            }\n            const styles = [\n                `background: ${methodToColorMap[method]}`,\n                `border-radius: 0.5em`,\n                `color: white`,\n                `font-weight: bold`,\n                `padding: 2px 0.5em`,\n            ];\n            // When in a group, the workbox prefix is not displayed.\n            const logPrefix = inGroup ? [] : ['%cworkbox', styles.join(';')];\n            console[method](...logPrefix, ...args);\n            if (method === 'groupCollapsed') {\n                inGroup = true;\n            }\n            if (method === 'groupEnd') {\n                inGroup = false;\n            }\n        };\n        // eslint-disable-next-line @typescript-eslint/ban-types\n        const api = {};\n        const loggerMethods = Object.keys(methodToColorMap);\n        for (const key of loggerMethods) {\n            const method = key;\n            api[method] = (...args) => {\n                print(method, args);\n            };\n        }\n        return api;\n    })());\nexport { logger };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messages } from './messages.js';\nimport '../../_version.js';\nconst fallback = (code, ...args) => {\n    let msg = code;\n    if (args.length > 0) {\n        msg += ` :: ${JSON.stringify(args)}`;\n    }\n    return msg;\n};\nconst generatorFunction = (code, details = {}) => {\n    const message = messages[code];\n    if (!message) {\n        throw new Error(`Unable to find message for code '${code}'.`);\n    }\n    return message(details);\n};\nexport const messageGenerator = process.env.NODE_ENV === 'production' ? fallback : generatorFunction;\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messageGenerator } from '../models/messages/messageGenerator.js';\nimport '../_version.js';\n/**\n * Workbox errors should be thrown with this class.\n * This allows use to ensure the type easily in tests,\n * helps developers identify errors from workbox\n * easily and allows use to optimise error\n * messages correctly.\n *\n * @private\n */\nclass WorkboxError extends Error {\n    /**\n     *\n     * @param {string} errorCode The error code that\n     * identifies this particular error.\n     * @param {Object=} details Any relevant arguments\n     * that will help developers identify issues should\n     * be added as a key on the context object.\n     */\n    constructor(errorCode, details) {\n        const message = messageGenerator(errorCode, details);\n        super(message);\n        this.name = errorCode;\n        this.details = details;\n    }\n}\nexport { WorkboxError };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:routing:6.5.3'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The default HTTP method, 'GET', used when there's no specific method\n * configured for a route.\n *\n * @type {string}\n *\n * @private\n */\nexport const defaultMethod = 'GET';\n/**\n * The list of valid HTTP methods associated with requests that could be routed.\n *\n * @type {Array<string>}\n *\n * @private\n */\nexport const validMethods = [\n    'DELETE',\n    'GET',\n    'HEAD',\n    'PATCH',\n    'POST',\n    'PUT',\n];\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport '../_version.js';\n/**\n * @param {function()|Object} handler Either a function, or an object with a\n * 'handle' method.\n * @return {Object} An object with a handle method.\n *\n * @private\n */\nexport const normalizeHandler = (handler) => {\n    if (handler && typeof handler === 'object') {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.hasMethod(handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return handler;\n    }\n    else {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(handler, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return { handle: handler };\n    }\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { defaultMethod, validMethods } from './utils/constants.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport './_version.js';\n/**\n * A `Route` consists of a pair of callback functions, \"match\" and \"handler\".\n * The \"match\" callback determine if a route should be used to \"handle\" a\n * request by returning a non-falsy value if it can. The \"handler\" callback\n * is called when there is a match and should return a Promise that resolves\n * to a `Response`.\n *\n * @memberof workbox-routing\n */\nclass Route {\n    /**\n     * Constructor for Route class.\n     *\n     * @param {workbox-routing~matchCallback} match\n     * A callback function that determines whether the route matches a given\n     * `fetch` event by returning a non-falsy value.\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(match, handler, method = defaultMethod) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(match, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'match',\n            });\n            if (method) {\n                assert.isOneOf(method, validMethods, { paramName: 'method' });\n            }\n        }\n        // These values are referenced directly by Router so cannot be\n        // altered by minificaton.\n        this.handler = normalizeHandler(handler);\n        this.match = match;\n        this.method = method;\n    }\n    /**\n     *\n     * @param {workbox-routing-handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response\n     */\n    setCatchHandler(handler) {\n        this.catchHandler = normalizeHandler(handler);\n    }\n}\nexport { Route };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { Route } from './Route.js';\nimport './_version.js';\n/**\n * RegExpRoute makes it easy to create a regular expression based\n * {@link workbox-routing.Route}.\n *\n * For same-origin requests the RegExp only needs to match part of the URL. For\n * requests against third-party servers, you must define a RegExp that matches\n * the start of the URL.\n *\n * @memberof workbox-routing\n * @extends workbox-routing.Route\n */\nclass RegExpRoute extends Route {\n    /**\n     * If the regular expression contains\n     * [capture groups]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#grouping-back-references},\n     * the captured values will be passed to the\n     * {@link workbox-routing~handlerCallback} `params`\n     * argument.\n     *\n     * @param {RegExp} regExp The regular expression to match against URLs.\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(regExp, handler, method) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(regExp, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'RegExpRoute',\n                funcName: 'constructor',\n                paramName: 'pattern',\n            });\n        }\n        const match = ({ url }) => {\n            const result = regExp.exec(url.href);\n            // Return immediately if there's no match.\n            if (!result) {\n                return;\n            }\n            // Require that the match start at the first character in the URL string\n            // if it's a cross-origin request.\n            // See https://github.com/GoogleChrome/workbox/issues/281 for the context\n            // behind this behavior.\n            if (url.origin !== location.origin && result.index !== 0) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`The regular expression '${regExp.toString()}' only partially matched ` +\n                        `against the cross-origin URL '${url.toString()}'. RegExpRoute's will only ` +\n                        `handle cross-origin requests if they match the entire URL.`);\n                }\n                return;\n            }\n            // If the route matches, but there aren't any capture groups defined, then\n            // this will return [], which is truthy and therefore sufficient to\n            // indicate a match.\n            // If there are capture groups, then it will return their values.\n            return result.slice(1);\n        };\n        super(match, handler, method);\n    }\n}\nexport { RegExpRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { defaultMethod } from './utils/constants.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\n/**\n * The Router can be used to process a `FetchEvent` using one or more\n * {@link workbox-routing.Route}, responding with a `Response` if\n * a matching route exists.\n *\n * If no route matches a given a request, the Router will use a \"default\"\n * handler if one is defined.\n *\n * Should the matching Route throw an error, the Router will use a \"catch\"\n * handler if one is defined to gracefully deal with issues and respond with a\n * Request.\n *\n * If a request matches multiple routes, the **earliest** registered route will\n * be used to respond to the request.\n *\n * @memberof workbox-routing\n */\nclass Router {\n    /**\n     * Initializes a new Router.\n     */\n    constructor() {\n        this._routes = new Map();\n        this._defaultHandlerMap = new Map();\n    }\n    /**\n     * @return {Map<string, Array<workbox-routing.Route>>} routes A `Map` of HTTP\n     * method name ('GET', etc.) to an array of all the corresponding `Route`\n     * instances that are registered.\n     */\n    get routes() {\n        return this._routes;\n    }\n    /**\n     * Adds a fetch event listener to respond to events when a route matches\n     * the event's request.\n     */\n    addFetchListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('fetch', ((event) => {\n            const { request } = event;\n            const responsePromise = this.handleRequest({ request, event });\n            if (responsePromise) {\n                event.respondWith(responsePromise);\n            }\n        }));\n    }\n    /**\n     * Adds a message event listener for URLs to cache from the window.\n     * This is useful to cache resources loaded on the page prior to when the\n     * service worker started controlling it.\n     *\n     * The format of the message data sent from the window should be as follows.\n     * Where the `urlsToCache` array may consist of URL strings or an array of\n     * URL string + `requestInit` object (the same as you'd pass to `fetch()`).\n     *\n     * ```\n     * {\n     *   type: 'CACHE_URLS',\n     *   payload: {\n     *     urlsToCache: [\n     *       './script1.js',\n     *       './script2.js',\n     *       ['./script3.js', {mode: 'no-cors'}],\n     *     ],\n     *   },\n     * }\n     * ```\n     */\n    addCacheListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('message', ((event) => {\n            // event.data is type 'any'\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            if (event.data && event.data.type === 'CACHE_URLS') {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                const { payload } = event.data;\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`Caching URLs from the window`, payload.urlsToCache);\n                }\n                const requestPromises = Promise.all(payload.urlsToCache.map((entry) => {\n                    if (typeof entry === 'string') {\n                        entry = [entry];\n                    }\n                    const request = new Request(...entry);\n                    return this.handleRequest({ request, event });\n                    // TODO(philipwalton): TypeScript errors without this typecast for\n                    // some reason (probably a bug). The real type here should work but\n                    // doesn't: `Array<Promise<Response> | undefined>`.\n                })); // TypeScript\n                event.waitUntil(requestPromises);\n                // If a MessageChannel was used, reply to the message on success.\n                if (event.ports && event.ports[0]) {\n                    void requestPromises.then(() => event.ports[0].postMessage(true));\n                }\n            }\n        }));\n    }\n    /**\n     * Apply the routing rules to a FetchEvent object to get a Response from an\n     * appropriate Route's handler.\n     *\n     * @param {Object} options\n     * @param {Request} options.request The request to handle.\n     * @param {ExtendableEvent} options.event The event that triggered the\n     *     request.\n     * @return {Promise<Response>|undefined} A promise is returned if a\n     *     registered route can handle the request. If there is no matching\n     *     route and there's no `defaultHandler`, `undefined` is returned.\n     */\n    handleRequest({ request, event, }) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'handleRequest',\n                paramName: 'options.request',\n            });\n        }\n        const url = new URL(request.url, location.href);\n        if (!url.protocol.startsWith('http')) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Workbox Router only supports URLs that start with 'http'.`);\n            }\n            return;\n        }\n        const sameOrigin = url.origin === location.origin;\n        const { params, route } = this.findMatchingRoute({\n            event,\n            request,\n            sameOrigin,\n            url,\n        });\n        let handler = route && route.handler;\n        const debugMessages = [];\n        if (process.env.NODE_ENV !== 'production') {\n            if (handler) {\n                debugMessages.push([`Found a route to handle this request:`, route]);\n                if (params) {\n                    debugMessages.push([\n                        `Passing the following params to the route's handler:`,\n                        params,\n                    ]);\n                }\n            }\n        }\n        // If we don't have a handler because there was no matching route, then\n        // fall back to defaultHandler if that's defined.\n        const method = request.method;\n        if (!handler && this._defaultHandlerMap.has(method)) {\n            if (process.env.NODE_ENV !== 'production') {\n                debugMessages.push(`Failed to find a matching route. Falling ` +\n                    `back to the default handler for ${method}.`);\n            }\n            handler = this._defaultHandlerMap.get(method);\n        }\n        if (!handler) {\n            if (process.env.NODE_ENV !== 'production') {\n                // No handler so Workbox will do nothing. If logs is set of debug\n                // i.e. verbose, we should print out this information.\n                logger.debug(`No route found for: ${getFriendlyURL(url)}`);\n            }\n            return;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            // We have a handler, meaning Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Router is responding to: ${getFriendlyURL(url)}`);\n            debugMessages.forEach((msg) => {\n                if (Array.isArray(msg)) {\n                    logger.log(...msg);\n                }\n                else {\n                    logger.log(msg);\n                }\n            });\n            logger.groupEnd();\n        }\n        // Wrap in try and catch in case the handle method throws a synchronous\n        // error. It should still callback to the catch handler.\n        let responsePromise;\n        try {\n            responsePromise = handler.handle({ url, request, event, params });\n        }\n        catch (err) {\n            responsePromise = Promise.reject(err);\n        }\n        // Get route's catch handler, if it exists\n        const catchHandler = route && route.catchHandler;\n        if (responsePromise instanceof Promise &&\n            (this._catchHandler || catchHandler)) {\n            responsePromise = responsePromise.catch(async (err) => {\n                // If there's a route catch handler, process that first\n                if (catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)}. Falling back to route's Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    try {\n                        return await catchHandler.handle({ url, request, event, params });\n                    }\n                    catch (catchErr) {\n                        if (catchErr instanceof Error) {\n                            err = catchErr;\n                        }\n                    }\n                }\n                if (this._catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)}. Falling back to global Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    return this._catchHandler.handle({ url, request, event });\n                }\n                throw err;\n            });\n        }\n        return responsePromise;\n    }\n    /**\n     * Checks a request and URL (and optionally an event) against the list of\n     * registered routes, and if there's a match, returns the corresponding\n     * route along with any params generated by the match.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {boolean} options.sameOrigin The result of comparing `url.origin`\n     *     against the current origin.\n     * @param {Request} options.request The request to match.\n     * @param {Event} options.event The corresponding event.\n     * @return {Object} An object with `route` and `params` properties.\n     *     They are populated if a matching route was found or `undefined`\n     *     otherwise.\n     */\n    findMatchingRoute({ url, sameOrigin, request, event, }) {\n        const routes = this._routes.get(request.method) || [];\n        for (const route of routes) {\n            let params;\n            // route.match returns type any, not possible to change right now.\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const matchResult = route.match({ url, sameOrigin, request, event });\n            if (matchResult) {\n                if (process.env.NODE_ENV !== 'production') {\n                    // Warn developers that using an async matchCallback is almost always\n                    // not the right thing to do.\n                    if (matchResult instanceof Promise) {\n                        logger.warn(`While routing ${getFriendlyURL(url)}, an async ` +\n                            `matchCallback function was used. Please convert the ` +\n                            `following route to use a synchronous matchCallback function:`, route);\n                    }\n                }\n                // See https://github.com/GoogleChrome/workbox/issues/2079\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                params = matchResult;\n                if (Array.isArray(params) && params.length === 0) {\n                    // Instead of passing an empty array in as params, use undefined.\n                    params = undefined;\n                }\n                else if (matchResult.constructor === Object && // eslint-disable-line\n                    Object.keys(matchResult).length === 0) {\n                    // Instead of passing an empty object in as params, use undefined.\n                    params = undefined;\n                }\n                else if (typeof matchResult === 'boolean') {\n                    // For the boolean value true (rather than just something truth-y),\n                    // don't set params.\n                    // See https://github.com/GoogleChrome/workbox/pull/2134#issuecomment-513924353\n                    params = undefined;\n                }\n                // Return early if have a match.\n                return { route, params };\n            }\n        }\n        // If no match was found above, return and empty object.\n        return {};\n    }\n    /**\n     * Define a default `handler` that's called when no routes explicitly\n     * match the incoming request.\n     *\n     * Each HTTP method ('GET', 'POST', etc.) gets its own default handler.\n     *\n     * Without a default handler, unmatched requests will go against the\n     * network as if there were no service worker present.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to associate with this\n     * default handler. Each method has its own default.\n     */\n    setDefaultHandler(handler, method = defaultMethod) {\n        this._defaultHandlerMap.set(method, normalizeHandler(handler));\n    }\n    /**\n     * If a Route throws an error while handling a request, this `handler`\n     * will be called and given a chance to provide a response.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     */\n    setCatchHandler(handler) {\n        this._catchHandler = normalizeHandler(handler);\n    }\n    /**\n     * Registers a route with the router.\n     *\n     * @param {workbox-routing.Route} route The route to register.\n     */\n    registerRoute(route) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(route, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route, 'match', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.isType(route.handler, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route.handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.handler',\n            });\n            assert.isType(route.method, 'string', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.method',\n            });\n        }\n        if (!this._routes.has(route.method)) {\n            this._routes.set(route.method, []);\n        }\n        // Give precedence to all of the earlier routes by adding this additional\n        // route to the end of the array.\n        this._routes.get(route.method).push(route);\n    }\n    /**\n     * Unregisters a route with the router.\n     *\n     * @param {workbox-routing.Route} route The route to unregister.\n     */\n    unregisterRoute(route) {\n        if (!this._routes.has(route.method)) {\n            throw new WorkboxError('unregister-route-but-not-found-with-method', {\n                method: route.method,\n            });\n        }\n        const routeIndex = this._routes.get(route.method).indexOf(route);\n        if (routeIndex > -1) {\n            this._routes.get(route.method).splice(routeIndex, 1);\n        }\n        else {\n            throw new WorkboxError('unregister-route-route-not-registered');\n        }\n    }\n}\nexport { Router };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { Router } from '../Router.js';\nimport '../_version.js';\nlet defaultRouter;\n/**\n * Creates a new, singleton Router instance if one does not exist. If one\n * does already exist, that instance is returned.\n *\n * @private\n * @return {Router}\n */\nexport const getOrCreateDefaultRouter = () => {\n    if (!defaultRouter) {\n        defaultRouter = new Router();\n        // The helpers that use the default Router assume these listeners exist.\n        defaultRouter.addFetchListener();\n        defaultRouter.addCacheListener();\n    }\n    return defaultRouter;\n};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Route } from './Route.js';\nimport { RegExpRoute } from './RegExpRoute.js';\nimport { getOrCreateDefaultRouter } from './utils/getOrCreateDefaultRouter.js';\nimport './_version.js';\n/**\n * Easily register a RegExp, string, or function with a caching\n * strategy to a singleton Router instance.\n *\n * This method will generate a Route for you if needed and\n * call {@link workbox-routing.Router#registerRoute}.\n *\n * @param {RegExp|string|workbox-routing.Route~matchCallback|workbox-routing.Route} capture\n * If the capture param is a `Route`, all other arguments will be ignored.\n * @param {workbox-routing~handlerCallback} [handler] A callback\n * function that returns a Promise resulting in a Response. This parameter\n * is required if `capture` is not a `Route` object.\n * @param {string} [method='GET'] The HTTP method to match the Route\n * against.\n * @return {workbox-routing.Route} The generated `Route`.\n *\n * @memberof workbox-routing\n */\nfunction registerRoute(capture, handler, method) {\n    let route;\n    if (typeof capture === 'string') {\n        const captureUrl = new URL(capture, location.href);\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(capture.startsWith('/') || capture.startsWith('http'))) {\n                throw new WorkboxError('invalid-string', {\n                    moduleName: 'workbox-routing',\n                    funcName: 'registerRoute',\n                    paramName: 'capture',\n                });\n            }\n            // We want to check if Express-style wildcards are in the pathname only.\n            // TODO: Remove this log message in v4.\n            const valueToCheck = capture.startsWith('http')\n                ? captureUrl.pathname\n                : capture;\n            // See https://github.com/pillarjs/path-to-regexp#parameters\n            const wildcards = '[*:?+]';\n            if (new RegExp(`${wildcards}`).exec(valueToCheck)) {\n                logger.debug(`The '$capture' parameter contains an Express-style wildcard ` +\n                    `character (${wildcards}). Strings are now always interpreted as ` +\n                    `exact matches; use a RegExp for partial or wildcard matches.`);\n            }\n        }\n        const matchCallback = ({ url }) => {\n            if (process.env.NODE_ENV !== 'production') {\n                if (url.pathname === captureUrl.pathname &&\n                    url.origin !== captureUrl.origin) {\n                    logger.debug(`${capture} only partially matches the cross-origin URL ` +\n                        `${url.toString()}. This route will only handle cross-origin requests ` +\n                        `if they match the entire URL.`);\n                }\n            }\n            return url.href === captureUrl.href;\n        };\n        // If `capture` is a string then `handler` and `method` must be present.\n        route = new Route(matchCallback, handler, method);\n    }\n    else if (capture instanceof RegExp) {\n        // If `capture` is a `RegExp` then `handler` and `method` must be present.\n        route = new RegExpRoute(capture, handler, method);\n    }\n    else if (typeof capture === 'function') {\n        // If `capture` is a function then `handler` and `method` must be present.\n        route = new Route(capture, handler, method);\n    }\n    else if (capture instanceof Route) {\n        route = capture;\n    }\n    else {\n        throw new WorkboxError('unsupported-route-type', {\n            moduleName: 'workbox-routing',\n            funcName: 'registerRoute',\n            paramName: 'capture',\n        });\n    }\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.registerRoute(route);\n    return route;\n}\nexport { registerRoute };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:strategies:6.5.3'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nexport const cacheOkAndOpaquePlugin = {\n    /**\n     * Returns a valid response (to allow caching) if the status is 200 (OK) or\n     * 0 (opaque).\n     *\n     * @param {Object} options\n     * @param {Response} options.response\n     * @return {Response|null}\n     *\n     * @private\n     */\n    cacheWillUpdate: async ({ response }) => {\n        if (response.status === 200 || response.status === 0) {\n            return response;\n        }\n        return null;\n    },\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst _cacheNameDetails = {\n    googleAnalytics: 'googleAnalytics',\n    precache: 'precache-v2',\n    prefix: 'workbox',\n    runtime: 'runtime',\n    suffix: typeof registration !== 'undefined' ? registration.scope : '',\n};\nconst _createCacheName = (cacheName) => {\n    return [_cacheNameDetails.prefix, cacheName, _cacheNameDetails.suffix]\n        .filter((value) => value && value.length > 0)\n        .join('-');\n};\nconst eachCacheNameDetail = (fn) => {\n    for (const key of Object.keys(_cacheNameDetails)) {\n        fn(key);\n    }\n};\nexport const cacheNames = {\n    updateDetails: (details) => {\n        eachCacheNameDetail((key) => {\n            if (typeof details[key] === 'string') {\n                _cacheNameDetails[key] = details[key];\n            }\n        });\n    },\n    getGoogleAnalyticsName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.googleAnalytics);\n    },\n    getPrecacheName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.precache);\n    },\n    getPrefix: () => {\n        return _cacheNameDetails.prefix;\n    },\n    getRuntimeName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.runtime);\n    },\n    getSuffix: () => {\n        return _cacheNameDetails.suffix;\n    },\n};\n","/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nfunction stripParams(fullURL, ignoreParams) {\n    const strippedURL = new URL(fullURL);\n    for (const param of ignoreParams) {\n        strippedURL.searchParams.delete(param);\n    }\n    return strippedURL.href;\n}\n/**\n * Matches an item in the cache, ignoring specific URL params. This is similar\n * to the `ignoreSearch` option, but it allows you to ignore just specific\n * params (while continuing to match on the others).\n *\n * @private\n * @param {Cache} cache\n * @param {Request} request\n * @param {Object} matchOptions\n * @param {Array<string>} ignoreParams\n * @return {Promise<Response|undefined>}\n */\nasync function cacheMatchIgnoreParams(cache, request, ignoreParams, matchOptions) {\n    const strippedRequestURL = stripParams(request.url, ignoreParams);\n    // If the request doesn't include any ignored params, match as normal.\n    if (request.url === strippedRequestURL) {\n        return cache.match(request, matchOptions);\n    }\n    // Otherwise, match by comparing keys\n    const keysOptions = Object.assign(Object.assign({}, matchOptions), { ignoreSearch: true });\n    const cacheKeys = await cache.keys(request, keysOptions);\n    for (const cacheKey of cacheKeys) {\n        const strippedCacheKeyURL = stripParams(cacheKey.url, ignoreParams);\n        if (strippedRequestURL === strippedCacheKeyURL) {\n            return cache.match(cacheKey, matchOptions);\n        }\n    }\n    return;\n}\nexport { cacheMatchIgnoreParams };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The Deferred class composes Promises in a way that allows for them to be\n * resolved or rejected from outside the constructor. In most cases promises\n * should be used directly, but Deferreds can be necessary when the logic to\n * resolve a promise must be separate.\n *\n * @private\n */\nclass Deferred {\n    /**\n     * Creates a promise and exposes its resolve and reject functions as methods.\n     */\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n}\nexport { Deferred };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n// Callbacks to be executed whenever there's a quota error.\n// Can't change Function type right now.\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst quotaErrorCallbacks = new Set();\nexport { quotaErrorCallbacks };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheMatchIgnoreParams } from 'workbox-core/_private/cacheMatchIgnoreParams.js';\nimport { Deferred } from 'workbox-core/_private/Deferred.js';\nimport { executeQuotaErrorCallbacks } from 'workbox-core/_private/executeQuotaErrorCallbacks.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { timeout } from 'workbox-core/_private/timeout.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\nfunction toRequest(input) {\n    return typeof input === 'string' ? new Request(input) : input;\n}\n/**\n * A class created every time a Strategy instance instance calls\n * {@link workbox-strategies.Strategy~handle} or\n * {@link workbox-strategies.Strategy~handleAll} that wraps all fetch and\n * cache actions around plugin callbacks and keeps track of when the strategy\n * is \"done\" (i.e. all added `event.waitUntil()` promises have resolved).\n *\n * @memberof workbox-strategies\n */\nclass StrategyHandler {\n    /**\n     * Creates a new instance associated with the passed strategy and event\n     * that's handling the request.\n     *\n     * The constructor also initializes the state that will be passed to each of\n     * the plugins handling this request.\n     *\n     * @param {workbox-strategies.Strategy} strategy\n     * @param {Object} options\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params] The return value from the\n     *     {@link workbox-routing~matchCallback} (if applicable).\n     */\n    constructor(strategy, options) {\n        this._cacheKeys = {};\n        /**\n         * The request the strategy is performing (passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * @name request\n         * @instance\n         * @type {Request}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * The event associated with this request.\n         * @name event\n         * @instance\n         * @type {ExtendableEvent}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `URL` instance of `request.url` (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `url` param will be present if the strategy was invoked\n         * from a workbox `Route` object.\n         * @name url\n         * @instance\n         * @type {URL|undefined}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `param` value (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `param` param will be present if the strategy was invoked\n         * from a workbox `Route` object and the\n         * {@link workbox-routing~matchCallback} returned\n         * a truthy value (it will be that value).\n         * @name params\n         * @instance\n         * @type {*|undefined}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(options.event, ExtendableEvent, {\n                moduleName: 'workbox-strategies',\n                className: 'StrategyHandler',\n                funcName: 'constructor',\n                paramName: 'options.event',\n            });\n        }\n        Object.assign(this, options);\n        this.event = options.event;\n        this._strategy = strategy;\n        this._handlerDeferred = new Deferred();\n        this._extendLifetimePromises = [];\n        // Copy the plugins list (since it's mutable on the strategy),\n        // so any mutations don't affect this handler instance.\n        this._plugins = [...strategy.plugins];\n        this._pluginStateMap = new Map();\n        for (const plugin of this._plugins) {\n            this._pluginStateMap.set(plugin, {});\n        }\n        this.event.waitUntil(this._handlerDeferred.promise);\n    }\n    /**\n     * Fetches a given request (and invokes any applicable plugin callback\n     * methods) using the `fetchOptions` (for non-navigation requests) and\n     * `plugins` defined on the `Strategy` object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - `requestWillFetch()`\n     * - `fetchDidSucceed()`\n     * - `fetchDidFail()`\n     *\n     * @param {Request|string} input The URL or request to fetch.\n     * @return {Promise<Response>}\n     */\n    async fetch(input) {\n        const { event } = this;\n        let request = toRequest(input);\n        if (request.mode === 'navigate' &&\n            event instanceof FetchEvent &&\n            event.preloadResponse) {\n            const possiblePreloadResponse = (await event.preloadResponse);\n            if (possiblePreloadResponse) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`Using a preloaded navigation response for ` +\n                        `'${getFriendlyURL(request.url)}'`);\n                }\n                return possiblePreloadResponse;\n            }\n        }\n        // If there is a fetchDidFail plugin, we need to save a clone of the\n        // original request before it's either modified by a requestWillFetch\n        // plugin or before the original request's body is consumed via fetch().\n        const originalRequest = this.hasCallback('fetchDidFail')\n            ? request.clone()\n            : null;\n        try {\n            for (const cb of this.iterateCallbacks('requestWillFetch')) {\n                request = await cb({ request: request.clone(), event });\n            }\n        }\n        catch (err) {\n            if (err instanceof Error) {\n                throw new WorkboxError('plugin-error-request-will-fetch', {\n                    thrownErrorMessage: err.message,\n                });\n            }\n        }\n        // The request can be altered by plugins with `requestWillFetch` making\n        // the original request (most likely from a `fetch` event) different\n        // from the Request we make. Pass both to `fetchDidFail` to aid debugging.\n        const pluginFilteredRequest = request.clone();\n        try {\n            let fetchResponse;\n            // See https://github.com/GoogleChrome/workbox/issues/1796\n            fetchResponse = await fetch(request, request.mode === 'navigate' ? undefined : this._strategy.fetchOptions);\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' returned a response with ` +\n                    `status '${fetchResponse.status}'.`);\n            }\n            for (const callback of this.iterateCallbacks('fetchDidSucceed')) {\n                fetchResponse = await callback({\n                    event,\n                    request: pluginFilteredRequest,\n                    response: fetchResponse,\n                });\n            }\n            return fetchResponse;\n        }\n        catch (error) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.log(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' threw an error.`, error);\n            }\n            // `originalRequest` will only exist if a `fetchDidFail` callback\n            // is being used (see above).\n            if (originalRequest) {\n                await this.runCallbacks('fetchDidFail', {\n                    error: error,\n                    event,\n                    originalRequest: originalRequest.clone(),\n                    request: pluginFilteredRequest.clone(),\n                });\n            }\n            throw error;\n        }\n    }\n    /**\n     * Calls `this.fetch()` and (in the background) runs `this.cachePut()` on\n     * the response generated by `this.fetch()`.\n     *\n     * The call to `this.cachePut()` automatically invokes `this.waitUntil()`,\n     * so you do not have to manually call `waitUntil()` on the event.\n     *\n     * @param {Request|string} input The request or URL to fetch and cache.\n     * @return {Promise<Response>}\n     */\n    async fetchAndCachePut(input) {\n        const response = await this.fetch(input);\n        const responseClone = response.clone();\n        void this.waitUntil(this.cachePut(input, responseClone));\n        return response;\n    }\n    /**\n     * Matches a request from the cache (and invokes any applicable plugin\n     * callback methods) using the `cacheName`, `matchOptions`, and `plugins`\n     * defined on the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillByUsed()\n     * - cachedResponseWillByUsed()\n     *\n     * @param {Request|string} key The Request or URL to use as the cache key.\n     * @return {Promise<Response|undefined>} A matching response, if found.\n     */\n    async cacheMatch(key) {\n        const request = toRequest(key);\n        let cachedResponse;\n        const { cacheName, matchOptions } = this._strategy;\n        const effectiveRequest = await this.getCacheKey(request, 'read');\n        const multiMatchOptions = Object.assign(Object.assign({}, matchOptions), { cacheName });\n        cachedResponse = await caches.match(effectiveRequest, multiMatchOptions);\n        if (process.env.NODE_ENV !== 'production') {\n            if (cachedResponse) {\n                logger.debug(`Found a cached response in '${cacheName}'.`);\n            }\n            else {\n                logger.debug(`No cached response found in '${cacheName}'.`);\n            }\n        }\n        for (const callback of this.iterateCallbacks('cachedResponseWillBeUsed')) {\n            cachedResponse =\n                (await callback({\n                    cacheName,\n                    matchOptions,\n                    cachedResponse,\n                    request: effectiveRequest,\n                    event: this.event,\n                })) || undefined;\n        }\n        return cachedResponse;\n    }\n    /**\n     * Puts a request/response pair in the cache (and invokes any applicable\n     * plugin callback methods) using the `cacheName` and `plugins` defined on\n     * the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillByUsed()\n     * - cacheWillUpdate()\n     * - cacheDidUpdate()\n     *\n     * @param {Request|string} key The request or URL to use as the cache key.\n     * @param {Response} response The response to cache.\n     * @return {Promise<boolean>} `false` if a cacheWillUpdate caused the response\n     * not be cached, and `true` otherwise.\n     */\n    async cachePut(key, response) {\n        const request = toRequest(key);\n        // Run in the next task to avoid blocking other cache reads.\n        // https://github.com/w3c/ServiceWorker/issues/1397\n        await timeout(0);\n        const effectiveRequest = await this.getCacheKey(request, 'write');\n        if (process.env.NODE_ENV !== 'production') {\n            if (effectiveRequest.method && effectiveRequest.method !== 'GET') {\n                throw new WorkboxError('attempt-to-cache-non-get-request', {\n                    url: getFriendlyURL(effectiveRequest.url),\n                    method: effectiveRequest.method,\n                });\n            }\n            // See https://github.com/GoogleChrome/workbox/issues/2818\n            const vary = response.headers.get('Vary');\n            if (vary) {\n                logger.debug(`The response for ${getFriendlyURL(effectiveRequest.url)} ` +\n                    `has a 'Vary: ${vary}' header. ` +\n                    `Consider setting the {ignoreVary: true} option on your strategy ` +\n                    `to ensure cache matching and deletion works as expected.`);\n            }\n        }\n        if (!response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.error(`Cannot cache non-existent response for ` +\n                    `'${getFriendlyURL(effectiveRequest.url)}'.`);\n            }\n            throw new WorkboxError('cache-put-with-no-response', {\n                url: getFriendlyURL(effectiveRequest.url),\n            });\n        }\n        const responseToCache = await this._ensureResponseSafeToCache(response);\n        if (!responseToCache) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Response '${getFriendlyURL(effectiveRequest.url)}' ` +\n                    `will not be cached.`, responseToCache);\n            }\n            return false;\n        }\n        const { cacheName, matchOptions } = this._strategy;\n        const cache = await self.caches.open(cacheName);\n        const hasCacheUpdateCallback = this.hasCallback('cacheDidUpdate');\n        const oldResponse = hasCacheUpdateCallback\n            ? await cacheMatchIgnoreParams(\n            // TODO(philipwalton): the `__WB_REVISION__` param is a precaching\n            // feature. Consider into ways to only add this behavior if using\n            // precaching.\n            cache, effectiveRequest.clone(), ['__WB_REVISION__'], matchOptions)\n            : null;\n        if (process.env.NODE_ENV !== 'production') {\n            logger.debug(`Updating the '${cacheName}' cache with a new Response ` +\n                `for ${getFriendlyURL(effectiveRequest.url)}.`);\n        }\n        try {\n            await cache.put(effectiveRequest, hasCacheUpdateCallback ? responseToCache.clone() : responseToCache);\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                // See https://developer.mozilla.org/en-US/docs/Web/API/DOMException#exception-QuotaExceededError\n                if (error.name === 'QuotaExceededError') {\n                    await executeQuotaErrorCallbacks();\n                }\n                throw error;\n            }\n        }\n        for (const callback of this.iterateCallbacks('cacheDidUpdate')) {\n            await callback({\n                cacheName,\n                oldResponse,\n                newResponse: responseToCache.clone(),\n                request: effectiveRequest,\n                event: this.event,\n            });\n        }\n        return true;\n    }\n    /**\n     * Checks the list of plugins for the `cacheKeyWillBeUsed` callback, and\n     * executes any of those callbacks found in sequence. The final `Request`\n     * object returned by the last plugin is treated as the cache key for cache\n     * reads and/or writes. If no `cacheKeyWillBeUsed` plugin callbacks have\n     * been registered, the passed request is returned unmodified\n     *\n     * @param {Request} request\n     * @param {string} mode\n     * @return {Promise<Request>}\n     */\n    async getCacheKey(request, mode) {\n        const key = `${request.url} | ${mode}`;\n        if (!this._cacheKeys[key]) {\n            let effectiveRequest = request;\n            for (const callback of this.iterateCallbacks('cacheKeyWillBeUsed')) {\n                effectiveRequest = toRequest(await callback({\n                    mode,\n                    request: effectiveRequest,\n                    event: this.event,\n                    // params has a type any can't change right now.\n                    params: this.params, // eslint-disable-line\n                }));\n            }\n            this._cacheKeys[key] = effectiveRequest;\n        }\n        return this._cacheKeys[key];\n    }\n    /**\n     * Returns true if the strategy has at least one plugin with the given\n     * callback.\n     *\n     * @param {string} name The name of the callback to check for.\n     * @return {boolean}\n     */\n    hasCallback(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (name in plugin) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Runs all plugin callbacks matching the given name, in order, passing the\n     * given param object (merged ith the current plugin state) as the only\n     * argument.\n     *\n     * Note: since this method runs all plugins, it's not suitable for cases\n     * where the return value of a callback needs to be applied prior to calling\n     * the next callback. See\n     * {@link workbox-strategies.StrategyHandler#iterateCallbacks}\n     * below for how to handle that case.\n     *\n     * @param {string} name The name of the callback to run within each plugin.\n     * @param {Object} param The object to pass as the first (and only) param\n     *     when executing each callback. This object will be merged with the\n     *     current plugin state prior to callback execution.\n     */\n    async runCallbacks(name, param) {\n        for (const callback of this.iterateCallbacks(name)) {\n            // TODO(philipwalton): not sure why `any` is needed. It seems like\n            // this should work with `as WorkboxPluginCallbackParam[C]`.\n            await callback(param);\n        }\n    }\n    /**\n     * Accepts a callback and returns an iterable of matching plugin callbacks,\n     * where each callback is wrapped with the current handler state (i.e. when\n     * you call each callback, whatever object parameter you pass it will\n     * be merged with the plugin's current state).\n     *\n     * @param {string} name The name fo the callback to run\n     * @return {Array<Function>}\n     */\n    *iterateCallbacks(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (typeof plugin[name] === 'function') {\n                const state = this._pluginStateMap.get(plugin);\n                const statefulCallback = (param) => {\n                    const statefulParam = Object.assign(Object.assign({}, param), { state });\n                    // TODO(philipwalton): not sure why `any` is needed. It seems like\n                    // this should work with `as WorkboxPluginCallbackParam[C]`.\n                    return plugin[name](statefulParam);\n                };\n                yield statefulCallback;\n            }\n        }\n    }\n    /**\n     * Adds a promise to the\n     * [extend lifetime promises]{@link https://w3c.github.io/ServiceWorker/#extendableevent-extend-lifetime-promises}\n     * of the event event associated with the request being handled (usually a\n     * `FetchEvent`).\n     *\n     * Note: you can await\n     * {@link workbox-strategies.StrategyHandler~doneWaiting}\n     * to know when all added promises have settled.\n     *\n     * @param {Promise} promise A promise to add to the extend lifetime promises\n     *     of the event that triggered the request.\n     */\n    waitUntil(promise) {\n        this._extendLifetimePromises.push(promise);\n        return promise;\n    }\n    /**\n     * Returns a promise that resolves once all promises passed to\n     * {@link workbox-strategies.StrategyHandler~waitUntil}\n     * have settled.\n     *\n     * Note: any work done after `doneWaiting()` settles should be manually\n     * passed to an event's `waitUntil()` method (not this handler's\n     * `waitUntil()` method), otherwise the service worker thread my be killed\n     * prior to your work completing.\n     */\n    async doneWaiting() {\n        let promise;\n        while ((promise = this._extendLifetimePromises.shift())) {\n            await promise;\n        }\n    }\n    /**\n     * Stops running the strategy and immediately resolves any pending\n     * `waitUntil()` promises.\n     */\n    destroy() {\n        this._handlerDeferred.resolve(null);\n    }\n    /**\n     * This method will call cacheWillUpdate on the available plugins (or use\n     * status === 200) to determine if the Response is safe and valid to cache.\n     *\n     * @param {Request} options.request\n     * @param {Response} options.response\n     * @return {Promise<Response|undefined>}\n     *\n     * @private\n     */\n    async _ensureResponseSafeToCache(response) {\n        let responseToCache = response;\n        let pluginsUsed = false;\n        for (const callback of this.iterateCallbacks('cacheWillUpdate')) {\n            responseToCache =\n                (await callback({\n                    request: this.request,\n                    response: responseToCache,\n                    event: this.event,\n                })) || undefined;\n            pluginsUsed = true;\n            if (!responseToCache) {\n                break;\n            }\n        }\n        if (!pluginsUsed) {\n            if (responseToCache && responseToCache.status !== 200) {\n                responseToCache = undefined;\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                if (responseToCache) {\n                    if (responseToCache.status !== 200) {\n                        if (responseToCache.status === 0) {\n                            logger.warn(`The response for '${this.request.url}' ` +\n                                `is an opaque response. The caching strategy that you're ` +\n                                `using will not cache opaque responses by default.`);\n                        }\n                        else {\n                            logger.debug(`The response for '${this.request.url}' ` +\n                                `returned a status code of '${response.status}' and won't ` +\n                                `be cached as a result.`);\n                        }\n                    }\n                }\n            }\n        }\n        return responseToCache;\n    }\n}\nexport { StrategyHandler };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Returns a promise that resolves and the passed number of milliseconds.\n * This utility is an async/await-friendly version of `setTimeout`.\n *\n * @param {number} ms\n * @return {Promise}\n * @private\n */\nexport function timeout(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n}\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst getFriendlyURL = (url) => {\n    const urlObj = new URL(String(url), location.href);\n    // See https://github.com/GoogleChrome/workbox/issues/2323\n    // We want to include everything, except for the origin if it's same-origin.\n    return urlObj.href.replace(new RegExp(`^${location.origin}`), '');\n};\nexport { getFriendlyURL };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from '../_private/logger.js';\nimport { quotaErrorCallbacks } from '../models/quotaErrorCallbacks.js';\nimport '../_version.js';\n/**\n * Runs all of the callback functions, one at a time sequentially, in the order\n * in which they were registered.\n *\n * @memberof workbox-core\n * @private\n */\nasync function executeQuotaErrorCallbacks() {\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log(`About to run ${quotaErrorCallbacks.size} ` +\n            `callbacks to clean up caches.`);\n    }\n    for (const callback of quotaErrorCallbacks) {\n        await callback();\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log(callback, 'is complete.');\n        }\n    }\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log('Finished running callbacks.');\n    }\n}\nexport { executeQuotaErrorCallbacks };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { StrategyHandler } from './StrategyHandler.js';\nimport './_version.js';\n/**\n * An abstract base class that all other strategy classes must extend from:\n *\n * @memberof workbox-strategies\n */\nclass Strategy {\n    /**\n     * Creates a new instance of the strategy and sets all documented option\n     * properties as public instance properties.\n     *\n     * Note: if a custom strategy class extends the base Strategy class and does\n     * not need more than these properties, it does not need to define its own\n     * constructor.\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to the cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] The\n     * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\n     */\n    constructor(options = {}) {\n        /**\n         * Cache name to store and retrieve\n         * requests. Defaults to the cache names provided by\n         * {@link workbox-core.cacheNames}.\n         *\n         * @type {string}\n         */\n        this.cacheName = cacheNames.getRuntimeName(options.cacheName);\n        /**\n         * The list\n         * [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n         * used by this strategy.\n         *\n         * @type {Array<Object>}\n         */\n        this.plugins = options.plugins || [];\n        /**\n         * Values passed along to the\n         * [`init`]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters}\n         * of all fetch() requests made by this strategy.\n         *\n         * @type {Object}\n         */\n        this.fetchOptions = options.fetchOptions;\n        /**\n         * The\n         * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n         * for any `cache.match()` or `cache.put()` calls made by this strategy.\n         *\n         * @type {Object}\n         */\n        this.matchOptions = options.matchOptions;\n    }\n    /**\n     * Perform a request strategy and returns a `Promise` that will resolve with\n     * a `Response`, invoking all relevant plugin callbacks.\n     *\n     * When a strategy instance is registered with a Workbox\n     * {@link workbox-routing.Route}, this method is automatically\n     * called when the route matches.\n     *\n     * Alternatively, this method can be used in a standalone `FetchEvent`\n     * listener by passing it to `event.respondWith()`.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     */\n    handle(options) {\n        const [responseDone] = this.handleAll(options);\n        return responseDone;\n    }\n    /**\n     * Similar to {@link workbox-strategies.Strategy~handle}, but\n     * instead of just returning a `Promise` that resolves to a `Response` it\n     * it will return an tuple of `[response, done]` promises, where the former\n     * (`response`) is equivalent to what `handle()` returns, and the latter is a\n     * Promise that will resolve once any promises that were added to\n     * `event.waitUntil()` as part of performing the strategy have completed.\n     *\n     * You can await the `done` promise to ensure any extra work performed by\n     * the strategy (usually caching responses) completes successfully.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     * @return {Array<Promise>} A tuple of [response, done]\n     *     promises that can be used to determine when the response resolves as\n     *     well as when the handler has completed all its work.\n     */\n    handleAll(options) {\n        // Allow for flexible options to be passed.\n        if (options instanceof FetchEvent) {\n            options = {\n                event: options,\n                request: options.request,\n            };\n        }\n        const event = options.event;\n        const request = typeof options.request === 'string'\n            ? new Request(options.request)\n            : options.request;\n        const params = 'params' in options ? options.params : undefined;\n        const handler = new StrategyHandler(this, { event, request, params });\n        const responseDone = this._getResponse(handler, request, event);\n        const handlerDone = this._awaitComplete(responseDone, handler, request, event);\n        // Return an array of promises, suitable for use with Promise.all().\n        return [responseDone, handlerDone];\n    }\n    async _getResponse(handler, request, event) {\n        await handler.runCallbacks('handlerWillStart', { event, request });\n        let response = undefined;\n        try {\n            response = await this._handle(request, handler);\n            // The \"official\" Strategy subclasses all throw this error automatically,\n            // but in case a third-party Strategy doesn't, ensure that we have a\n            // consistent failure when there's no response or an error response.\n            if (!response || response.type === 'error') {\n                throw new WorkboxError('no-response', { url: request.url });\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                for (const callback of handler.iterateCallbacks('handlerDidError')) {\n                    response = await callback({ error, event, request });\n                    if (response) {\n                        break;\n                    }\n                }\n            }\n            if (!response) {\n                throw error;\n            }\n            else if (process.env.NODE_ENV !== 'production') {\n                logger.log(`While responding to '${getFriendlyURL(request.url)}', ` +\n                    `an ${error instanceof Error ? error.toString() : ''} error occurred. Using a fallback response provided by ` +\n                    `a handlerDidError plugin.`);\n            }\n        }\n        for (const callback of handler.iterateCallbacks('handlerWillRespond')) {\n            response = await callback({ event, request, response });\n        }\n        return response;\n    }\n    async _awaitComplete(responseDone, handler, request, event) {\n        let response;\n        let error;\n        try {\n            response = await responseDone;\n        }\n        catch (error) {\n            // Ignore errors, as response errors should be caught via the `response`\n            // promise above. The `done` promise will only throw for errors in\n            // promises passed to `handler.waitUntil()`.\n        }\n        try {\n            await handler.runCallbacks('handlerDidRespond', {\n                event,\n                request,\n                response,\n            });\n            await handler.doneWaiting();\n        }\n        catch (waitUntilError) {\n            if (waitUntilError instanceof Error) {\n                error = waitUntilError;\n            }\n        }\n        await handler.runCallbacks('handlerDidComplete', {\n            event,\n            request,\n            response,\n            error: error,\n        });\n        handler.destroy();\n        if (error) {\n            throw error;\n        }\n    }\n}\nexport { Strategy };\n/**\n * Classes extending the `Strategy` based class should implement this method,\n * and leverage the {@link workbox-strategies.StrategyHandler}\n * arg to perform all fetching and cache logic, which will ensure all relevant\n * cache, cache options, fetch options and plugins are used (per the current\n * strategy instance).\n *\n * @name _handle\n * @instance\n * @abstract\n * @function\n * @param {Request} request\n * @param {workbox-strategies.StrategyHandler} handler\n * @return {Promise<Response>}\n *\n * @memberof workbox-strategies.Strategy\n */\n","/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A utility method that makes it easier to use `event.waitUntil` with\n * async functions and return the result.\n *\n * @param {ExtendableEvent} event\n * @param {Function} asyncFn\n * @return {Function}\n * @private\n */\nfunction waitUntil(event, asyncFn) {\n    const returnPromise = asyncFn();\n    event.waitUntil(returnPromise);\n    return returnPromise;\n}\nexport { waitUntil };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:precaching:6.5.3'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport '../_version.js';\n// Name of the search parameter used to store revision info.\nconst REVISION_SEARCH_PARAM = '__WB_REVISION__';\n/**\n * Converts a manifest entry into a versioned URL suitable for precaching.\n *\n * @param {Object|string} entry\n * @return {string} A URL with versioning info.\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function createCacheKey(entry) {\n    if (!entry) {\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\n    }\n    // If a precache manifest entry is a string, it's assumed to be a versioned\n    // URL, like '/app.abcd1234.js'. Return as-is.\n    if (typeof entry === 'string') {\n        const urlObject = new URL(entry, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href,\n        };\n    }\n    const { revision, url } = entry;\n    if (!url) {\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\n    }\n    // If there's just a URL and no revision, then it's also assumed to be a\n    // versioned URL.\n    if (!revision) {\n        const urlObject = new URL(url, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href,\n        };\n    }\n    // Otherwise, construct a properly versioned URL using the custom Workbox\n    // search parameter along with the revision info.\n    const cacheKeyURL = new URL(url, location.href);\n    const originalURL = new URL(url, location.href);\n    cacheKeyURL.searchParams.set(REVISION_SEARCH_PARAM, revision);\n    return {\n        cacheKey: cacheKeyURL.href,\n        url: originalURL.href,\n    };\n}\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to determine the\n * of assets that were updated (or not updated) during the install event.\n *\n * @private\n */\nclass PrecacheInstallReportPlugin {\n    constructor() {\n        this.updatedURLs = [];\n        this.notUpdatedURLs = [];\n        this.handlerWillStart = async ({ request, state, }) => {\n            // TODO: `state` should never be undefined...\n            if (state) {\n                state.originalRequest = request;\n            }\n        };\n        this.cachedResponseWillBeUsed = async ({ event, state, cachedResponse, }) => {\n            if (event.type === 'install') {\n                if (state &&\n                    state.originalRequest &&\n                    state.originalRequest instanceof Request) {\n                    // TODO: `state` should never be undefined...\n                    const url = state.originalRequest.url;\n                    if (cachedResponse) {\n                        this.notUpdatedURLs.push(url);\n                    }\n                    else {\n                        this.updatedURLs.push(url);\n                    }\n                }\n            }\n            return cachedResponse;\n        };\n    }\n}\nexport { PrecacheInstallReportPlugin };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to translate URLs into\n * the corresponding cache key, based on the current revision info.\n *\n * @private\n */\nclass PrecacheCacheKeyPlugin {\n    constructor({ precacheController }) {\n        this.cacheKeyWillBeUsed = async ({ request, params, }) => {\n            // Params is type any, can't change right now.\n            /* eslint-disable */\n            const cacheKey = (params === null || params === void 0 ? void 0 : params.cacheKey) ||\n                this._precacheController.getCacheKeyForURL(request.url);\n            /* eslint-enable */\n            return cacheKey\n                ? new Request(cacheKey, { headers: request.headers })\n                : request;\n        };\n        this._precacheController = precacheController;\n    }\n}\nexport { PrecacheCacheKeyPlugin };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nlet supportStatus;\n/**\n * A utility function that determines whether the current browser supports\n * constructing a new `Response` from a `response.body` stream.\n *\n * @return {boolean} `true`, if the current browser can successfully\n *     construct a `Response` from a `response.body` stream, `false` otherwise.\n *\n * @private\n */\nfunction canConstructResponseFromBodyStream() {\n    if (supportStatus === undefined) {\n        const testResponse = new Response('');\n        if ('body' in testResponse) {\n            try {\n                new Response(testResponse.body);\n                supportStatus = true;\n            }\n            catch (error) {\n                supportStatus = false;\n            }\n        }\n        supportStatus = false;\n    }\n    return supportStatus;\n}\nexport { canConstructResponseFromBodyStream };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { PrecacheController } from '../PrecacheController.js';\nimport '../_version.js';\nlet precacheController;\n/**\n * @return {PrecacheController}\n * @private\n */\nexport const getOrCreatePrecacheController = () => {\n    if (!precacheController) {\n        precacheController = new PrecacheController();\n    }\n    return precacheController;\n};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { canConstructResponseFromBodyStream } from './_private/canConstructResponseFromBodyStream.js';\nimport { WorkboxError } from './_private/WorkboxError.js';\nimport './_version.js';\n/**\n * Allows developers to copy a response and modify its `headers`, `status`,\n * or `statusText` values (the values settable via a\n * [`ResponseInit`]{@link https://developer.mozilla.org/en-US/docs/Web/API/Response/Response#Syntax}\n * object in the constructor).\n * To modify these values, pass a function as the second argument. That\n * function will be invoked with a single object with the response properties\n * `{headers, status, statusText}`. The return value of this function will\n * be used as the `ResponseInit` for the new `Response`. To change the values\n * either modify the passed parameter(s) and return it, or return a totally\n * new object.\n *\n * This method is intentionally limited to same-origin responses, regardless of\n * whether CORS was used or not.\n *\n * @param {Response} response\n * @param {Function} modifier\n * @memberof workbox-core\n */\nasync function copyResponse(response, modifier) {\n    let origin = null;\n    // If response.url isn't set, assume it's cross-origin and keep origin null.\n    if (response.url) {\n        const responseURL = new URL(response.url);\n        origin = responseURL.origin;\n    }\n    if (origin !== self.location.origin) {\n        throw new WorkboxError('cross-origin-copy-response', { origin });\n    }\n    const clonedResponse = response.clone();\n    // Create a fresh `ResponseInit` object by cloning the headers.\n    const responseInit = {\n        headers: new Headers(clonedResponse.headers),\n        status: clonedResponse.status,\n        statusText: clonedResponse.statusText,\n    };\n    // Apply any user modifications.\n    const modifiedResponseInit = modifier ? modifier(responseInit) : responseInit;\n    // Create the new response from the body stream and `ResponseInit`\n    // modifications. Note: not all browsers support the Response.body stream,\n    // so fall back to reading the entire body into memory as a blob.\n    const body = canConstructResponseFromBodyStream()\n        ? clonedResponse.body\n        : await clonedResponse.blob();\n    return new Response(body, modifiedResponseInit);\n}\nexport { copyResponse };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { copyResponse } from 'workbox-core/copyResponse.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from 'workbox-strategies/Strategy.js';\nimport './_version.js';\n/**\n * A {@link workbox-strategies.Strategy} implementation\n * specifically designed to work with\n * {@link workbox-precaching.PrecacheController}\n * to both cache and fetch precached assets.\n *\n * Note: an instance of this class is created automatically when creating a\n * `PrecacheController`; it's generally not necessary to create this yourself.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-precaching\n */\nclass PrecacheStrategy extends Strategy {\n    /**\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to the cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] {@link https://developers.google.com/web/tools/workbox/guides/using-plugins|Plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters|init}\n     * of all fetch() requests made by this strategy.\n     * @param {Object} [options.matchOptions] The\n     * {@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions|CacheQueryOptions}\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\n     * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\n     * get the response from the network if there's a precache miss.\n     */\n    constructor(options = {}) {\n        options.cacheName = cacheNames.getPrecacheName(options.cacheName);\n        super(options);\n        this._fallbackToNetwork =\n            options.fallbackToNetwork === false ? false : true;\n        // Redirected responses cannot be used to satisfy a navigation request, so\n        // any redirected response must be \"copied\" rather than cloned, so the new\n        // response doesn't contain the `redirected` flag. See:\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=669363&desc=2#c1\n        this.plugins.push(PrecacheStrategy.copyRedirectedCacheableResponsesPlugin);\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const response = await handler.cacheMatch(request);\n        if (response) {\n            return response;\n        }\n        // If this is an `install` event for an entry that isn't already cached,\n        // then populate the cache.\n        if (handler.event && handler.event.type === 'install') {\n            return await this._handleInstall(request, handler);\n        }\n        // Getting here means something went wrong. An entry that should have been\n        // precached wasn't found in the cache.\n        return await this._handleFetch(request, handler);\n    }\n    async _handleFetch(request, handler) {\n        let response;\n        const params = (handler.params || {});\n        // Fall back to the network if we're configured to do so.\n        if (this._fallbackToNetwork) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.warn(`The precached response for ` +\n                    `${getFriendlyURL(request.url)} in ${this.cacheName} was not ` +\n                    `found. Falling back to the network.`);\n            }\n            const integrityInManifest = params.integrity;\n            const integrityInRequest = request.integrity;\n            const noIntegrityConflict = !integrityInRequest || integrityInRequest === integrityInManifest;\n            // Do not add integrity if the original request is no-cors\n            // See https://github.com/GoogleChrome/workbox/issues/3096\n            response = await handler.fetch(new Request(request, {\n                integrity: request.mode !== 'no-cors'\n                    ? integrityInRequest || integrityInManifest\n                    : undefined,\n            }));\n            // It's only \"safe\" to repair the cache if we're using SRI to guarantee\n            // that the response matches the precache manifest's expectations,\n            // and there's either a) no integrity property in the incoming request\n            // or b) there is an integrity, and it matches the precache manifest.\n            // See https://github.com/GoogleChrome/workbox/issues/2858\n            // Also if the original request users no-cors we don't use integrity.\n            // See https://github.com/GoogleChrome/workbox/issues/3096\n            if (integrityInManifest &&\n                noIntegrityConflict &&\n                request.mode !== 'no-cors') {\n                this._useDefaultCacheabilityPluginIfNeeded();\n                const wasCached = await handler.cachePut(request, response.clone());\n                if (process.env.NODE_ENV !== 'production') {\n                    if (wasCached) {\n                        logger.log(`A response for ${getFriendlyURL(request.url)} ` +\n                            `was used to \"repair\" the precache.`);\n                    }\n                }\n            }\n        }\n        else {\n            // This shouldn't normally happen, but there are edge cases:\n            // https://github.com/GoogleChrome/workbox/issues/1441\n            throw new WorkboxError('missing-precache-entry', {\n                cacheName: this.cacheName,\n                url: request.url,\n            });\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            const cacheKey = params.cacheKey || (await handler.getCacheKey(request, 'read'));\n            // Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Precaching is responding to: ` + getFriendlyURL(request.url));\n            logger.log(`Serving the precached url: ${getFriendlyURL(cacheKey instanceof Request ? cacheKey.url : cacheKey)}`);\n            logger.groupCollapsed(`View request details here.`);\n            logger.log(request);\n            logger.groupEnd();\n            logger.groupCollapsed(`View response details here.`);\n            logger.log(response);\n            logger.groupEnd();\n            logger.groupEnd();\n        }\n        return response;\n    }\n    async _handleInstall(request, handler) {\n        this._useDefaultCacheabilityPluginIfNeeded();\n        const response = await handler.fetch(request);\n        // Make sure we defer cachePut() until after we know the response\n        // should be cached; see https://github.com/GoogleChrome/workbox/issues/2737\n        const wasCached = await handler.cachePut(request, response.clone());\n        if (!wasCached) {\n            // Throwing here will lead to the `install` handler failing, which\n            // we want to do if *any* of the responses aren't safe to cache.\n            throw new WorkboxError('bad-precaching-response', {\n                url: request.url,\n                status: response.status,\n            });\n        }\n        return response;\n    }\n    /**\n     * This method is complex, as there a number of things to account for:\n     *\n     * The `plugins` array can be set at construction, and/or it might be added to\n     * to at any time before the strategy is used.\n     *\n     * At the time the strategy is used (i.e. during an `install` event), there\n     * needs to be at least one plugin that implements `cacheWillUpdate` in the\n     * array, other than `copyRedirectedCacheableResponsesPlugin`.\n     *\n     * - If this method is called and there are no suitable `cacheWillUpdate`\n     * plugins, we need to add `defaultPrecacheCacheabilityPlugin`.\n     *\n     * - If this method is called and there is exactly one `cacheWillUpdate`, then\n     * we don't have to do anything (this might be a previously added\n     * `defaultPrecacheCacheabilityPlugin`, or it might be a custom plugin).\n     *\n     * - If this method is called and there is more than one `cacheWillUpdate`,\n     * then we need to check if one is `defaultPrecacheCacheabilityPlugin`. If so,\n     * we need to remove it. (This situation is unlikely, but it could happen if\n     * the strategy is used multiple times, the first without a `cacheWillUpdate`,\n     * and then later on after manually adding a custom `cacheWillUpdate`.)\n     *\n     * See https://github.com/GoogleChrome/workbox/issues/2737 for more context.\n     *\n     * @private\n     */\n    _useDefaultCacheabilityPluginIfNeeded() {\n        let defaultPluginIndex = null;\n        let cacheWillUpdatePluginCount = 0;\n        for (const [index, plugin] of this.plugins.entries()) {\n            // Ignore the copy redirected plugin when determining what to do.\n            if (plugin === PrecacheStrategy.copyRedirectedCacheableResponsesPlugin) {\n                continue;\n            }\n            // Save the default plugin's index, in case it needs to be removed.\n            if (plugin === PrecacheStrategy.defaultPrecacheCacheabilityPlugin) {\n                defaultPluginIndex = index;\n            }\n            if (plugin.cacheWillUpdate) {\n                cacheWillUpdatePluginCount++;\n            }\n        }\n        if (cacheWillUpdatePluginCount === 0) {\n            this.plugins.push(PrecacheStrategy.defaultPrecacheCacheabilityPlugin);\n        }\n        else if (cacheWillUpdatePluginCount > 1 && defaultPluginIndex !== null) {\n            // Only remove the default plugin; multiple custom plugins are allowed.\n            this.plugins.splice(defaultPluginIndex, 1);\n        }\n        // Nothing needs to be done if cacheWillUpdatePluginCount is 1\n    }\n}\nPrecacheStrategy.defaultPrecacheCacheabilityPlugin = {\n    async cacheWillUpdate({ response }) {\n        if (!response || response.status >= 400) {\n            return null;\n        }\n        return response;\n    },\n};\nPrecacheStrategy.copyRedirectedCacheableResponsesPlugin = {\n    async cacheWillUpdate({ response }) {\n        return response.redirected ? await copyResponse(response) : response;\n    },\n};\nexport { PrecacheStrategy };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { waitUntil } from 'workbox-core/_private/waitUntil.js';\nimport { createCacheKey } from './utils/createCacheKey.js';\nimport { PrecacheInstallReportPlugin } from './utils/PrecacheInstallReportPlugin.js';\nimport { PrecacheCacheKeyPlugin } from './utils/PrecacheCacheKeyPlugin.js';\nimport { printCleanupDetails } from './utils/printCleanupDetails.js';\nimport { printInstallDetails } from './utils/printInstallDetails.js';\nimport { PrecacheStrategy } from './PrecacheStrategy.js';\nimport './_version.js';\n/**\n * Performs efficient precaching of assets.\n *\n * @memberof workbox-precaching\n */\nclass PrecacheController {\n    /**\n     * Create a new PrecacheController.\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] The cache to use for precaching.\n     * @param {string} [options.plugins] Plugins to use when precaching as well\n     * as responding to fetch events for precached assets.\n     * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\n     * get the response from the network if there's a precache miss.\n     */\n    constructor({ cacheName, plugins = [], fallbackToNetwork = true, } = {}) {\n        this._urlsToCacheKeys = new Map();\n        this._urlsToCacheModes = new Map();\n        this._cacheKeysToIntegrities = new Map();\n        this._strategy = new PrecacheStrategy({\n            cacheName: cacheNames.getPrecacheName(cacheName),\n            plugins: [\n                ...plugins,\n                new PrecacheCacheKeyPlugin({ precacheController: this }),\n            ],\n            fallbackToNetwork,\n        });\n        // Bind the install and activate methods to the instance.\n        this.install = this.install.bind(this);\n        this.activate = this.activate.bind(this);\n    }\n    /**\n     * @type {workbox-precaching.PrecacheStrategy} The strategy created by this controller and\n     * used to cache assets and respond to fetch events.\n     */\n    get strategy() {\n        return this._strategy;\n    }\n    /**\n     * Adds items to the precache list, removing any duplicates and\n     * stores the files in the\n     * {@link workbox-core.cacheNames|\"precache cache\"} when the service\n     * worker installs.\n     *\n     * This method can be called multiple times.\n     *\n     * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\n     */\n    precache(entries) {\n        this.addToCacheList(entries);\n        if (!this._installAndActiveListenersAdded) {\n            self.addEventListener('install', this.install);\n            self.addEventListener('activate', this.activate);\n            this._installAndActiveListenersAdded = true;\n        }\n    }\n    /**\n     * This method will add items to the precache list, removing duplicates\n     * and ensuring the information is valid.\n     *\n     * @param {Array<workbox-precaching.PrecacheController.PrecacheEntry|string>} entries\n     *     Array of entries to precache.\n     */\n    addToCacheList(entries) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isArray(entries, {\n                moduleName: 'workbox-precaching',\n                className: 'PrecacheController',\n                funcName: 'addToCacheList',\n                paramName: 'entries',\n            });\n        }\n        const urlsToWarnAbout = [];\n        for (const entry of entries) {\n            // See https://github.com/GoogleChrome/workbox/issues/2259\n            if (typeof entry === 'string') {\n                urlsToWarnAbout.push(entry);\n            }\n            else if (entry && entry.revision === undefined) {\n                urlsToWarnAbout.push(entry.url);\n            }\n            const { cacheKey, url } = createCacheKey(entry);\n            const cacheMode = typeof entry !== 'string' && entry.revision ? 'reload' : 'default';\n            if (this._urlsToCacheKeys.has(url) &&\n                this._urlsToCacheKeys.get(url) !== cacheKey) {\n                throw new WorkboxError('add-to-cache-list-conflicting-entries', {\n                    firstEntry: this._urlsToCacheKeys.get(url),\n                    secondEntry: cacheKey,\n                });\n            }\n            if (typeof entry !== 'string' && entry.integrity) {\n                if (this._cacheKeysToIntegrities.has(cacheKey) &&\n                    this._cacheKeysToIntegrities.get(cacheKey) !== entry.integrity) {\n                    throw new WorkboxError('add-to-cache-list-conflicting-integrities', {\n                        url,\n                    });\n                }\n                this._cacheKeysToIntegrities.set(cacheKey, entry.integrity);\n            }\n            this._urlsToCacheKeys.set(url, cacheKey);\n            this._urlsToCacheModes.set(url, cacheMode);\n            if (urlsToWarnAbout.length > 0) {\n                const warningMessage = `Workbox is precaching URLs without revision ` +\n                    `info: ${urlsToWarnAbout.join(', ')}\\nThis is generally NOT safe. ` +\n                    `Learn more at https://bit.ly/wb-precache`;\n                if (process.env.NODE_ENV === 'production') {\n                    // Use console directly to display this warning without bloating\n                    // bundle sizes by pulling in all of the logger codebase in prod.\n                    console.warn(warningMessage);\n                }\n                else {\n                    logger.warn(warningMessage);\n                }\n            }\n        }\n    }\n    /**\n     * Precaches new and updated assets. Call this method from the service worker\n     * install event.\n     *\n     * Note: this method calls `event.waitUntil()` for you, so you do not need\n     * to call it yourself in your event handlers.\n     *\n     * @param {ExtendableEvent} event\n     * @return {Promise<workbox-precaching.InstallResult>}\n     */\n    install(event) {\n        // waitUntil returns Promise<any>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return waitUntil(event, async () => {\n            const installReportPlugin = new PrecacheInstallReportPlugin();\n            this.strategy.plugins.push(installReportPlugin);\n            // Cache entries one at a time.\n            // See https://github.com/GoogleChrome/workbox/issues/2528\n            for (const [url, cacheKey] of this._urlsToCacheKeys) {\n                const integrity = this._cacheKeysToIntegrities.get(cacheKey);\n                const cacheMode = this._urlsToCacheModes.get(url);\n                const request = new Request(url, {\n                    integrity,\n                    cache: cacheMode,\n                    credentials: 'same-origin',\n                });\n                await Promise.all(this.strategy.handleAll({\n                    params: { cacheKey },\n                    request,\n                    event,\n                }));\n            }\n            const { updatedURLs, notUpdatedURLs } = installReportPlugin;\n            if (process.env.NODE_ENV !== 'production') {\n                printInstallDetails(updatedURLs, notUpdatedURLs);\n            }\n            return { updatedURLs, notUpdatedURLs };\n        });\n    }\n    /**\n     * Deletes assets that are no longer present in the current precache manifest.\n     * Call this method from the service worker activate event.\n     *\n     * Note: this method calls `event.waitUntil()` for you, so you do not need\n     * to call it yourself in your event handlers.\n     *\n     * @param {ExtendableEvent} event\n     * @return {Promise<workbox-precaching.CleanupResult>}\n     */\n    activate(event) {\n        // waitUntil returns Promise<any>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return waitUntil(event, async () => {\n            const cache = await self.caches.open(this.strategy.cacheName);\n            const currentlyCachedRequests = await cache.keys();\n            const expectedCacheKeys = new Set(this._urlsToCacheKeys.values());\n            const deletedURLs = [];\n            for (const request of currentlyCachedRequests) {\n                if (!expectedCacheKeys.has(request.url)) {\n                    await cache.delete(request);\n                    deletedURLs.push(request.url);\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                printCleanupDetails(deletedURLs);\n            }\n            return { deletedURLs };\n        });\n    }\n    /**\n     * Returns a mapping of a precached URL to the corresponding cache key, taking\n     * into account the revision information for the URL.\n     *\n     * @return {Map<string, string>} A URL to cache key mapping.\n     */\n    getURLsToCacheKeys() {\n        return this._urlsToCacheKeys;\n    }\n    /**\n     * Returns a list of all the URLs that have been precached by the current\n     * service worker.\n     *\n     * @return {Array<string>} The precached URLs.\n     */\n    getCachedURLs() {\n        return [...this._urlsToCacheKeys.keys()];\n    }\n    /**\n     * Returns the cache key used for storing a given URL. If that URL is\n     * unversioned, like `/index.html', then the cache key will be the original\n     * URL with a search parameter appended to it.\n     *\n     * @param {string} url A URL whose cache key you want to look up.\n     * @return {string} The versioned URL that corresponds to a cache key\n     * for the original URL, or undefined if that URL isn't precached.\n     */\n    getCacheKeyForURL(url) {\n        const urlObject = new URL(url, location.href);\n        return this._urlsToCacheKeys.get(urlObject.href);\n    }\n    /**\n     * @param {string} url A cache key whose SRI you want to look up.\n     * @return {string} The subresource integrity associated with the cache key,\n     * or undefined if it's not set.\n     */\n    getIntegrityForCacheKey(cacheKey) {\n        return this._cacheKeysToIntegrities.get(cacheKey);\n    }\n    /**\n     * This acts as a drop-in replacement for\n     * [`cache.match()`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/match)\n     * with the following differences:\n     *\n     * - It knows what the name of the precache is, and only checks in that cache.\n     * - It allows you to pass in an \"original\" URL without versioning parameters,\n     * and it will automatically look up the correct cache key for the currently\n     * active revision of that URL.\n     *\n     * E.g., `matchPrecache('index.html')` will find the correct precached\n     * response for the currently active service worker, even if the actual cache\n     * key is `'/index.html?__WB_REVISION__=1234abcd'`.\n     *\n     * @param {string|Request} request The key (without revisioning parameters)\n     * to look up in the precache.\n     * @return {Promise<Response|undefined>}\n     */\n    async matchPrecache(request) {\n        const url = request instanceof Request ? request.url : request;\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (cacheKey) {\n            const cache = await self.caches.open(this.strategy.cacheName);\n            return cache.match(cacheKey);\n        }\n        return undefined;\n    }\n    /**\n     * Returns a function that looks up `url` in the precache (taking into\n     * account revision information), and returns the corresponding `Response`.\n     *\n     * @param {string} url The precached URL which will be used to lookup the\n     * `Response`.\n     * @return {workbox-routing~handlerCallback}\n     */\n    createHandlerBoundToURL(url) {\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (!cacheKey) {\n            throw new WorkboxError('non-precached-url', { url });\n        }\n        return (options) => {\n            options.request = new Request(url);\n            options.params = Object.assign({ cacheKey }, options.params);\n            return this.strategy.handle(options);\n        };\n    }\n}\nexport { PrecacheController };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { Route } from 'workbox-routing/Route.js';\nimport { generateURLVariations } from './utils/generateURLVariations.js';\nimport './_version.js';\n/**\n * A subclass of {@link workbox-routing.Route} that takes a\n * {@link workbox-precaching.PrecacheController}\n * instance and uses it to match incoming requests and handle fetching\n * responses from the precache.\n *\n * @memberof workbox-precaching\n * @extends workbox-routing.Route\n */\nclass PrecacheRoute extends Route {\n    /**\n     * @param {PrecacheController} precacheController A `PrecacheController`\n     * instance used to both match requests and respond to fetch events.\n     * @param {Object} [options] Options to control how requests are matched\n     * against the list of precached URLs.\n     * @param {string} [options.directoryIndex=index.html] The `directoryIndex` will\n     * check cache entries for a URLs ending with '/' to see if there is a hit when\n     * appending the `directoryIndex` value.\n     * @param {Array<RegExp>} [options.ignoreURLParametersMatching=[/^utm_/, /^fbclid$/]] An\n     * array of regex's to remove search params when looking for a cache match.\n     * @param {boolean} [options.cleanURLs=true] The `cleanURLs` option will\n     * check the cache for the URL with a `.html` added to the end of the end.\n     * @param {workbox-precaching~urlManipulation} [options.urlManipulation]\n     * This is a function that should take a URL and return an array of\n     * alternative URLs that should be checked for precache matches.\n     */\n    constructor(precacheController, options) {\n        const match = ({ request, }) => {\n            const urlsToCacheKeys = precacheController.getURLsToCacheKeys();\n            for (const possibleURL of generateURLVariations(request.url, options)) {\n                const cacheKey = urlsToCacheKeys.get(possibleURL);\n                if (cacheKey) {\n                    const integrity = precacheController.getIntegrityForCacheKey(cacheKey);\n                    return { cacheKey, integrity };\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Precaching did not find a match for ` + getFriendlyURL(request.url));\n            }\n            return;\n        };\n        super(match, precacheController.strategy);\n    }\n}\nexport { PrecacheRoute };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { removeIgnoredSearchParams } from './removeIgnoredSearchParams.js';\nimport '../_version.js';\n/**\n * Generator function that yields possible variations on the original URL to\n * check, one at a time.\n *\n * @param {string} url\n * @param {Object} options\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function* generateURLVariations(url, { ignoreURLParametersMatching = [/^utm_/, /^fbclid$/], directoryIndex = 'index.html', cleanURLs = true, urlManipulation, } = {}) {\n    const urlObject = new URL(url, location.href);\n    urlObject.hash = '';\n    yield urlObject.href;\n    const urlWithoutIgnoredParams = removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching);\n    yield urlWithoutIgnoredParams.href;\n    if (directoryIndex && urlWithoutIgnoredParams.pathname.endsWith('/')) {\n        const directoryURL = new URL(urlWithoutIgnoredParams.href);\n        directoryURL.pathname += directoryIndex;\n        yield directoryURL.href;\n    }\n    if (cleanURLs) {\n        const cleanURL = new URL(urlWithoutIgnoredParams.href);\n        cleanURL.pathname += '.html';\n        yield cleanURL.href;\n    }\n    if (urlManipulation) {\n        const additionalURLs = urlManipulation({ url: urlObject });\n        for (const urlToAttempt of additionalURLs) {\n            yield urlToAttempt.href;\n        }\n    }\n}\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Removes any URL search parameters that should be ignored.\n *\n * @param {URL} urlObject The original URL.\n * @param {Array<RegExp>} ignoreURLParametersMatching RegExps to test against\n * each search parameter name. Matches mean that the search parameter should be\n * ignored.\n * @return {URL} The URL with any ignored search parameters removed.\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching = []) {\n    // Convert the iterable into an array at the start of the loop to make sure\n    // deletion doesn't mess up iteration.\n    for (const paramName of [...urlObject.searchParams.keys()]) {\n        if (ignoreURLParametersMatching.some((regExp) => regExp.test(paramName))) {\n            urlObject.searchParams.delete(paramName);\n        }\n    }\n    return urlObject;\n}\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { addRoute } from './addRoute.js';\nimport { precache } from './precache.js';\nimport './_version.js';\n/**\n * This method will add entries to the precache list and add a route to\n * respond to fetch events.\n *\n * This is a convenience method that will call\n * {@link workbox-precaching.precache} and\n * {@link workbox-precaching.addRoute} in a single call.\n *\n * @param {Array<Object|string>} entries Array of entries to precache.\n * @param {Object} [options] See the\n * {@link workbox-precaching.PrecacheRoute} options.\n *\n * @memberof workbox-precaching\n */\nfunction precacheAndRoute(entries, options) {\n    precache(entries);\n    addRoute(options);\n}\nexport { precacheAndRoute };\n","import {registerRoute as workbox_routing_registerRoute} from '/Users/trusz/Work/071_transnetscd/transnet-scd/node_modules/workbox-routing/registerRoute.mjs';\nimport {NetworkFirst as workbox_strategies_NetworkFirst} from '/Users/trusz/Work/071_transnetscd/transnet-scd/node_modules/workbox-strategies/NetworkFirst.mjs';\nimport {precacheAndRoute as workbox_precaching_precacheAndRoute} from '/Users/trusz/Work/071_transnetscd/transnet-scd/node_modules/workbox-precaching/precacheAndRoute.mjs';/**\n * Welcome to your Workbox-powered service worker!\n *\n * You'll need to register this file in your web app.\n * See https://goo.gl/nhQhGp\n *\n * The rest of the code is auto-generated. Please don't update this file\n * directly; instead, make changes to your Workbox build configuration\n * and re-run your build process.\n * See https://goo.gl/2aRDsh\n */\n\n\n\n\n\n\n\n\nself.skipWaiting();\n\n\n\n\n/**\n * The precacheAndRoute() method efficiently caches and responds to\n * requests for URLs in the manifest.\n * See https://goo.gl/S9QRab\n */\nworkbox_precaching_precacheAndRoute([\n  {\n    \"url\": \"public/ace/ext-searchbox.js\",\n    \"revision\": \"c3ad58df7587107f71fc1d511624250d\"\n  },\n  {\n    \"url\": \"public/ace/mode-xml.js\",\n    \"revision\": \"9785371a49d2674f50bc4884eef35301\"\n  },\n  {\n    \"url\": \"public/ace/theme-solarized_dark.js\",\n    \"revision\": \"06f0522377bc0d70432b087bd37ffdf6\"\n  },\n  {\n    \"url\": \"public/ace/theme-solarized_light.js\",\n    \"revision\": \"e5f391ed15940217eea430074be6f6e5\"\n  },\n  {\n    \"url\": \"public/ace/worker-xml.js\",\n    \"revision\": \"1028c8cbfbf27b3242f66ea35531eaa4\"\n  },\n  {\n    \"url\": \"public/apple-touch-icon.png\",\n    \"revision\": \"62e7c75a8b21624dca15bd0bef539438\"\n  },\n  {\n    \"url\": \"public/css/normalize.css\",\n    \"revision\": \"112272e51c80ffe5bd01becd2ce7d656\"\n  },\n  {\n    \"url\": \"public/favicon-16x16.png\",\n    \"revision\": \"275aa2d0c672623cc28f0572348befe7\"\n  },\n  {\n    \"url\": \"public/favicon-32x32.png\",\n    \"revision\": \"2ee56f4805a985f34bd914dad9a5af78\"\n  },\n  {\n    \"url\": \"public/google/fonts/roboto-mono-v13.css\",\n    \"revision\": \"e1eb94539e43886f10f2776d68363800\"\n  },\n  {\n    \"url\": \"public/google/fonts/roboto-v27.css\",\n    \"revision\": \"e2632eed0f396ae44ab740aecf61194e\"\n  },\n  {\n    \"url\": \"public/google/icons/material-icons-outlined.css\",\n    \"revision\": \"a52bef2eb1033e6ac2171ef197b28b2c\"\n  },\n  {\n    \"url\": \"public/icon-192x192.png\",\n    \"revision\": \"31ae08296b6be35de83931d8e1cf966b\"\n  },\n  {\n    \"url\": \"public/icon-512x512.png\",\n    \"revision\": \"1e7723b8736961b09acce6ea63178a40\"\n  },\n  {\n    \"url\": \"public/icon.svg\",\n    \"revision\": \"26984e5d2724d581bc7fb39c3f7cb389\"\n  },\n  {\n    \"url\": \"public/js/plugins.js\",\n    \"revision\": \"b99b70e6289c822ee153058e226fb604\"\n  },\n  {\n    \"url\": \"public/js/worker.js\",\n    \"revision\": \"a77ab898eac9d3acc3841252aefe5f36\"\n  },\n  {\n    \"url\": \"public/js/xmlvalidate.js\",\n    \"revision\": \"13a15ca3eb50636fb4971e1ea7d664e8\"\n  },\n  {\n    \"url\": \"public/js/xmlvalidate.wasm\",\n    \"revision\": \"622a405972a204ca97e7e994a0e8244b\"\n  },\n  {\n    \"url\": \"public/maskable_icon.png\",\n    \"revision\": \"dcf4d1e9a7c6d791c83345eadaa8251d\"\n  },\n  {\n    \"url\": \"public/md/_Sidebar.md\",\n    \"revision\": \"6ada0c25a253e4c0cdcb7189e6dcb4c2\"\n  },\n  {\n    \"url\": \"public/md/Add-DAType-from-templates.md\",\n    \"revision\": \"d269e99b724a119f16991e06a6307a94\"\n  },\n  {\n    \"url\": \"public/md/Add-DOType-from-templates.md\",\n    \"revision\": \"ef32a3099889efadea46ae664877d23d\"\n  },\n  {\n    \"url\": \"public/md/Add-EnumType-from-templates.md\",\n    \"revision\": \"363aee1414bd70cd0aef0e8b06ea93df\"\n  },\n  {\n    \"url\": \"public/md/Add-LNodeType-from-templates.md\",\n    \"revision\": \"7c40c5b834208a7d95466102517ee465\"\n  },\n  {\n    \"url\": \"public/md/All-template-editor-wizards.md\",\n    \"revision\": \"2806b006116a70284127ddd622ab8b51\"\n  },\n  {\n    \"url\": \"public/md/Bay.md\",\n    \"revision\": \"f1a682fd2dcd61c8202dca97fd30d49b\"\n  },\n  {\n    \"url\": \"public/md/ClientLN.md\",\n    \"revision\": \"4eb4f03583c465c3a939a0d945199362\"\n  },\n  {\n    \"url\": \"public/md/Communication-Basics.md\",\n    \"revision\": \"0ca73fc160efc17318cbc70b69835a69\"\n  },\n  {\n    \"url\": \"public/md/Conducting-Equipment.md\",\n    \"revision\": \"e049f929cdd5f6bdb5ff7b803386dcc9\"\n  },\n  {\n    \"url\": \"public/md/ConnectedAP.md\",\n    \"revision\": \"3856d47db6ea758e20a53c18fc7fe2d5\"\n  },\n  {\n    \"url\": \"public/md/Create-GOOSE-Control-Blocks.md\",\n    \"revision\": \"bada1d08acb9620c6a30dac54d7bc171\"\n  },\n  {\n    \"url\": \"public/md/Create-Report-Control-Blocks.md\",\n    \"revision\": \"b829cb4b360cefdedc5912676ffcd683\"\n  },\n  {\n    \"url\": \"public/md/Create-Sampled-Values-Control-Blocks.md\",\n    \"revision\": \"318c3352aaf9564730f28a916a674946\"\n  },\n  {\n    \"url\": \"public/md/Create-Specification-IED-from-functions.md\",\n    \"revision\": \"7cf44bc99b5a80668fe82d5256f22331\"\n  },\n  {\n    \"url\": \"public/md/Data-attribute-type-child-BDA.md\",\n    \"revision\": \"e3d6286a137ddc094bcad5381a3356c5\"\n  },\n  {\n    \"url\": \"public/md/Data-attribute-type-DAType.md\",\n    \"revision\": \"6960ca29cfda78156586ff270e2edfcd\"\n  },\n  {\n    \"url\": \"public/md/Data-object-type-child-DA.md\",\n    \"revision\": \"e0cfe1ac920248e123430953aae4f4eb\"\n  },\n  {\n    \"url\": \"public/md/Data-object-type-child-SDO.md\",\n    \"revision\": \"baf4858f4d6d7bcd6808142e84bd7e0c\"\n  },\n  {\n    \"url\": \"public/md/Data-object-type-DOType.md\",\n    \"revision\": \"a0b985cdacae0708072317cdc1cc2648\"\n  },\n  {\n    \"url\": \"public/md/DataTypeTemplates.md\",\n    \"revision\": \"80d1b28093fcf2fa5034d0d06d09dc7e\"\n  },\n  {\n    \"url\": \"public/md/Edit-GOOSE-Control-Blocks.md\",\n    \"revision\": \"aa7a6b1ca9d75022aac87f60ffacbcbc\"\n  },\n  {\n    \"url\": \"public/md/Edit-Report-Control-Blocks.md\",\n    \"revision\": \"4950ea71c5ef906e7b5d2207e144827f\"\n  },\n  {\n    \"url\": \"public/md/Edit-Sampled-Value-Control-Blocks.md\",\n    \"revision\": \"31b668b5d7d1d282e73dc2b0b6b24f26\"\n  },\n  {\n    \"url\": \"public/md/Enumeration-EnumType.md\",\n    \"revision\": \"19894ca1a7b5c76d5cfcca01f419d277\"\n  },\n  {\n    \"url\": \"public/md/Enumeration-EnumVal.md\",\n    \"revision\": \"40b2caf67c9d1b80af63a942c6f8da16\"\n  },\n  {\n    \"url\": \"public/md/Extensions.md\",\n    \"revision\": \"a88b4ac872bc26f2a55a18abb1f3ab0c\"\n  },\n  {\n    \"url\": \"public/md/Function.md\",\n    \"revision\": \"860c5b8bd6589a7afcc2fbf9db6b53f7\"\n  },\n  {\n    \"url\": \"public/md/Functional-Naming-Basics.md\",\n    \"revision\": \"b4b8e7651e4cbbbc14ec61e21e60b058\"\n  },\n  {\n    \"url\": \"public/md/Generic-Substation-Event-Basics.md\",\n    \"revision\": \"232a089f795c50e540b83f6bb265b1ac\"\n  },\n  {\n    \"url\": \"public/md/Global-SCL-manipulation.md\",\n    \"revision\": \"9d5bf643ac42fabbd28a0d064bcb78ee\"\n  },\n  {\n    \"url\": \"public/md/Guess-substation-structure.md\",\n    \"revision\": \"36e07421b0daefab658fada7f5f23141\"\n  },\n  {\n    \"url\": \"public/md/Home.md\",\n    \"revision\": \"09a08d8d848605b6af66587155fca0b2\"\n  },\n  {\n    \"url\": \"public/md/IED.md\",\n    \"revision\": \"b43d81c8e86d726bb13b7dcf75b07f01\"\n  },\n  {\n    \"url\": \"public/md/Import-IEDs.md\",\n    \"revision\": \"51abf1b529a2c81b718c4aadf7496a26\"\n  },\n  {\n    \"url\": \"public/md/Install-OpenSCD.md\",\n    \"revision\": \"cc52cee3558f7f2cd522b213187b5d18\"\n  },\n  {\n    \"url\": \"public/md/Interface.md\",\n    \"revision\": \"1a7f356271be51e80b469f414245bc93\"\n  },\n  {\n    \"url\": \"public/md/Logical-Node-Reference.md\",\n    \"revision\": \"d1804c27219c3e2ff9a204248846d2c5\"\n  },\n  {\n    \"url\": \"public/md/Logical-node-type-child-DO.md\",\n    \"revision\": \"d6848ee5ff6125180a6e859e854683c8\"\n  },\n  {\n    \"url\": \"public/md/Logical-node-type-LNodeType.md\",\n    \"revision\": \"3b3c724128fd1eb2aa6a3ae14b89c737\"\n  },\n  {\n    \"url\": \"public/md/Merge-functionality.md\",\n    \"revision\": \"d401661d4f06c332f69e2a1b78c23858\"\n  },\n  {\n    \"url\": \"public/md/Power-Transformer.md\",\n    \"revision\": \"63585c5cbd4d445c7b85112671e648a9\"\n  },\n  {\n    \"url\": \"public/md/Project-workflow.md\",\n    \"revision\": \"ff1a6b4d2a408051fa327a9c0416fbac\"\n  },\n  {\n    \"url\": \"public/md/Report-Basics.md\",\n    \"revision\": \"74909673f6537d3c233583682d5fb009\"\n  },\n  {\n    \"url\": \"public/md/Sampled-Values-Basics.md\",\n    \"revision\": \"e95440e3fb55f24ed05db5c01d50e9f7\"\n  },\n  {\n    \"url\": \"public/md/Save-project.md\",\n    \"revision\": \"c64ca60b5ce8210aee6e03b6579f9a88\"\n  },\n  {\n    \"url\": \"public/md/Start-from-scratch.md\",\n    \"revision\": \"4cfd27c52c2ef6472d144a239793b8c6\"\n  },\n  {\n    \"url\": \"public/md/Start-from-template.md\",\n    \"revision\": \"cfa6e1f1cec2bcef91e0daa7ca10cc5f\"\n  },\n  {\n    \"url\": \"public/md/Subnetwork.md\",\n    \"revision\": \"0f6d95ecb487e0bfec5c49c9091fcba5\"\n  },\n  {\n    \"url\": \"public/md/Subscribe-complete-GOOSE.md\",\n    \"revision\": \"5471b84bbbc3577e4a206b752a9136ef\"\n  },\n  {\n    \"url\": \"public/md/Subscribe-complete-SMV.md\",\n    \"revision\": \"cac4e5b3c2019692614ce2c651fd2f85\"\n  },\n  {\n    \"url\": \"public/md/Subscriber-basics.md\",\n    \"revision\": \"6d1d44210c905448571c1361bcf135bc\"\n  },\n  {\n    \"url\": \"public/md/Substation-Section-Basics.md\",\n    \"revision\": \"51e959b05924f43d92f09bf4ec4c8b16\"\n  },\n  {\n    \"url\": \"public/md/Substation.md\",\n    \"revision\": \"d3e41ed437edcd425220436fd3e32010\"\n  },\n  {\n    \"url\": \"public/md/Update-subscriber-info.md\",\n    \"revision\": \"0da76ddfe10633b73f1e475129c50e27\"\n  },\n  {\n    \"url\": \"public/md/Validate-schema.md\",\n    \"revision\": \"456183a336d59cca8c587f04a06bfc1e\"\n  },\n  {\n    \"url\": \"public/md/Validate-template.md\",\n    \"revision\": \"7e7d66eeb83d4f92ea4769e5b7a56119\"\n  },\n  {\n    \"url\": \"public/md/Validators.md\",\n    \"revision\": \"2c72715a98a823e0d88ddfa26d6bc869\"\n  },\n  {\n    \"url\": \"public/md/Voltage-Level.md\",\n    \"revision\": \"8c8a372cdf3b0ca7164bbc8136965a79\"\n  },\n  {\n    \"url\": \"public/md/XML-code-editor.md\",\n    \"revision\": \"fd7447cc840b98e0ed9c9f06d4c8cd44\"\n  },\n  {\n    \"url\": \"public/monochrome_icon.png\",\n    \"revision\": \"329ec2d6785a691c932962b40c48f19f\"\n  },\n  {\n    \"url\": \"public/mstile-144x144.png\",\n    \"revision\": \"e65bc3ab3bcbf366bfb1a8aea688ba45\"\n  },\n  {\n    \"url\": \"public/mstile-150x150.png\",\n    \"revision\": \"a3b54491a78398fdd16d9d650bcee21a\"\n  },\n  {\n    \"url\": \"public/mstile-310x150.png\",\n    \"revision\": \"dbab2415b660994355da616a7b05f56e\"\n  },\n  {\n    \"url\": \"public/mstile-310x310.png\",\n    \"revision\": \"08f78b8fb9c4618eeb87dc76254dee39\"\n  },\n  {\n    \"url\": \"public/mstile-70x70.png\",\n    \"revision\": \"2707a4bc27e42e15c0bf88302bcab503\"\n  },\n  {\n    \"url\": \"src/action-icon.js\",\n    \"revision\": \"2c85476f6bf1664a54911cde6bc1297e\"\n  },\n  {\n    \"url\": \"src/action-pane.js\",\n    \"revision\": \"35968cb566db356e10f708c216c0aa0d\"\n  },\n  {\n    \"url\": \"src/Editing.js\",\n    \"revision\": \"48e560749152da58b2efb48b5dc96676\"\n  },\n  {\n    \"url\": \"src/editors/Cleanup.js\",\n    \"revision\": \"4ad97e132c3db7f82df8f4e2d7e5f441\"\n  },\n  {\n    \"url\": \"src/editors/cleanup/control-blocks-container.js\",\n    \"revision\": \"fcd68bc95a1c4674cd1dbcf661d8bfe5\"\n  },\n  {\n    \"url\": \"src/editors/cleanup/datasets-container.js\",\n    \"revision\": \"5215b7879795a50f3d1f6ac9a2339ae2\"\n  },\n  {\n    \"url\": \"src/editors/cleanup/datatypes-container.js\",\n    \"revision\": \"f62de9202823ac40aca190f5b71ba398\"\n  },\n  {\n    \"url\": \"src/editors/cleanup/foundation.js\",\n    \"revision\": \"ded2739e9545499afe9a3e3f1c68a6b5\"\n  },\n  {\n    \"url\": \"src/editors/Communication.js\",\n    \"revision\": \"c3e4c905c0dfd7597be15af8e6613a79\"\n  },\n  {\n    \"url\": \"src/editors/communication/connectedap-editor.js\",\n    \"revision\": \"2a82911c06626a8ce846f5bb2d8dc3f2\"\n  },\n  {\n    \"url\": \"src/editors/communication/gse-editor.js\",\n    \"revision\": \"30a8e0cbe819c9d9b7223463960ec18a\"\n  },\n  {\n    \"url\": \"src/editors/communication/smv-editor.js\",\n    \"revision\": \"31ab171f61f08c5581cf82330b12ebb8\"\n  },\n  {\n    \"url\": \"src/editors/communication/subnetwork-editor.js\",\n    \"revision\": \"a32e9ffc7bee28a1239121aea3adc2ad\"\n  },\n  {\n    \"url\": \"src/editors/GooseSubscriberDataBinding.js\",\n    \"revision\": \"6941d42544f54711fb07c2604f87396b\"\n  },\n  {\n    \"url\": \"src/editors/GooseSubscriberLaterBinding.js\",\n    \"revision\": \"fb6d5f893295b16ac4f445c5c669c22a\"\n  },\n  {\n    \"url\": \"src/editors/GooseSubscriberMessageBinding.js\",\n    \"revision\": \"ef3dbf43f0e26c18b6df04a9a2c1d33a\"\n  },\n  {\n    \"url\": \"src/editors/IED.js\",\n    \"revision\": \"c3b5475f601c065f0f211d32d6ab946d\"\n  },\n  {\n    \"url\": \"src/editors/ied/access-point-container.js\",\n    \"revision\": \"09dd9318c38cbd83515b7460c2272c4a\"\n  },\n  {\n    \"url\": \"src/editors/ied/da-container.js\",\n    \"revision\": \"4d059d7b2f441c21c0b5f240574d1653\"\n  },\n  {\n    \"url\": \"src/editors/ied/da-wizard.js\",\n    \"revision\": \"022c018382601ccafaba1c68cde595f2\"\n  },\n  {\n    \"url\": \"src/editors/ied/do-container.js\",\n    \"revision\": \"dde3ff3fbbee5b477cd0334ead591cc4\"\n  },\n  {\n    \"url\": \"src/editors/ied/do-wizard.js\",\n    \"revision\": \"73029cec4510c33b0bd39f99dc64d22b\"\n  },\n  {\n    \"url\": \"src/editors/ied/element-path.js\",\n    \"revision\": \"06634b75b45180a3a9737f08362fbad3\"\n  },\n  {\n    \"url\": \"src/editors/ied/foundation.js\",\n    \"revision\": \"d3d41af19f9870fd96d48c57cab03f11\"\n  },\n  {\n    \"url\": \"src/editors/ied/ied-container.js\",\n    \"revision\": \"d07c5ac36b650e20ae4eb5e18a08a7bf\"\n  },\n  {\n    \"url\": \"src/editors/ied/ldevice-container.js\",\n    \"revision\": \"b1fbd50bb862c73e9eedde2f807b1ab8\"\n  },\n  {\n    \"url\": \"src/editors/ied/ln-container.js\",\n    \"revision\": \"1e00efb94498f2533fe6b386189ac06e\"\n  },\n  {\n    \"url\": \"src/editors/ied/server-container.js\",\n    \"revision\": \"e634815b2110a06e469ef70519627698\"\n  },\n  {\n    \"url\": \"src/editors/Protocol104.js\",\n    \"revision\": \"e05c9afa23f6b2e10eece2e50edd3c78\"\n  },\n  {\n    \"url\": \"src/editors/protocol104/base-container.js\",\n    \"revision\": \"a8c7b7d6096502f5041f552b71301fcc\"\n  },\n  {\n    \"url\": \"src/editors/protocol104/connectedap-editor.js\",\n    \"revision\": \"a7ca6e2038f7633aa988637b270aed6a\"\n  },\n  {\n    \"url\": \"src/editors/protocol104/doi-container.js\",\n    \"revision\": \"1596d67e8ec59c5c2f46f360f9cff2fb\"\n  },\n  {\n    \"url\": \"src/editors/protocol104/foundation/actions.js\",\n    \"revision\": \"c48d4983db6b5982111d803feef77ea5\"\n  },\n  {\n    \"url\": \"src/editors/protocol104/foundation/cdc.js\",\n    \"revision\": \"45f5af4432e4a961e4d1051f93350c53\"\n  },\n  {\n    \"url\": \"src/editors/protocol104/foundation/foundation.js\",\n    \"revision\": \"3a8085fcc4b2e62700799be73fa55cfe\"\n  },\n  {\n    \"url\": \"src/editors/protocol104/foundation/p-types.js\",\n    \"revision\": \"be41b8314011fc96c0f58db791d27517\"\n  },\n  {\n    \"url\": \"src/editors/protocol104/foundation/private.js\",\n    \"revision\": \"3c6a9011136e3f843bef99ff71230257\"\n  },\n  {\n    \"url\": \"src/editors/protocol104/ied-container.js\",\n    \"revision\": \"ab51f44ceef117d18fb557e12e0317f0\"\n  },\n  {\n    \"url\": \"src/editors/protocol104/network-container.js\",\n    \"revision\": \"bf7482005a63c9b24f14a9016baf0f74\"\n  },\n  {\n    \"url\": \"src/editors/protocol104/subnetwork-container.js\",\n    \"revision\": \"0c0050bc8152411e86041061230570ae\"\n  },\n  {\n    \"url\": \"src/editors/protocol104/values-container.js\",\n    \"revision\": \"5d8f8d70b6431f358d0cc71a6379d75c\"\n  },\n  {\n    \"url\": \"src/editors/protocol104/wizards/address.js\",\n    \"revision\": \"67d0a9bd71b43fc558ca8df9a7bb6d41\"\n  },\n  {\n    \"url\": \"src/editors/protocol104/wizards/connectedap.js\",\n    \"revision\": \"50bd023137663f3eb1e957033e9c6ef6\"\n  },\n  {\n    \"url\": \"src/editors/protocol104/wizards/createAddresses.js\",\n    \"revision\": \"78f092578d3d5376e864447bd54db17b\"\n  },\n  {\n    \"url\": \"src/editors/protocol104/wizards/doi.js\",\n    \"revision\": \"94bba268e757d08d66f83a01f026faed\"\n  },\n  {\n    \"url\": \"src/editors/protocol104/wizards/logiclink.js\",\n    \"revision\": \"c54ba83a3c9371ac11aedab90db54e03\"\n  },\n  {\n    \"url\": \"src/editors/protocol104/wizards/redundancygroup.js\",\n    \"revision\": \"c4bd42faa59044c5d5cc6286b7e6361b\"\n  },\n  {\n    \"url\": \"src/editors/protocol104/wizards/selectDo.js\",\n    \"revision\": \"e678c58b2553deb22654a23dfd968995\"\n  },\n  {\n    \"url\": \"src/editors/protocol104/wizards/subnetwork.js\",\n    \"revision\": \"69e42541b69b713e4fea0273e1e8c2bc\"\n  },\n  {\n    \"url\": \"src/editors/Publisher.js\",\n    \"revision\": \"c5c8962752e3951375320151e07c46f5\"\n  },\n  {\n    \"url\": \"src/editors/publisher/data-set-editor.js\",\n    \"revision\": \"96f3bf1e674bd580983eafca4c51c595\"\n  },\n  {\n    \"url\": \"src/editors/publisher/data-set-element-editor.js\",\n    \"revision\": \"3808aabda42d110b9b6956830ae25313\"\n  },\n  {\n    \"url\": \"src/editors/publisher/foundation.js\",\n    \"revision\": \"fa0d8f3596ca60c09e9e4280a9ff9973\"\n  },\n  {\n    \"url\": \"src/editors/publisher/gse-control-editor.js\",\n    \"revision\": \"0682d80b22c352a9646d01c4c1fae16a\"\n  },\n  {\n    \"url\": \"src/editors/publisher/gse-control-element-editor.js\",\n    \"revision\": \"a8a601f271f47eb8b56f6082b4e2a92f\"\n  },\n  {\n    \"url\": \"src/editors/publisher/report-control-editor.js\",\n    \"revision\": \"0de80eaf977061c479c03b3a3d8efaba\"\n  },\n  {\n    \"url\": \"src/editors/publisher/report-control-element-editor.js\",\n    \"revision\": \"807ff4978e3ac83fbf4e9e66fe74aff9\"\n  },\n  {\n    \"url\": \"src/editors/publisher/sampled-value-control-editor.js\",\n    \"revision\": \"0728710d46191e96758fc55e89b01e83\"\n  },\n  {\n    \"url\": \"src/editors/publisher/sampled-value-control-element-editor.js\",\n    \"revision\": \"fbb74e5fc0b8ff7396e067b178301f08\"\n  },\n  {\n    \"url\": \"src/editors/SingleLineDiagram.js\",\n    \"revision\": \"1f4fbd3af377dbb402537c808ca3cc6c\"\n  },\n  {\n    \"url\": \"src/editors/singlelinediagram/foundation.js\",\n    \"revision\": \"9bf2c00750cd0158068073db155a3fc2\"\n  },\n  {\n    \"url\": \"src/editors/singlelinediagram/ortho-connector.js\",\n    \"revision\": \"95fb7a18c78db7a79e9d08c53bb17698\"\n  },\n  {\n    \"url\": \"src/editors/singlelinediagram/sld-drawing.js\",\n    \"revision\": \"91b90fc6ebbfbba80bc5a4760597f864\"\n  },\n  {\n    \"url\": \"src/editors/singlelinediagram/wizards/bay.js\",\n    \"revision\": \"9ce34ed5b476ec3b3043d1b6de4351ab\"\n  },\n  {\n    \"url\": \"src/editors/singlelinediagram/wizards/conductingequipment.js\",\n    \"revision\": \"b410e4af9c6259ff6e3fa996290f67b4\"\n  },\n  {\n    \"url\": \"src/editors/singlelinediagram/wizards/foundation.js\",\n    \"revision\": \"ce6cee60f6805b955c1823ec689f23f5\"\n  },\n  {\n    \"url\": \"src/editors/singlelinediagram/wizards/powertransformer.js\",\n    \"revision\": \"ce84003433ce5ae86f573ddb38ab3adf\"\n  },\n  {\n    \"url\": \"src/editors/singlelinediagram/wizards/wizard-library.js\",\n    \"revision\": \"9d651180bf9ed5038f0881071a6c4bf9\"\n  },\n  {\n    \"url\": \"src/editors/SMVSubscriberDataBinding.js\",\n    \"revision\": \"58bf5b6d02374f9519529591db917f2c\"\n  },\n  {\n    \"url\": \"src/editors/SMVSubscriberLaterBinding.js\",\n    \"revision\": \"c698765e96cff7c1dd7464729a405890\"\n  },\n  {\n    \"url\": \"src/editors/SMVSubscriberMessageBinding.js\",\n    \"revision\": \"bbdf8292acf320d6a314b2fdb30856ec\"\n  },\n  {\n    \"url\": \"src/editors/subscription/fcda-binding-list.js\",\n    \"revision\": \"91f68a655e078f6fb77cb9fbf4de3c36\"\n  },\n  {\n    \"url\": \"src/editors/subscription/foundation.js\",\n    \"revision\": \"9675dc03cad73f9298ec635e87d50519\"\n  },\n  {\n    \"url\": \"src/editors/subscription/goose/foundation.js\",\n    \"revision\": \"4976f9954402148b3728bb9644600f2f\"\n  },\n  {\n    \"url\": \"src/editors/subscription/goose/goose-list.js\",\n    \"revision\": \"0321efaed1a7d14faa7865032b497798\"\n  },\n  {\n    \"url\": \"src/editors/subscription/goose/subscriber-list.js\",\n    \"revision\": \"950876f04f7a14dc22b8e2b41fe28fc4\"\n  },\n  {\n    \"url\": \"src/editors/subscription/ied-list.js\",\n    \"revision\": \"91da3f24c4e67c58c75d170de614ea9c\"\n  },\n  {\n    \"url\": \"src/editors/subscription/later-binding/ext-ref-later-binding-list.js\",\n    \"revision\": \"f50f7ee1465f73f9bfc0f728f3b7ea76\"\n  },\n  {\n    \"url\": \"src/editors/subscription/later-binding/ext-ref-ln-binding-list.js\",\n    \"revision\": \"0816e3ee3b0e892735cc6c786733cf5b\"\n  },\n  {\n    \"url\": \"src/editors/subscription/later-binding/foundation.js\",\n    \"revision\": \"041350c7566584db1db3a3b8c30ca551\"\n  },\n  {\n    \"url\": \"src/editors/subscription/sampledvalues/foundation.js\",\n    \"revision\": \"83d46893fdc0cb5672a2d06ec4c8d4ea\"\n  },\n  {\n    \"url\": \"src/editors/subscription/sampledvalues/smv-list.js\",\n    \"revision\": \"2227a3d4de832750024364fcee9e3922\"\n  },\n  {\n    \"url\": \"src/editors/subscription/sampledvalues/subscriber-list.js\",\n    \"revision\": \"f86fe7b2ce78d379d0ecef7fac5b9f8b\"\n  },\n  {\n    \"url\": \"src/editors/Substation.js\",\n    \"revision\": \"74099fa14020f6ad3de8a8212c2c1b66\"\n  },\n  {\n    \"url\": \"src/editors/substation/bay-editor.js\",\n    \"revision\": \"7b091ed81582d3af8474b781d2b0fead\"\n  },\n  {\n    \"url\": \"src/editors/substation/conducting-equipment-editor.js\",\n    \"revision\": \"140765736b7e0018e0d4f7b3427dacbd\"\n  },\n  {\n    \"url\": \"src/editors/substation/eq-function-editor.js\",\n    \"revision\": \"b8235acd9b840136e42de9fd1f5a5fd2\"\n  },\n  {\n    \"url\": \"src/editors/substation/eq-sub-function-editor.js\",\n    \"revision\": \"6e6b646f7bcf3199083653180ea4c007\"\n  },\n  {\n    \"url\": \"src/editors/substation/foundation.js\",\n    \"revision\": \"1b51132d21588af0883e89d11ff99cd5\"\n  },\n  {\n    \"url\": \"src/editors/substation/function-editor.js\",\n    \"revision\": \"71dad0e3802b2a72562bbc560d42e0ed\"\n  },\n  {\n    \"url\": \"src/editors/substation/general-equipment-editor.js\",\n    \"revision\": \"7c25ee4c6e0f42193f733566b5116792\"\n  },\n  {\n    \"url\": \"src/editors/substation/guess-wizard.js\",\n    \"revision\": \"b7a3f481e5fd2b5aba64436e619e4f21\"\n  },\n  {\n    \"url\": \"src/editors/substation/ied-editor.js\",\n    \"revision\": \"78288d57fd2fafdbb76eb6dc54c0b909\"\n  },\n  {\n    \"url\": \"src/editors/substation/l-node-editor.js\",\n    \"revision\": \"ca6771c596b66b6fd75135a009e01639\"\n  },\n  {\n    \"url\": \"src/editors/substation/line-editor.js\",\n    \"revision\": \"05655b16a686e59c9c8a533ca5356c7f\"\n  },\n  {\n    \"url\": \"src/editors/substation/powertransformer-editor.js\",\n    \"revision\": \"a6c141a376b6caf33280040c8b04097e\"\n  },\n  {\n    \"url\": \"src/editors/substation/sub-equipment-editor.js\",\n    \"revision\": \"f46f700c5bff5f456722562cfc324d71\"\n  },\n  {\n    \"url\": \"src/editors/substation/sub-function-editor.js\",\n    \"revision\": \"fc875413bfe273548c156d42486fa80e\"\n  },\n  {\n    \"url\": \"src/editors/substation/substation-editor.js\",\n    \"revision\": \"bf4ea73e995c98fe29ad45ff9051da22\"\n  },\n  {\n    \"url\": \"src/editors/substation/tapchanger-editor.js\",\n    \"revision\": \"03dbfc5071fd927520fa0f6bab4709c8\"\n  },\n  {\n    \"url\": \"src/editors/substation/transformer-winding-editor.js\",\n    \"revision\": \"a38512c442afd476cec9debebcd5ce58\"\n  },\n  {\n    \"url\": \"src/editors/substation/voltage-level-editor.js\",\n    \"revision\": \"bc4fe661aeeb993dff3b5faea8f22062\"\n  },\n  {\n    \"url\": \"src/editors/substation/zeroline-pane.js\",\n    \"revision\": \"ce1be6c7f82b3f8ba27b6b1fc71acb23\"\n  },\n  {\n    \"url\": \"src/editors/Templates.js\",\n    \"revision\": \"48e867e0f2f0569b1d40d107130f82d8\"\n  },\n  {\n    \"url\": \"src/editors/templates/datype-wizards.js\",\n    \"revision\": \"d1b5d9aa9fa73e759bf2897d2db8777d\"\n  },\n  {\n    \"url\": \"src/editors/templates/dotype-wizards.js\",\n    \"revision\": \"2176bd7fed084ec8bab9dd141b032f9a\"\n  },\n  {\n    \"url\": \"src/editors/templates/enumtype-wizard.js\",\n    \"revision\": \"b04bf13ac396336ccee92b61b08e083e\"\n  },\n  {\n    \"url\": \"src/editors/templates/foundation.js\",\n    \"revision\": \"0366da749da80d91d3f4950ae530887d\"\n  },\n  {\n    \"url\": \"src/editors/templates/lnodetype-wizard.js\",\n    \"revision\": \"136b69194c1fe7717716423e60d7d51f\"\n  },\n  {\n    \"url\": \"src/filtered-list.js\",\n    \"revision\": \"ee376f7d752e35dabdca4ed71503265d\"\n  },\n  {\n    \"url\": \"src/finder-list.js\",\n    \"revision\": \"4bdc1a209c987bab28cda8b23110241e\"\n  },\n  {\n    \"url\": \"src/foundation.js\",\n    \"revision\": \"4f058e21ee25d1c89304be0fe1034ba2\"\n  },\n  {\n    \"url\": \"src/foundation/compare.js\",\n    \"revision\": \"0219701037974e6cb7f2612a420d8c4d\"\n  },\n  {\n    \"url\": \"src/foundation/dai.js\",\n    \"revision\": \"bc49c7fc95fa075dc7f96ba061bc5538\"\n  },\n  {\n    \"url\": \"src/foundation/generators.js\",\n    \"revision\": \"a87e823bfed1fb5e3ca9dcdd195d48e5\"\n  },\n  {\n    \"url\": \"src/foundation/ied.js\",\n    \"revision\": \"15d5b33d08eec4e9a22c09a8955f0fa3\"\n  },\n  {\n    \"url\": \"src/foundation/nsdoc.js\",\n    \"revision\": \"d8b53f8bcd55fd1979b17dbad9a7875c\"\n  },\n  {\n    \"url\": \"src/foundation/scl.js\",\n    \"revision\": \"92aa5f532152489d8d8f6c3d27ba808d\"\n  },\n  {\n    \"url\": \"src/Hosting.js\",\n    \"revision\": \"a0236b34c5ca38a5e2c49de4ff9f3895\"\n  },\n  {\n    \"url\": \"src/icons/compare.js\",\n    \"revision\": \"93988261c2fa1082e6367a16d23dbd29\"\n  },\n  {\n    \"url\": \"src/icons/icons.js\",\n    \"revision\": \"82abdc6186bceca9b28c15bcf6020f01\"\n  },\n  {\n    \"url\": \"src/icons/ied-icons.js\",\n    \"revision\": \"b995e2eafb8b1b39db87a40b8c20fe27\"\n  },\n  {\n    \"url\": \"src/icons/lnode.js\",\n    \"revision\": \"5cda91e8f2268e784d70974babadaaa1\"\n  },\n  {\n    \"url\": \"src/Logging.js\",\n    \"revision\": \"cc997f5eeacd880f203a3c86a8da08c3\"\n  },\n  {\n    \"url\": \"src/menu/CompareIED.js\",\n    \"revision\": \"9f6428472e2a0a4061e2ee902ba432cc\"\n  },\n  {\n    \"url\": \"src/menu/ExportCommunication.js\",\n    \"revision\": \"a2dc49c9b6c265222f4950b97e2ce8dc\"\n  },\n  {\n    \"url\": \"src/menu/Help.js\",\n    \"revision\": \"fd5c670aba0b9460051081e3d7bf4687\"\n  },\n  {\n    \"url\": \"src/menu/ImportIEDs.js\",\n    \"revision\": \"3d5309cc90e1799a45a62a9e674fa658\"\n  },\n  {\n    \"url\": \"src/menu/Merge.js\",\n    \"revision\": \"c7c550165106aad47fd6e555f94e4bfd\"\n  },\n  {\n    \"url\": \"src/menu/NewProject.js\",\n    \"revision\": \"11bf6b7f078a4a518ed35d6ef55f5d72\"\n  },\n  {\n    \"url\": \"src/menu/OpenProject.js\",\n    \"revision\": \"f9608f485665c391a96f18418dc46f2f\"\n  },\n  {\n    \"url\": \"src/menu/SaveProject.js\",\n    \"revision\": \"6d411ef6bbdf3e09eaae8bc7e9e5eb54\"\n  },\n  {\n    \"url\": \"src/menu/SclHistory.js\",\n    \"revision\": \"fce492a9d74428717e8658d054c5f339\"\n  },\n  {\n    \"url\": \"src/menu/SubscriberInfo.js\",\n    \"revision\": \"890c6799e0fa1885b55329feb4123985\"\n  },\n  {\n    \"url\": \"src/menu/UpdateDescriptionABB.js\",\n    \"revision\": \"9135f88caa43757e59a7fb171debc489\"\n  },\n  {\n    \"url\": \"src/menu/UpdateDescriptionSEL.js\",\n    \"revision\": \"c8b06e7a043e16f1bc6c98f66991d498\"\n  },\n  {\n    \"url\": \"src/menu/UpdateSubstation.js\",\n    \"revision\": \"741b83328546a5d8c28f9450db227015\"\n  },\n  {\n    \"url\": \"src/menu/VirtualTemplateIED.js\",\n    \"revision\": \"9d70d327bebf8629e0fa973e69188460\"\n  },\n  {\n    \"url\": \"src/menu/virtualtemplateied/foundation.js\",\n    \"revision\": \"2ef5df3b51257782bdef0b5409045fec\"\n  },\n  {\n    \"url\": \"src/open-scd.js\",\n    \"revision\": \"39c30c908ebb315cf86e3ef57cb46826\"\n  },\n  {\n    \"url\": \"src/oscd-filter-button.js\",\n    \"revision\": \"ac65b389a9260b0255aeaa5f36a39d96\"\n  },\n  {\n    \"url\": \"src/plain-compare-list.js\",\n    \"revision\": \"bd9d79e3a71e75ce9f018aed433fc762\"\n  },\n  {\n    \"url\": \"src/Plugging.js\",\n    \"revision\": \"0470d6e53e17c5788a14c3094de223f2\"\n  },\n  {\n    \"url\": \"src/schemas.js\",\n    \"revision\": \"3017a37f278447276ed78123917640a5\"\n  },\n  {\n    \"url\": \"src/Setting.js\",\n    \"revision\": \"7e02ad8b373e40a4eb11551771d78900\"\n  },\n  {\n    \"url\": \"src/themes.js\",\n    \"revision\": \"8bbec3972055f9100a12262725b42940\"\n  },\n  {\n    \"url\": \"src/translations/de.js\",\n    \"revision\": \"60fc121d18c5b4b36284636aff178d80\"\n  },\n  {\n    \"url\": \"src/translations/en.js\",\n    \"revision\": \"296d32bccba95bfa99069570a853c882\"\n  },\n  {\n    \"url\": \"src/translations/loader.js\",\n    \"revision\": \"9032cc10f0e34b8b6c3c1f5bc0a0c0a2\"\n  },\n  {\n    \"url\": \"src/validators/templates/dabda.js\",\n    \"revision\": \"7857ea35757f1c7a710d8d7920c7c331\"\n  },\n  {\n    \"url\": \"src/validators/templates/datype.js\",\n    \"revision\": \"b62a34805b0888b4040e296556ed42b0\"\n  },\n  {\n    \"url\": \"src/validators/templates/dosdo.js\",\n    \"revision\": \"6150e79c702d6720a2f89e12f7b1481e\"\n  },\n  {\n    \"url\": \"src/validators/templates/dotype.js\",\n    \"revision\": \"5063d74260edfe7892b53ae05fb9da49\"\n  },\n  {\n    \"url\": \"src/validators/templates/foundation.js\",\n    \"revision\": \"5d1687c9f67658e12564bf0cc1a0b0bd\"\n  },\n  {\n    \"url\": \"src/validators/templates/lnodetype.js\",\n    \"revision\": \"bb47abea21144af71a3380d1122ca71d\"\n  },\n  {\n    \"url\": \"src/validators/ValidateSchema.js\",\n    \"revision\": \"c754c8ea80e8f6a973825e7e00c43426\"\n  },\n  {\n    \"url\": \"src/validators/ValidateTemplates.js\",\n    \"revision\": \"4c42ba05eec3b00d97bd7cfec8dd7bef\"\n  },\n  {\n    \"url\": \"src/Waiting.js\",\n    \"revision\": \"a83e47c1b3bf4fbf2325a77dc3bb63e4\"\n  },\n  {\n    \"url\": \"src/wizard-checkbox.js\",\n    \"revision\": \"fd3b3f16f9e65e19e3ff86157a98dde4\"\n  },\n  {\n    \"url\": \"src/wizard-dialog.js\",\n    \"revision\": \"95d7225f4c4f4dfc1b763ff619696bc2\"\n  },\n  {\n    \"url\": \"src/wizard-select.js\",\n    \"revision\": \"1ee1f71357a60c29a8cf999e24b9fbce\"\n  },\n  {\n    \"url\": \"src/wizard-textfield.js\",\n    \"revision\": \"0f64d2849cd649584ba0be10df7a8734\"\n  },\n  {\n    \"url\": \"src/WizardDivider.js\",\n    \"revision\": \"6bbfac8919380065d8e03f1d358b5c55\"\n  },\n  {\n    \"url\": \"src/Wizarding.js\",\n    \"revision\": \"7d55786347b7bd569d2db6e7cd44b4f1\"\n  },\n  {\n    \"url\": \"src/wizards.js\",\n    \"revision\": \"0941dbc742542b6d24f48b81e64fe4f4\"\n  },\n  {\n    \"url\": \"src/wizards/abstractda.js\",\n    \"revision\": \"051edd0c1ec3ee9c572bbe09101fcdb9\"\n  },\n  {\n    \"url\": \"src/wizards/address.js\",\n    \"revision\": \"6f80ab09989738bde8e37ae448e26a9a\"\n  },\n  {\n    \"url\": \"src/wizards/bay.js\",\n    \"revision\": \"fc5efc9ec8395a6b514ae9490fbefdde\"\n  },\n  {\n    \"url\": \"src/wizards/bda.js\",\n    \"revision\": \"5d2079138bd839432a29cbc184d02124\"\n  },\n  {\n    \"url\": \"src/wizards/clientln.js\",\n    \"revision\": \"2a2378d05118ad835d9c3daf1c4a4110\"\n  },\n  {\n    \"url\": \"src/wizards/commmap-wizards.js\",\n    \"revision\": \"4eef278cc0117800e32597fe61e3e4d3\"\n  },\n  {\n    \"url\": \"src/wizards/conductingequipment.js\",\n    \"revision\": \"87d155369fe719a5ad1ac50ce438450a\"\n  },\n  {\n    \"url\": \"src/wizards/connectedap.js\",\n    \"revision\": \"9356ef09f31829dbf4fe0f37c4d005e2\"\n  },\n  {\n    \"url\": \"src/wizards/connectivitynode.js\",\n    \"revision\": \"a5a6128fbe206c152eb67ea0082789aa\"\n  },\n  {\n    \"url\": \"src/wizards/controlwithiedname.js\",\n    \"revision\": \"1379388648c977a76d74881dc4ded567\"\n  },\n  {\n    \"url\": \"src/wizards/da.js\",\n    \"revision\": \"5dfe59ceaa417a0a6f68be74a6610b29\"\n  },\n  {\n    \"url\": \"src/wizards/dai.js\",\n    \"revision\": \"a52656e34adc5a9b325cf1b9eebec481\"\n  },\n  {\n    \"url\": \"src/wizards/dataset.js\",\n    \"revision\": \"9a617033f8e86fcf499a5ee640711208\"\n  },\n  {\n    \"url\": \"src/wizards/eqfunction.js\",\n    \"revision\": \"4233b91081cc1ad7f125c4d92bdd7001\"\n  },\n  {\n    \"url\": \"src/wizards/eqsubfunction.js\",\n    \"revision\": \"fdf1ef9d1f24a6a1b308c640430cb325\"\n  },\n  {\n    \"url\": \"src/wizards/fcda.js\",\n    \"revision\": \"3d90247c2e25d02609d55ede43d29664\"\n  },\n  {\n    \"url\": \"src/wizards/foundation/actions.js\",\n    \"revision\": \"17be38a1691f59d1b7578db64a1263df\"\n  },\n  {\n    \"url\": \"src/wizards/foundation/dai-field-type.js\",\n    \"revision\": \"0c9a2e40e9d31c6746ba81f9dae44939\"\n  },\n  {\n    \"url\": \"src/wizards/foundation/enums.js\",\n    \"revision\": \"de2c8f1f202f795a82690c2c8e11e688\"\n  },\n  {\n    \"url\": \"src/wizards/foundation/finder.js\",\n    \"revision\": \"429bad08950589e62f9e84b8734ef517\"\n  },\n  {\n    \"url\": \"src/wizards/foundation/limits.js\",\n    \"revision\": \"4505ae4019aa04114d8b1319a8386d9b\"\n  },\n  {\n    \"url\": \"src/wizards/foundation/p-types.js\",\n    \"revision\": \"96c7c40e3341dfa4ac625f974f7f3297\"\n  },\n  {\n    \"url\": \"src/wizards/foundation/references.js\",\n    \"revision\": \"8491dd1aa1e444904617ef4c991c69ee\"\n  },\n  {\n    \"url\": \"src/wizards/foundation/scl.js\",\n    \"revision\": \"beb97abf6844136e11895fdb9164544f\"\n  },\n  {\n    \"url\": \"src/wizards/function.js\",\n    \"revision\": \"44aa98b8af790f87f86d37a1fc9f1d5e\"\n  },\n  {\n    \"url\": \"src/wizards/generalEquipment.js\",\n    \"revision\": \"67004e9578d55013b926f05eacf65f32\"\n  },\n  {\n    \"url\": \"src/wizards/gse.js\",\n    \"revision\": \"b9b917850c899a1a8b102a42f92eac82\"\n  },\n  {\n    \"url\": \"src/wizards/gsecontrol.js\",\n    \"revision\": \"dd577bdfe95ffaa281675641a2bf9007\"\n  },\n  {\n    \"url\": \"src/wizards/ied.js\",\n    \"revision\": \"8819264ce57e0d4caa23764ba7e4bb13\"\n  },\n  {\n    \"url\": \"src/wizards/line.js\",\n    \"revision\": \"5dfabd0533191b80d425c79ed3e8d07d\"\n  },\n  {\n    \"url\": \"src/wizards/lnode.js\",\n    \"revision\": \"9a1820bf48dca418c6043f992f7e0760\"\n  },\n  {\n    \"url\": \"src/wizards/optfields.js\",\n    \"revision\": \"60b486b58f766e7fd15bdec8c40ffcfd\"\n  },\n  {\n    \"url\": \"src/wizards/powertransformer.js\",\n    \"revision\": \"bc1b5087b2c15e3d59bd298445fceb5b\"\n  },\n  {\n    \"url\": \"src/wizards/reportcontrol.js\",\n    \"revision\": \"ad973bf66ca21a8af4434de49c64794c\"\n  },\n  {\n    \"url\": \"src/wizards/sampledvaluecontrol.js\",\n    \"revision\": \"f2ddb85cf01c22ae0b323b360b90b952\"\n  },\n  {\n    \"url\": \"src/wizards/service-clientServer-configurations.js\",\n    \"revision\": \"d8cc0931fbf8baa5b97cc1ac1efa9530\"\n  },\n  {\n    \"url\": \"src/wizards/service-GSEControl.js\",\n    \"revision\": \"1c98f5fd7ffa281161e2edda322fb66a\"\n  },\n  {\n    \"url\": \"src/wizards/service-log-settingsgroup.js\",\n    \"revision\": \"9dac690e30715f006e77b943cb430c97\"\n  },\n  {\n    \"url\": \"src/wizards/service-networking.js\",\n    \"revision\": \"a831149870ec2bba32493812b3fa0320\"\n  },\n  {\n    \"url\": \"src/wizards/service-report-configurations.js\",\n    \"revision\": \"1a0ad7460a8627f05591ee0e1c5afba1\"\n  },\n  {\n    \"url\": \"src/wizards/service-sampled-values.js\",\n    \"revision\": \"077dd27f5ed895f2adc2a749cb844ce0\"\n  },\n  {\n    \"url\": \"src/wizards/services.js\",\n    \"revision\": \"f835148db9a0d833dd98a52afa598b50\"\n  },\n  {\n    \"url\": \"src/wizards/smv.js\",\n    \"revision\": \"cf029b8754774f4709c134ab9e86d91e\"\n  },\n  {\n    \"url\": \"src/wizards/smvopts.js\",\n    \"revision\": \"94dc6c7b7c1e5ee8070978f36ac010ae\"\n  },\n  {\n    \"url\": \"src/wizards/subequipment.js\",\n    \"revision\": \"a2976b385bcb1732cddf82b7a5624563\"\n  },\n  {\n    \"url\": \"src/wizards/subfunction.js\",\n    \"revision\": \"c59d3001fca46ac3394b3d6f5db80a28\"\n  },\n  {\n    \"url\": \"src/wizards/subnetwork.js\",\n    \"revision\": \"2470f18213dc311eb8b3e74ee8177f0b\"\n  },\n  {\n    \"url\": \"src/wizards/substation.js\",\n    \"revision\": \"87d180e38fd636b6be2f5ec9ee648f40\"\n  },\n  {\n    \"url\": \"src/wizards/tapchanger.js\",\n    \"revision\": \"95dcb3ae89f2a66655d3652ee8b726f6\"\n  },\n  {\n    \"url\": \"src/wizards/terminal.js\",\n    \"revision\": \"dcb2f2513cf1bb95611de29cf69f0bac\"\n  },\n  {\n    \"url\": \"src/wizards/transformerWinding.js\",\n    \"revision\": \"c094e34a1573e11abfc997b8b47c0e5e\"\n  },\n  {\n    \"url\": \"src/wizards/trgops.js\",\n    \"revision\": \"8f2a9f0b3a9693a85216f648c3000e4f\"\n  },\n  {\n    \"url\": \"src/wizards/voltagelevel.js\",\n    \"revision\": \"60daa418455d23684e7fa05e9470cba0\"\n  },\n  {\n    \"url\": \"src/wizards/wizard-library.js\",\n    \"revision\": \"6bbdd1409e82c6335a2deb001c7062dc\"\n  },\n  {\n    \"url\": \"browserconfig.xml\",\n    \"revision\": \"a8c181f3745541f8aa4653452592763b\"\n  },\n  {\n    \"url\": \"CC-EULA.pdf\",\n    \"revision\": \"84642855997c978c5d96187c63835413\"\n  },\n  {\n    \"url\": \"CHANGELOG.md\",\n    \"revision\": \"6e85d97b16ad007354b64379994e745f\"\n  },\n  {\n    \"url\": \"favicon.ico\",\n    \"revision\": \"84e4fb128b947bc51ebf808a4f5b2512\"\n  },\n  {\n    \"url\": \"index.html\",\n    \"revision\": \"1e2de83e010b160dd7c6f6a401bdb571\"\n  },\n  {\n    \"url\": \"LICENSE.md\",\n    \"revision\": \"9cc11fc6c697d3f1d8ac1d3c3ccd0567\"\n  },\n  {\n    \"url\": \"manifest.json\",\n    \"revision\": \"3215073ba558235d255d89b8dde0b69a\"\n  },\n  {\n    \"url\": \"README.md\",\n    \"revision\": \"d7572c854177ddeaf578252dc688ae75\"\n  },\n  {\n    \"url\": \"ROADMAP.md\",\n    \"revision\": \"9bade859b96ca3b6ac0548e628f2ca9f\"\n  },\n  {\n    \"url\": \"snowpack.config.js\",\n    \"revision\": \"e89f54c3b619a6c15a7c6b3349513d4b\"\n  }\n], {});\n\n\n\n\nworkbox_routing_registerRoute(/.*/, new workbox_strategies_NetworkFirst(), 'GET');\n\n\n\n\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * Adds items to the precache list, removing any duplicates and\n * stores the files in the\n * {@link workbox-core.cacheNames|\"precache cache\"} when the service\n * worker installs.\n *\n * This method can be called multiple times.\n *\n * Please note: This method **will not** serve any of the cached files for you.\n * It only precaches files. To respond to a network request you call\n * {@link workbox-precaching.addRoute}.\n *\n * If you have a single array of files to precache, you can just call\n * {@link workbox-precaching.precacheAndRoute}.\n *\n * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\n *\n * @memberof workbox-precaching\n */\nfunction precache(entries) {\n    const precacheController = getOrCreatePrecacheController();\n    precacheController.precache(entries);\n}\nexport { precache };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { registerRoute } from 'workbox-routing/registerRoute.js';\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport { PrecacheRoute } from './PrecacheRoute.js';\nimport './_version.js';\n/**\n * Add a `fetch` listener to the service worker that will\n * respond to\n * [network requests]{@link https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Custom_responses_to_requests}\n * with precached assets.\n *\n * Requests for assets that aren't precached, the `FetchEvent` will not be\n * responded to, allowing the event to fall through to other `fetch` event\n * listeners.\n *\n * @param {Object} [options] See the {@link workbox-precaching.PrecacheRoute}\n * options.\n *\n * @memberof workbox-precaching\n */\nfunction addRoute(options) {\n    const precacheController = getOrCreatePrecacheController();\n    const precacheRoute = new PrecacheRoute(precacheController, options);\n    registerRoute(precacheRoute);\n}\nexport { addRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [network first](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#network-first-falling-back-to-cache)\n * request strategy.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses](https://developer.chrome.com/docs/workbox/caching-resources-during-runtime/#opaque-responses).\n * Opaque responses are are cross-origin requests where the response doesn't\n * support [CORS](https://enable-cors.org/).\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */\nclass NetworkFirst extends Strategy {\n    /**\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     * @param {number} [options.networkTimeoutSeconds] If set, any network requests\n     * that fail to respond within the timeout will fallback to the cache.\n     *\n     * This option can be used to combat\n     * \"[lie-fi]{@link https://developers.google.com/web/fundamentals/performance/poor-connectivity/#lie-fi}\"\n     * scenarios.\n     */\n    constructor(options = {}) {\n        super(options);\n        // If this instance contains no plugins with a 'cacheWillUpdate' callback,\n        // prepend the `cacheOkAndOpaquePlugin` plugin to the plugins list.\n        if (!this.plugins.some((p) => 'cacheWillUpdate' in p)) {\n            this.plugins.unshift(cacheOkAndOpaquePlugin);\n        }\n        this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\n        if (process.env.NODE_ENV !== 'production') {\n            if (this._networkTimeoutSeconds) {\n                assert.isType(this._networkTimeoutSeconds, 'number', {\n                    moduleName: 'workbox-strategies',\n                    className: this.constructor.name,\n                    funcName: 'constructor',\n                    paramName: 'networkTimeoutSeconds',\n                });\n            }\n        }\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const logs = [];\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: 'handle',\n                paramName: 'makeRequest',\n            });\n        }\n        const promises = [];\n        let timeoutId;\n        if (this._networkTimeoutSeconds) {\n            const { id, promise } = this._getTimeoutPromise({ request, logs, handler });\n            timeoutId = id;\n            promises.push(promise);\n        }\n        const networkPromise = this._getNetworkPromise({\n            timeoutId,\n            request,\n            logs,\n            handler,\n        });\n        promises.push(networkPromise);\n        const response = await handler.waitUntil((async () => {\n            // Promise.race() will resolve as soon as the first promise resolves.\n            return ((await handler.waitUntil(Promise.race(promises))) ||\n                // If Promise.race() resolved with null, it might be due to a network\n                // timeout + a cache miss. If that were to happen, we'd rather wait until\n                // the networkPromise resolves instead of returning null.\n                // Note that it's fine to await an already-resolved promise, so we don't\n                // have to check to see if it's still \"in flight\".\n                (await networkPromise));\n        })());\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url });\n        }\n        return response;\n    }\n    /**\n     * @param {Object} options\n     * @param {Request} options.request\n     * @param {Array} options.logs A reference to the logs array\n     * @param {Event} options.event\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n    _getTimeoutPromise({ request, logs, handler, }) {\n        let timeoutId;\n        const timeoutPromise = new Promise((resolve) => {\n            const onNetworkTimeout = async () => {\n                if (process.env.NODE_ENV !== 'production') {\n                    logs.push(`Timing out the network response at ` +\n                        `${this._networkTimeoutSeconds} seconds.`);\n                }\n                resolve(await handler.cacheMatch(request));\n            };\n            timeoutId = setTimeout(onNetworkTimeout, this._networkTimeoutSeconds * 1000);\n        });\n        return {\n            promise: timeoutPromise,\n            id: timeoutId,\n        };\n    }\n    /**\n     * @param {Object} options\n     * @param {number|undefined} options.timeoutId\n     * @param {Request} options.request\n     * @param {Array} options.logs A reference to the logs Array.\n     * @param {Event} options.event\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n    async _getNetworkPromise({ timeoutId, request, logs, handler, }) {\n        let error;\n        let response;\n        try {\n            response = await handler.fetchAndCachePut(request);\n        }\n        catch (fetchError) {\n            if (fetchError instanceof Error) {\n                error = fetchError;\n            }\n        }\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            if (response) {\n                logs.push(`Got response from network.`);\n            }\n            else {\n                logs.push(`Unable to get a response from the network. Will respond ` +\n                    `with a cached response.`);\n            }\n        }\n        if (error || !response) {\n            response = await handler.cacheMatch(request);\n            if (process.env.NODE_ENV !== 'production') {\n                if (response) {\n                    logs.push(`Found a cached response in the '${this.cacheName}'` + ` cache.`);\n                }\n                else {\n                    logs.push(`No response found in the '${this.cacheName}' cache.`);\n                }\n            }\n        }\n        return response;\n    }\n}\nexport { NetworkFirst };\n"],"names":["self","_","e","messageGenerator","code","args","msg","length","JSON","stringify","WorkboxError","Error","constructor","errorCode","details","name","normalizeHandler","handler","handle","Route","match","method","setCatchHandler","catchHandler","RegExpRoute","regExp","url","result","exec","href","origin","location","index","slice","Router","_routes","Map","_defaultHandlerMap","routes","this","addFetchListener","addEventListener","event","request","responsePromise","handleRequest","respondWith","addCacheListener","data","type","payload","requestPromises","Promise","all","urlsToCache","map","entry","Request","waitUntil","ports","then","postMessage","URL","protocol","startsWith","sameOrigin","params","route","findMatchingRoute","has","get","err","reject","_catchHandler","catch","async","catchErr","matchResult","Array","isArray","Object","keys","undefined","setDefaultHandler","set","registerRoute","push","unregisterRoute","routeIndex","indexOf","splice","defaultRouter","getOrCreateDefaultRouter","capture","captureUrl","RegExp","moduleName","funcName","paramName","cacheOkAndOpaquePlugin","cacheWillUpdate","response","status","_cacheNameDetails","googleAnalytics","precache","prefix","runtime","suffix","registration","scope","_createCacheName","cacheName","filter","value","join","cacheNames","userCacheName","stripParams","fullURL","ignoreParams","strippedURL","param","searchParams","delete","Deferred","promise","resolve","quotaErrorCallbacks","Set","toRequest","input","StrategyHandler","strategy","options","_cacheKeys","assign","_strategy","_handlerDeferred","_extendLifetimePromises","_plugins","plugins","_pluginStateMap","plugin","mode","FetchEvent","preloadResponse","possiblePreloadResponse","originalRequest","hasCallback","clone","cb","iterateCallbacks","thrownErrorMessage","message","pluginFilteredRequest","fetchResponse","fetch","fetchOptions","callback","error","runCallbacks","responseClone","cachePut","key","cachedResponse","matchOptions","effectiveRequest","getCacheKey","multiMatchOptions","caches","ms","setTimeout","String","replace","responseToCache","_ensureResponseSafeToCache","cache","open","hasCacheUpdateCallback","oldResponse","strippedRequestURL","keysOptions","ignoreSearch","cacheKeys","cacheKey","cacheMatchIgnoreParams","put","executeQuotaErrorCallbacks","newResponse","state","statefulCallback","statefulParam","shift","destroy","pluginsUsed","Strategy","responseDone","handleAll","_getResponse","_awaitComplete","_handle","doneWaiting","waitUntilError","asyncFn","returnPromise","REVISION_SEARCH_PARAM","createCacheKey","urlObject","revision","cacheKeyURL","originalURL","PrecacheInstallReportPlugin","updatedURLs","notUpdatedURLs","handlerWillStart","cachedResponseWillBeUsed","PrecacheCacheKeyPlugin","precacheController","cacheKeyWillBeUsed","_precacheController","getCacheKeyForURL","headers","supportStatus","copyResponse","modifier","clonedResponse","responseInit","Headers","statusText","modifiedResponseInit","body","testResponse","Response","canConstructResponseFromBodyStream","blob","PrecacheStrategy","_fallbackToNetwork","fallbackToNetwork","copyRedirectedCacheableResponsesPlugin","cacheMatch","_handleInstall","_handleFetch","integrityInManifest","integrity","integrityInRequest","noIntegrityConflict","_useDefaultCacheabilityPluginIfNeeded","defaultPluginIndex","cacheWillUpdatePluginCount","entries","defaultPrecacheCacheabilityPlugin","redirected","PrecacheController","_urlsToCacheKeys","_urlsToCacheModes","_cacheKeysToIntegrities","install","bind","activate","addToCacheList","_installAndActiveListenersAdded","urlsToWarnAbout","cacheMode","firstEntry","secondEntry","warningMessage","console","warn","installReportPlugin","credentials","currentlyCachedRequests","expectedCacheKeys","values","deletedURLs","getURLsToCacheKeys","getCachedURLs","getIntegrityForCacheKey","createHandlerBoundToURL","getOrCreatePrecacheController","PrecacheRoute","urlsToCacheKeys","possibleURL","ignoreURLParametersMatching","directoryIndex","cleanURLs","urlManipulation","hash","urlWithoutIgnoredParams","some","test","removeIgnoredSearchParams","pathname","endsWith","directoryURL","cleanURL","additionalURLs","urlToAttempt","generateURLVariations","skipWaiting","addRoute","workbox_routing_registerRoute","p","unshift","_networkTimeoutSeconds","networkTimeoutSeconds","logs","promises","timeoutId","id","_getTimeoutPromise","networkPromise","_getNetworkPromise","race","fetchAndCachePut","fetchError","clearTimeout"],"mappings":"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,mCACK,oCAEd,KACS,iCACK,oCAEd,KACS,iDACK,oCAEd,KACS,wDACK,oCAEd,KACS,gDACK,oCAEd,KACS,mDACK,oCAEd,KACS,6BACK,oCAEd,KACS,4BACK,oCAEd,KACS,oCACK,oCAEd,KACS,wCACK,oCAEd,KACS,kCACK,oCAEd,KACS,+CACK,oCAEd,KACS,mDACK,oCAEd,KACS,oDACK,oCAEd,KACS,4CACK,oCAEd,KACS,0CACK,oCAEd,KACS,yCACK,oCAEd,KACS,sCACK,oCAEd,KACS,8CACK,oCAEd,KACS,qCACK,oCAEd,KACS,2CACK,oCAEd,KACS,4CACK,oCAEd,KACS,mCACK,oCAEd,KACS,iDACK,oCAEd,KACS,+CACK,oCAEd,KACS,0CACK,oCAEd,KACS,kDACK,oCAEd,KACS,mCACK,oCAEd,KACS,+CACK,oCAEd,KACS,wCACK,oCAEd,KACS,0CACK,oCAEd,KACS,mCACK,oCAEd,KACS,sCACK,oCAEd,KACS,wCACK,oCAEd,KACS,sCACK,oCAEd,KACS,qCACK,oCAEd,KACS,qCACK,oCAEd,KACS,qCACK,oCAEd,KACS,qCACK,oCAEd,KACS,mCACK,oCAEd,KACS,8BACK,oCAEd,KACS,8BACK,oCAEd,KACS,0BACK,oCAEd,KACS,kCACK,oCAEd,KACS,2DACK,oCAEd,KACS,qDACK,oCAEd,KACS,sDACK,oCAEd,KACS,6CACK,oCAEd,KACS,wCACK,oCAEd,KACS,2DACK,oCAEd,KACS,mDACK,oCAEd,KACS,mDACK,oCAEd,KACS,0DACK,oCAEd,KACS,qDACK,oCAEd,KACS,sDACK,oCAEd,KACS,wDACK,oCAEd,KACS,8BACK,oCAEd,KACS,qDACK,oCAEd,KACS,2CACK,oCAEd,KACS,wCACK,oCAEd,KACS,2CACK,oCAEd,KACS,wCACK,oCAEd,KACS,2CACK,oCAEd,KACS,yCACK,oCAEd,KACS,4CACK,oCAEd,KACS,gDACK,oCAEd,KACS,2CACK,oCAEd,KACS,+CACK,oCAEd,KACS,sCACK,oCAEd,KACS,qDACK,oCAEd,KACS,yDACK,oCAEd,KACS,oDACK,oCAEd,KACS,yDACK,oCAEd,KACS,qDACK,oCAEd,KACS,4DACK,oCAEd,KACS,yDACK,oCAEd,KACS,yDACK,oCAEd,KACS,oDACK,oCAEd,KACS,wDACK,oCAEd,KACS,2DACK,oCAEd,KACS,uDACK,oCAEd,KACS,sDACK,oCAEd,KACS,0DACK,oCAEd,KACS,8DACK,oCAEd,KACS,kDACK,oCAEd,KACS,wDACK,oCAEd,KACS,8DACK,oCAEd,KACS,uDACK,oCAEd,KACS,yDACK,oCAEd,KACS,oCACK,oCAEd,KACS,oDACK,oCAEd,KACS,4DACK,oCAEd,KACS,+CACK,oCAEd,KACS,uDACK,oCAEd,KACS,+DACK,oCAEd,KACS,0DACK,oCAEd,KACS,kEACK,oCAEd,KACS,iEACK,oCAEd,KACS,yEACK,oCAEd,KACS,4CACK,oCAEd,KACS,uDACK,oCAEd,KACS,4DACK,oCAEd,KACS,wDACK,oCAEd,KACS,wDACK,oCAEd,KACS,wEACK,oCAEd,KACS,+DACK,oCAEd,KACS,qEACK,oCAEd,KACS,mEACK,oCAEd,KACS,mDACK,oCAEd,KACS,oDACK,oCAEd,KACS,sDACK,oCAEd,KACS,yDACK,oCAEd,KACS,kDACK,oCAEd,KACS,wDACK,oCAEd,KACS,wDACK,oCAEd,KACS,6DACK,oCAEd,KACS,gDACK,oCAEd,KACS,gFACK,oCAEd,KACS,6EACK,oCAEd,KACS,gEACK,oCAEd,KACS,gEACK,oCAEd,KACS,8DACK,oCAEd,KACS,qEACK,oCAEd,KACS,qCACK,oCAEd,KACS,gDACK,oCAEd,KACS,iEACK,oCAEd,KACS,wDACK,oCAEd,KACS,4DACK,oCAEd,KACS,gDACK,oCAEd,KACS,qDACK,oCAEd,KACS,8DACK,oCAEd,KACS,kDACK,oCAEd,KACS,gDACK,oCAEd,KACS,mDACK,oCAEd,KACS,iDACK,oCAEd,KACS,6DACK,oCAEd,KACS,0DACK,oCAEd,KACS,yDACK,oCAEd,KACS,uDACK,oCAEd,KACS,uDACK,oCAEd,KACS,gEACK,oCAEd,KACS,0DACK,oCAEd,KACS,mDACK,oCAEd,KACS,oCACK,oCAEd,KACS,mDACK,oCAEd,KACS,mDACK,oCAEd,KACS,oDACK,oCAEd,KACS,+CACK,oCAEd,KACS,qDACK,oCAEd,KACS,gCACK,oCAEd,KACS,8BACK,oCAEd,KACS,6BACK,oCAEd,KACS,qCACK,oCAEd,KACS,iCACK,oCAEd,KACS,wCACK,oCAEd,KACS,iCACK,oCAEd,KACS,mCACK,oCAEd,KACS,iCACK,oCAEd,KACS,0BACK,oCAEd,KACS,gCACK,oCAEd,KACS,8BACK,oCAEd,KACS,kCACK,oCAEd,KACS,8BACK,oCAEd,KACS,0BACK,oCAEd,KACS,kCACK,oCAEd,KACS,2CACK,oCAEd,KACS,4BACK,oCAEd,KACS,kCACK,oCAEd,KACS,6BACK,oCAEd,KACS,kCACK,oCAEd,KACS,mCACK,oCAEd,KACS,mCACK,oCAEd,KACS,kCACK,oCAEd,KACS,sCACK,oCAEd,KACS,4CACK,oCAEd,KACS,4CACK,oCAEd,KACS,wCACK,oCAEd,KACS,0CACK,oCAEd,KACS,qDACK,oCAEd,KACS,2BACK,oCAEd,KACS,qCACK,oCAEd,KACS,qCACK,oCAEd,KACS,2BACK,oCAEd,KACS,0BACK,oCAEd,KACS,0BACK,oCAEd,KACS,yBACK,oCAEd,KACS,kCACK,oCAEd,KACS,kCACK,oCAEd,KACS,sCACK,oCAEd,KACS,6CACK,oCAEd,KACS,8CACK,oCAEd,KACS,6CACK,oCAEd,KACS,8CACK,oCAEd,KACS,kDACK,oCAEd,KACS,iDACK,oCAEd,KACS,4CACK,oCAEd,KACS,+CACK,oCAEd,KACS,0BACK,oCAEd,KACS,kCACK,oCAEd,KACS,gCACK,oCAEd,KACS,gCACK,oCAEd,KACS,mCACK,oCAEd,KACS,gCACK,oCAEd,KACS,4BACK,oCAEd,KACS,0BACK,oCAEd,KACS,qCACK,oCAEd,KACS,kCACK,oCAEd,KACS,8BACK,oCAEd,KACS,8BACK,oCAEd,KACS,mCACK,oCAEd,KACS,0CACK,oCAEd,KACS,8CACK,oCAEd,KACS,sCACK,oCAEd,KACS,2CACK,oCAEd,KACS,6CACK,oCAEd,KACS,6BACK,oCAEd,KACS,8BACK,oCAEd,KACS,kCACK,oCAEd,KACS,qCACK,oCAEd,KACS,wCACK,oCAEd,KACS,+BACK,oCAEd,KACS,6CACK,oCAEd,KACS,oDACK,oCAEd,KACS,2CACK,oCAEd,KACS,4CACK,oCAEd,KACS,4CACK,oCAEd,KACS,6CACK,oCAEd,KACS,gDACK,oCAEd,KACS,yCACK,oCAEd,KACS,mCACK,oCAEd,KACS,2CACK,oCAEd,KACS,8BACK,oCAEd,KACS,qCACK,oCAEd,KACS,8BACK,oCAEd,KACS,+BACK,oCAEd,KACS,gCACK,oCAEd,KACS,oCACK,oCAEd,KACS,2CACK,oCAEd,KACS,wCACK,oCAEd,KACS,8CACK,oCAEd,KACS,8DACK,oCAEd,KACS,6CACK,oCAEd,KACS,oDACK,oCAEd,KACS,6CACK,oCAEd,KACS,wDACK,oCAEd,KACS,iDACK,oCAEd,KACS,mCACK,oCAEd,KACS,8BACK,oCAEd,KACS,kCACK,oCAEd,KACS,uCACK,oCAEd,KACS,sCACK,oCAEd,KACS,qCACK,oCAEd,KACS,qCACK,oCAEd,KACS,qCACK,oCAEd,KACS,mCACK,oCAEd,KACS,6CACK,oCAEd,KACS,iCACK,oCAEd,KACS,uCACK,oCAEd,KACS,yCACK,oCAEd,KACS,6BACK,oCAEd,KACS,uBACK,oCAEd,KACS,wBACK,oCAEd,KACS,uBACK,oCAEd,KACS,sBACK,oCAEd,KACS,sBACK,oCAEd,KACS,yBACK,oCAEd,KACS,qBACK,oCAEd,KACS,sBACK,oCAEd,KACS,8BACK,sCEjvChB,SAAkB6B,SACRoF,EAAqB6D,IAE3BlM,EADsB,IAAImM,EAAc9D,EAAoBpF,GAE/D,CHHGsK,CAAStK,GCuvCbuK,EAA8B,KAAM,IGnvCpC,cAA2BzG,EAoBvBxL,YAAY0H,EAAU,UACZA,GAGD/F,KAAKsG,QAAQoJ,MAAMa,GAAM,oBAAqBA,UAC1CjK,QAAQkK,QAAQ5M,QAEpB6M,EAAyB1K,EAAQ2K,uBAAyB,UAmBrDtQ,EAAS1B,SACbiS,EAAO,GASPC,EAAW,OACbC,KACA7Q,KAAKyQ,EAAwB,OACvBK,GAAEA,EAAFvL,QAAMA,GAAYvF,KAAK+Q,EAAmB,CAAE3Q,UAASuQ,OAAMjS,YACjEmS,EAAYC,EACZF,EAAS7N,KAAKwC,SAEZyL,EAAiBhR,KAAKiR,EAAmB,CAC3CJ,YACAzQ,UACAuQ,OACAjS,YAEJkS,EAAS7N,KAAKiO,SACRlN,QAAiBpF,EAAQyC,UAAU,gBAEtBzC,EAAQyC,UAAUN,QAAQqQ,KAAKN,WAMnCI,EAR0B,QAkBpClN,QACK,IAAI3F,EAAa,cAAe,CAAEgB,IAAKiB,EAAQjB,aAElD2E,EAWXiN,GAAmB3Q,QAAEA,EAAFuQ,KAAWA,EAAXjS,QAAiBA,QAC5BmS,QAWG,CACHtL,QAXmB,IAAI1E,SAAS2E,IAQhCqL,EAAYxI,YAPajG,UAKrBoD,QAAc9G,EAAQ+N,WAAWrM,GAAjC,GAEmE,IAA9BJ,KAAKyQ,EAA9C,IAIAK,GAAID,YAaaA,UAAEA,EAAFzQ,QAAaA,EAAbuQ,KAAsBA,EAAtBjS,QAA4BA,QAC7C+I,EACA3D,MAEAA,QAAiBpF,EAAQyS,iBAAiB/Q,GAE9C,MAAOgR,GACCA,aAAsBhT,QACtBqJ,EAAQ2J,UAGZP,GACAQ,aAAaR,IAWbpJ,GAAU3D,IACVA,QAAiBpF,EAAQ+N,WAAWrM,IAUjC0D,IHglC4D"}