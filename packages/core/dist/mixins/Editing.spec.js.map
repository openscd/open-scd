{"version":3,"file":"Editing.spec.js","sourceRoot":"","sources":["../../mixins/Editing.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect, fixture, html } from '@open-wc/testing';\n\nimport {\n  Arbitrary,\n  array,\n  assert,\n  constant,\n  constantFrom,\n  dictionary,\n  oneof,\n  property,\n  record,\n  string as stringArbitrary,\n  stringOf,\n  tuple,\n  unicode,\n  webUrl,\n} from 'fast-check';\n\nimport { LitElement } from 'lit';\n\nimport { customElement } from 'lit/decorators.js';\n\nimport {\n  Edit,\n  Insert,\n  isNamespaced,\n  NamespacedAttributeValue,\n  newEditEvent,\n  newOpenEvent,\n  Remove,\n  Update,\n} from '../foundation.js';\nimport { Editing } from './Editing.js';\n\nexport namespace util {\n  export const xmlAttributeName =\n    /^(?!xml|Xml|xMl|xmL|XMl|xML|XmL|XML)[A-Za-z_][A-Za-z0-9-_.]*(:[A-Za-z_][A-Za-z0-9-_.]*)?$/;\n\n  export function descendants(parent: Element | XMLDocument): Node[] {\n    return (Array.from(parent.childNodes) as Node[]).concat(\n      ...Array.from(parent.children).map(child => descendants(child))\n    );\n  }\n\n  export const sclDocString = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<SCL version=\"2007\" revision=\"B\" xmlns=\"http://www.iec.ch/61850/2003/SCL\">\n  <Substation name=\"A1\" desc=\"test substation\"></Substation>\n</SCL>`;\n  const testDocStrings = [\n    sclDocString,\n    `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <testDoc1>\n<element1 property1=\"value1\" property2=\"value2\">SomeText</element1>\n<element2 property2=\"value2\" property3=\"value3\"><!--AComment--></element2>\n<element3 property3=\"value3\" property1=\"value1\">\n  <subelement1 property1=\"value1\" property2=\"value2\">SomeMoreText</subelement1>\n  <subelement2 property2=\"value2\" property3=\"value3\"><!----></subelement2>\n  <subelement3 property3=\"value3\" property1=\"value1\"></subelement3>\n</element3>\n</testDoc1>`,\n    `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <testDoc2>\n<element1 property1=\"value1\" property2=\"value2\">SomeText</element1>\n<element2 property2=\"value2\" property3=\"value3\"><!--AComment--></element2>\n<element3 property3=\"value3\" property1=\"value1\">\n  <subelement1 property1=\"value1\" property2=\"value2\">SomeMoreText</subelement1>\n  <subelement2 property2=\"value2\" property3=\"value3\"><!----></subelement2>\n  <subelement3 property3=\"value3\" property1=\"value1\"></subelement3>\n</element3>\n</testDoc2>`,\n  ];\n\n  export type TestDoc = { doc: XMLDocument; nodes: Node[] };\n  export const testDocs = tuple(\n    constantFrom(...testDocStrings),\n    constantFrom(...testDocStrings)\n  )\n    .map(strs =>\n      strs.map(str => new DOMParser().parseFromString(str, 'application/xml'))\n    )\n    .map(docs =>\n      docs.map(doc => ({ doc, nodes: descendants(doc).concat([doc]) }))\n    ) as Arbitrary<[TestDoc, TestDoc]>;\n\n  export function remove(nodes: Node[]): Arbitrary<Remove> {\n    const node = oneof(\n      { arbitrary: constantFrom(...nodes), weight: nodes.length },\n      testDocs.chain(docs => constantFrom(...docs.map(d => d.doc)))\n    );\n    return record({ node });\n  }\n\n  export function insert(nodes: Node[]): Arbitrary<Insert> {\n    const references = (nodes as (Node | null)[]).concat([null]);\n    const parent = constantFrom(...nodes);\n    const node = constantFrom(...nodes);\n    const reference = constantFrom(...references);\n    return record({ parent, node, reference });\n  }\n\n  const namespacedValue = record({\n    value: oneof(\n      stringOf(oneof({ arbitrary: unicode(), weight: 10 }, constant(':'))),\n      constant(null)\n    ),\n    namespaceURI: oneof({ arbitrary: webUrl(), weight: 10 }, constant(null)),\n  });\n\n  export function update(nodes: Node[]): Arbitrary<Update> {\n    const element = <Arbitrary<Element>>(\n      constantFrom(...nodes.filter(nd => nd.nodeType === Node.ELEMENT_NODE))\n    );\n    const attributes = dictionary(\n      oneof(stringArbitrary(), constant('colliding-attribute-name')),\n      oneof(stringArbitrary(), constant(null), namespacedValue)\n    );\n    return record({ element, attributes });\n  }\n\n  export function simpleEdit(\n    nodes: Node[]\n  ): Arbitrary<Insert | Update | Remove> {\n    return oneof(remove(nodes), insert(nodes), update(nodes));\n  }\n\n  export function complexEdit(nodes: Node[]): Arbitrary<Edit[]> {\n    return array(simpleEdit(nodes));\n  }\n\n  export function edit(nodes: Node[]): Arbitrary<Edit> {\n    return oneof(\n      { arbitrary: simpleEdit(nodes), weight: 2 },\n      complexEdit(nodes)\n    );\n  }\n\n  /** A series of arbitrary edits that allow us to test undo and redo */\n  export type UndoRedoTestCase = {\n    doc1: XMLDocument;\n    doc2: XMLDocument;\n    edits: Edit[];\n  };\n  export function undoRedoTestCases(\n    testDoc1: TestDoc,\n    testDoc2: TestDoc\n  ): Arbitrary<UndoRedoTestCase> {\n    const nodes = testDoc1.nodes.concat(testDoc2.nodes);\n    return record({\n      doc1: constant(testDoc1.doc),\n      doc2: constant(testDoc2.doc),\n      edits: array(edit(nodes)),\n    });\n  }\n\n  export function isParentNode(node: Node): node is ParentNode {\n    return (\n      node instanceof Element ||\n      node instanceof Document ||\n      node instanceof DocumentFragment\n    );\n  }\n\n  export function isParentOf(parent: Node, node: Node | null) {\n    return (\n      isParentNode(parent) &&\n      (node === null ||\n        Array.from(parent.childNodes).includes(node as ChildNode))\n    );\n  }\n\n  export function isValidInsert({ parent, node, reference }: Insert) {\n    return (\n      node !== reference &&\n      isParentOf(parent, reference) &&\n      !node.contains(parent) &&\n      ![Node.DOCUMENT_NODE, Node.DOCUMENT_TYPE_NODE].some(\n        nodeType => node.nodeType === nodeType\n      ) &&\n      !(\n        parent instanceof Document &&\n        (parent.documentElement || !(node instanceof Element))\n      )\n    );\n  }\n\n  @customElement('editing-element')\n  export class EditingElement extends Editing(LitElement) {}\n}\n\ndescribe('Editing Element', () => {\n  let editor: util.EditingElement;\n  let sclDoc: XMLDocument;\n\n  beforeEach(async () => {\n    editor = <util.EditingElement>(\n      await fixture(html`<editing-element></editing-element>`)\n    );\n    sclDoc = new DOMParser().parseFromString(\n      util.sclDocString,\n      'application/xml'\n    );\n  });\n\n  it('loads a document on OpenDocEvent', async () => {\n    editor.dispatchEvent(newOpenEvent(sclDoc, 'test.scd'));\n    await editor.updateComplete;\n    expect(editor.doc).to.equal(sclDoc);\n    expect(editor.docName).to.equal('test.scd');\n  });\n\n  it('inserts an element on Insert', () => {\n    const parent = sclDoc.documentElement;\n    const node = sclDoc.createElement('test');\n    const reference = sclDoc.querySelector('Substation');\n    editor.dispatchEvent(newEditEvent({ parent, node, reference }));\n    expect(sclDoc.documentElement.querySelector('test')).to.have.property(\n      'nextSibling',\n      reference\n    );\n  });\n\n  it('removes an element on Remove', () => {\n    const node = sclDoc.querySelector('Substation')!;\n    editor.dispatchEvent(newEditEvent({ node }));\n    expect(sclDoc.querySelector('Substation')).to.not.exist;\n  });\n\n  it(\"updates an element's attributes on Update\", () => {\n    const element = sclDoc.querySelector('Substation')!;\n    editor.dispatchEvent(\n      newEditEvent({\n        element,\n        attributes: {\n          name: 'A2',\n          desc: null,\n          ['__proto__']: 'a string', // covers a rare edge case branch\n          'myns:attr': {\n            value: 'namespaced value',\n            namespaceURI: 'http://example.org/myns',\n          },\n        },\n      })\n    );\n    expect(element).to.have.attribute('name', 'A2');\n    expect(element).to.not.have.attribute('desc');\n    expect(element).to.have.attribute('__proto__', 'a string');\n    expect(element).to.have.attribute('myns:attr', 'namespaced value');\n  });\n\n  it('processes complex edits in the given order', () => {\n    const parent = sclDoc.documentElement;\n    const reference = sclDoc.querySelector('Substation');\n    const node1 = sclDoc.createElement('test1');\n    const node2 = sclDoc.createElement('test2');\n    editor.dispatchEvent(\n      newEditEvent([\n        { parent, node: node1, reference },\n        { parent, node: node2, reference },\n      ])\n    );\n    expect(sclDoc.documentElement.querySelector('test1')).to.have.property(\n      'nextSibling',\n      node2\n    );\n    expect(sclDoc.documentElement.querySelector('test2')).to.have.property(\n      'nextSibling',\n      reference\n    );\n  });\n\n  it('undoes a committed edit on undo() call', () => {\n    const node = sclDoc.querySelector('Substation')!;\n    editor.dispatchEvent(newEditEvent({ node }));\n    editor.undo();\n    expect(sclDoc.querySelector('Substation')).to.exist;\n  });\n\n  it('redoes an undone edit on redo() call', () => {\n    const node = sclDoc.querySelector('Substation')!;\n    editor.dispatchEvent(newEditEvent({ node }));\n    editor.undo();\n    editor.redo();\n    expect(sclDoc.querySelector('Substation')).to.not.exist;\n  });\n\n  describe('generally', () => {\n    it('inserts elements on Insert edit events', () =>\n      assert(\n        property(\n          util.testDocs.chain(([doc1, doc2]) => {\n            const nodes = doc1.nodes.concat(doc2.nodes);\n            return util.insert(nodes);\n          }),\n          edit => {\n            editor.dispatchEvent(newEditEvent(edit));\n            if (util.isValidInsert(edit))\n              return (\n                edit.node.parentElement === edit.parent &&\n                edit.node.nextSibling === edit.reference\n              );\n            return true;\n          }\n        )\n      ));\n\n    it('updates default namespace attributes on Update edit events', () =>\n      assert(\n        property(\n          util.testDocs.chain(([{ nodes }]) => util.update(nodes)),\n          edit => {\n            editor.dispatchEvent(newEditEvent(edit));\n            return Object.entries(edit.attributes)\n              .filter(\n                ([name, value]) =>\n                  util.xmlAttributeName.test(name) && !isNamespaced(value!)\n              )\n              .every(\n                ([name, value]) => edit.element.getAttribute(name) === value\n              );\n          }\n        )\n      ));\n\n    it('updates namespaced attributes on Update edit events', () =>\n      assert(\n        property(\n          util.testDocs.chain(([{ nodes }]) => util.update(nodes)),\n          edit => {\n            editor.dispatchEvent(newEditEvent(edit));\n            return Object.entries(edit.attributes)\n              .filter(\n                ([name, value]) =>\n                  util.xmlAttributeName.test(name) &&\n                  isNamespaced(value!) &&\n                  value.namespaceURI\n              )\n              .map(entry => entry as [string, NamespacedAttributeValue])\n              .every(\n                ([name, { value, namespaceURI }]) =>\n                  edit.element.getAttributeNS(\n                    <string>namespaceURI,\n                    name.includes(':') ? <string>name.split(':', 2)[1] : name\n                  ) === value\n              );\n          }\n        )\n      ));\n\n    it('removes elements on Remove edit events', () =>\n      assert(\n        property(\n          util.testDocs.chain(([{ nodes }]) => util.remove(nodes)),\n          ({ node }) => {\n            editor.dispatchEvent(newEditEvent({ node }));\n            return !node.parentNode;\n          }\n        )\n      ));\n\n    it('undoes up to n edits on undo(n) call', () =>\n      assert(\n        property(\n          util.testDocs.chain(docs => util.undoRedoTestCases(...docs)),\n          ({ doc1, doc2, edits }: util.UndoRedoTestCase) => {\n            const [oldDoc1, oldDoc2] = [doc1, doc2].map(doc =>\n              doc.cloneNode(true)\n            );\n            edits.forEach((a: Edit) => {\n              editor.dispatchEvent(newEditEvent(a));\n            });\n            if (edits.length) editor.undo(edits.length);\n            expect(doc1).to.satisfy((doc: XMLDocument) =>\n              doc.isEqualNode(oldDoc1)\n            );\n            expect(doc2).to.satisfy((doc: XMLDocument) =>\n              doc.isEqualNode(oldDoc2)\n            );\n            return true;\n          }\n        )\n      ));\n\n    it('redoes up to n edits on redo(n) call', () =>\n      assert(\n        property(\n          util.testDocs.chain(docs => util.undoRedoTestCases(...docs)),\n          ({ doc1, doc2, edits }: util.UndoRedoTestCase) => {\n            edits.forEach((a: Edit) => {\n              editor.dispatchEvent(newEditEvent(a));\n            });\n            const [oldDoc1, oldDoc2] = [doc1, doc2].map(doc =>\n              new XMLSerializer().serializeToString(doc)\n            );\n            if (edits.length) {\n              editor.undo(edits.length + 1);\n              editor.redo(edits.length + 1);\n            }\n            const [newDoc1, newDoc2] = [doc1, doc2].map(doc =>\n              new XMLSerializer().serializeToString(doc)\n            );\n            return oldDoc1 === newDoc1 && oldDoc2 === newDoc2;\n          }\n        )\n      ));\n  });\n});\n"]}