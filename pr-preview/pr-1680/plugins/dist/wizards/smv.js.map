{"version":3,"file":"smv.js","sourceRoot":"","sources":["../../src/wizards/smv.ts"],"names":[],"mappings":"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","sourcesContent":["import { get } from 'lit-translate';\n\nimport { Checkbox } from '@material/mwc-checkbox';\n\nimport {\n  getValue,\n  identity,\n  Wizard,\n  WizardAction,\n  WizardActor,\n  WizardInputElement,\n} from '@openscd/open-scd/src/foundation.js';\nimport { ComplexAction, EditorAction, Move } from '@openscd/core/foundation/deprecated/editor.js';\nimport { contentGseOrSmvWizard, updateAddress } from './address.js';\nimport { html } from 'lit-element';\nimport { getAllConnectedAPsOfSameIED, getCurrentConnectedAP } from '../editors/communication/helpers.js';\n\nexport function updateSmvAction(element: Element): WizardActor {\n  return (inputs: WizardInputElement[], wizard: Element): WizardAction[] => {\n    const complexAction: ComplexAction = {\n      actions: [],\n      title: get('smv.action.addaddress', {\n        identity: identity(element),\n      }),\n    };\n\n    const instType: boolean = (<Checkbox>(\n      wizard.shadowRoot?.querySelector('#instType')\n    ))?.checked;\n\n    const addressContent: Record<string, string | null> = {};\n    addressContent['MAC-Address'] = getValue(\n      inputs.find(i => i.label === 'MAC-Address')!\n    );\n    addressContent['APPID'] = getValue(inputs.find(i => i.label === 'APPID')!);\n    addressContent['VLAN-ID'] = getValue(\n      inputs.find(i => i.label === 'VLAN-ID')!\n    );\n    addressContent['VLAN-PRIORITY'] = getValue(\n      inputs.find(i => i.label === 'VLAN-PRIORITY')!\n    );\n\n    const addressActions = updateAddress(element, addressContent, instType);\n    if (!addressActions.length) return [];\n\n    addressActions.forEach(action => {\n      complexAction.actions.push(action);\n    });\n\n    return [complexAction];\n  };\n}\n\nexport function editSMvWizard(element: Element): Wizard {\n  const hasInstType = Array.from(element.querySelectorAll('Address > P')).some(\n    pType => pType.getAttribute('xsi:type')\n  );\n\n  const attributes: Record<string, string | null> = {};\n\n  ['MAC-Address', 'APPID', 'VLAN-ID', 'VLAN-PRIORITY'].forEach(key => {\n    if (!attributes[key])\n      attributes[key] =\n        element.querySelector(`Address > P[type=\"${key}\"]`)?.innerHTML.trim() ??\n        null;\n  });\n  return [\n    {\n      title: get('wizard.title.edit', { tagName: element.tagName }),\n      element,\n      primary: {\n        label: get('save'),\n        icon: 'edit',\n        action: updateSmvAction(element),\n      },\n      content: [...contentGseOrSmvWizard({ hasInstType, attributes })],\n    },\n  ];\n}\n\nlet newlySelectedAP : null | Element = null;\n\nfunction setNewlySelectedAP(connectedAP: Element): void {\n\n  newlySelectedAP = connectedAP;\n}\n\nfunction moveSVMAction(element: Element): WizardActor {\n  \n  return (): EditorAction[] => {\n    const moveAction: Move = {\n      old:{\n        parent: element.parentElement!,\n        element,\n        reference: null,\n      },\n      new:{\n        parent: newlySelectedAP!,\n      }\n    }\n\n\n    return[\n      {\n        actions: [moveAction], \n        title: \"Move SVM to another ConnectedAP\",\n      }\n    ]\n  } \n}\n\n\nexport function moveSMVWizard(element: Element, doc: XMLDocument): Wizard {\n\n  const currentConnectedAP = getCurrentConnectedAP(element);\n  const iedName = currentConnectedAP?.getAttribute('iedName');\n\n  const allConnectedAPsOfSameIED = getAllConnectedAPsOfSameIED(element, doc);\n\n  \n\n  return [\n    {\n      title: get('wizard.title.selectAp'),\n      element,\n      primary: {\n        label: get('save'),\n        icon: 'save',\n        action: moveSVMAction(element),\n      },\n      content: [\n        html`\n         ${allConnectedAPsOfSameIED.map(connectedAP => \n          html`\n            <mwc-button\n              label=\"${iedName} > ${connectedAP.getAttribute('apName')}\"\n              @click=${() => setNewlySelectedAP(connectedAP)}\n              raised\n              ?disabled=${connectedAP === currentConnectedAP}\n              >\n              </mwc-button>\n          `)}\n        `\n      ],\n    },\n  ];\n}"]}