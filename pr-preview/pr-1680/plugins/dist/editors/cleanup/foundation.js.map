{"version":3,"file":"foundation.js","sourceRoot":"","sources":["../../../src/editors/cleanup/foundation.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AAEb,OAAO,EAAE,QAAQ,EAAE,MAAM,qCAAqC,CAAC;AAG/D;;;;GAIG;AACH,MAAM,UAAU,aAAa,CAAC,UAAqB;IACjD,MAAM,OAAO,GAAa,EAAE,CAAC;IAC7B,IAAI,UAAU,EAAE;QACd,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACxB,OAAO,CAAC,IAAI,CAAC;gBACX,GAAG,EAAE;oBACH,MAAM,EAAW,IAAI,CAAC,aAAc;oBACpC,OAAO,EAAE,IAAI;oBACb,SAAS,EAAe,IAAK,CAAC,WAAW;iBAC1C;aACF,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;KACJ;IACD,OAAO,OAAO,CAAC;AACjB,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,OAAO,CAAC,GAAa;IACnC,OAAO,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,GAAG,EAAE,CAAC,CAAC;AAC9E,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,YAAY,CAAC,QAAmB;IAC9C,OAAO,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAU,EAAE,CAAU,EAAE,EAAE;QAC9C,yFAAyF;QACzF,MAAM,GAAG,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;QACxB,MAAM,GAAG,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;QACxB,IAAI,GAAG,GAAG,GAAG,EAAE;YACb,OAAO,CAAC,CAAC,CAAC;SACX;QACD,IAAI,GAAG,GAAG,GAAG,EAAE;YACb,OAAO,CAAC,CAAC;SACV;QACD,sBAAsB;QACtB,OAAO,CAAC,CAAC;IACX,CAAC,CAAC,CAAC;AACL,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,IAAI,CAAC,GAAc;IACjC,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;AAClC,CAAC","sourcesContent":["'use strict';\n\nimport { identity } from '@openscd/open-scd/src/foundation.js';\nimport { Delete } from '@openscd/core/foundation/deprecated/editor.js';\n\n/**\n * Clean SCL items as requested by removing SCL elements specified from the SCL file\n * @param cleanItems - SCL elements to be removed from the SCL file\n * @returns an actions array to support undo/redo\n */\nexport function cleanSCLItems(cleanItems: Element[]): Delete[] {\n  const actions: Delete[] = [];\n  if (cleanItems) {\n    cleanItems.forEach(item => {\n      actions.push({\n        old: {\n          parent: <Element>item.parentElement!,\n          element: item,\n          reference: <Node | null>item!.nextSibling,\n        },\n      });\n    });\n  }\n  return actions;\n}\n\n/**\n * Provide frequency count of elements.\n * @param arr - An array of elements\n * @returns a Map of element strings and frequencies\n */\nexport function countBy(arr: string[]): Map<string, number> {\n  return arr.reduce((acc, e) => acc.set(e, (acc.get(e) || 0) + 1), new Map());\n}\n\n/**\n * Sort a list of Elements by their identity string.\n * @param elements - an array of Elements.\n * @returns a sorted list of elements.\n */\nexport function identitySort(elements: Element[]): Element[] {\n  return elements.sort((a: Element, b: Element) => {\n    // sorting using the identity ensures sort order includes IED and other useful properties\n    const aId = identity(a);\n    const bId = identity(b);\n    if (aId < bId) {\n      return -1;\n    }\n    if (aId > bId) {\n      return 1;\n    }\n    // names must be equal\n    return 0;\n  });\n}\n\n/**\n * Return a de-duplicate set of array elements.\n * @param arr - an array of items with duplicates.\n * @returns an array of items without duplicates.\n */\nexport function uniq(arr: unknown[]): unknown[] {\n  return Array.from(new Set(arr));\n}\n"]}