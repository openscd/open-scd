{"version":3,"file":"da-container.js","sourceRoot":"","sources":["../../../src/editors/ied/da-container.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  css,\n  customElement,\n  html,\n  property,\n  query,\n  TemplateResult,\n} from 'lit-element';\nimport { nothing } from 'lit-html';\nimport { get } from 'lit-translate';\n\nimport '@material/mwc-icon-button-toggle';\nimport { IconButtonToggle } from '@material/mwc-icon-button-toggle';\n\nimport '@openscd/open-scd/src/action-pane.js';\nimport {\n  getNameAttribute,\n  newWizardEvent,\n} from '@openscd/open-scd/src/foundation.js';\nimport { wizards } from '../../wizards/wizard-library.js';\nimport {\n  DaiFieldTypes,\n  getCustomField,\n} from '../../wizards/foundation/dai-field-type.js';\nimport { createDaInfoWizard } from './da-wizard.js';\nimport {\n  Container,\n  getInstanceDAElement,\n  getValueElements,\n} from './foundation.js';\nimport { createDAIWizard } from '../../wizards/dai.js';\nimport {\n  determineUninitializedStructure,\n  initializeElements,\n} from '@openscd/open-scd/src/foundation/dai.js';\n\n/** [[`IED`]] plugin subeditor for editing `(B)DA` element. */\n@customElement('da-container')\nexport class DAContainer extends Container {\n  /**\n   * The optional DAI of this (B)DA.\n   */\n  @property({ attribute: false })\n  instanceElement!: Element;\n\n  @query('#toggleButton')\n  toggleButton: IconButtonToggle | undefined;\n\n  private header(): TemplateResult {\n    const name = getNameAttribute(this.element);\n    const bType = this.element.getAttribute('bType') ?? nothing;\n    const fc = this.element.getAttribute('fc');\n\n    if (this.instanceElement) {\n      return html`<b>${name}</b> &mdash; ${bType}${fc ? html` [${fc}]` : ``}`;\n    } else {\n      return html`${name} &mdash; ${bType}${fc ? html` [${fc}]` : ``}`;\n    }\n  }\n\n  /**\n   * Get the nested (B)DA element(s) if available.\n   * @returns The nested (B)DA element(s) of this (B)DA container.\n   */\n  private getBDAElements(): Element[] {\n    const type = this.element!.getAttribute('type') ?? undefined;\n    const doType = this.element!.closest('SCL')!.querySelector(\n      `:root > DataTypeTemplates > DAType[id=\"${type}\"]`\n    );\n    if (doType != null) {\n      return Array.from(doType!.querySelectorAll(':scope > BDA'));\n    }\n    return [];\n  }\n\n  /**\n   * Use the list of ancestor to retrieve the list from DO to the current (B)DA Element.\n   * This structure is used to create the initialized structure from (DOI/SDI/DAI).\n   *\n   * @returns The list from the DO Element to the current (B)DA Element.\n   */\n  private getTemplateStructure(): Element[] {\n    // Search for the DO Element, this will be the starting point.\n    const doElement = this.ancestors.filter(\n      element => element.tagName == 'DO'\n    )[0];\n    // From the DO Element and below we need all the elements (BDA, SDO, DA)\n    const dataStructure = this.ancestors.slice(\n      this.ancestors.indexOf(doElement)\n    );\n    // Add the current DA Element also to the list.\n    dataStructure.push(this.element);\n    return dataStructure;\n  }\n\n  private openCreateWizard(): void {\n    // Search the LN(0) Element to start creating the initialized structure.\n    const lnElement = this.ancestors.filter(element =>\n      ['LN0', 'LN'].includes(element.tagName)\n    )[0];\n    const templateStructure = this.getTemplateStructure();\n    // First determine where to start creating new elements (DOI/SDI/DAI)\n    const [parentElement, uninitializedTemplateStructure] =\n      determineUninitializedStructure(lnElement, templateStructure);\n    // Next create all missing elements (DOI/SDI/DAI)\n    const newElement = initializeElements(uninitializedTemplateStructure);\n\n    if (newElement) {\n      const wizard = createDAIWizard(parentElement, newElement, this.element);\n      if (wizard) this.dispatchEvent(newWizardEvent(wizard));\n    }\n  }\n\n  private openEditWizard(val: Element): void {\n    const wizard = wizards['DAI'].edit(this.element, val);\n    if (wizard) this.dispatchEvent(newWizardEvent(wizard));\n  }\n\n  private getValueDisplayString(val: Element): string {\n    const sGroup = val.getAttribute('sGroup');\n    const prefix = sGroup ? `SG${sGroup}: ` : '';\n    const value = val.textContent?.trim();\n\n    return `${prefix}${value}`;\n  }\n\n  private renderVal(): TemplateResult[] {\n    const bType = this.element!.getAttribute('bType');\n    const element = this.instanceElement ?? this.element;\n    const hasInstantiatedVal = !!this.instanceElement?.querySelector('Val');\n\n    return hasInstantiatedVal\n      ? getValueElements(element).map(\n          val => html`<div style=\"display: flex; flex-direction: row;\">\n            <div style=\"display: flex; align-items: center; flex: auto;\">\n              <h4>${this.getValueDisplayString(val)}</h4>\n            </div>\n            <div style=\"display: flex; align-items: center;\">\n              <mwc-icon-button\n                icon=\"edit\"\n                .disabled=\"${!getCustomField()[<DaiFieldTypes>bType]}\"\n                @click=${() => this.openEditWizard(val)}\n              >\n              </mwc-icon-button>\n            </div>\n          </div>`\n        )\n      : [\n          html`<div style=\"display: flex; flex-direction: row;\">\n            <div style=\"display: flex; align-items: center; flex: auto;\">\n              <h4></h4>\n            </div>\n            <div style=\"display: flex; align-items: center;\">\n              <mwc-icon-button\n                icon=\"add\"\n                .disabled=\"${!getCustomField()[<DaiFieldTypes>bType]}\"\n                @click=${() => this.openCreateWizard()}\n              >\n              </mwc-icon-button>\n            </div>\n          </div>`,\n        ];\n  }\n\n  render(): TemplateResult {\n    const bType = this.element!.getAttribute('bType');\n\n    return html`\n      <action-pane\n        .label=\"${this.header()}\"\n        icon=\"${this.instanceElement != null ? 'done' : ''}\"\n      >\n        <abbr slot=\"action\">\n          <mwc-icon-button\n            title=${this.nsdoc.getDataDescription(this.element, this.ancestors)\n              .label}\n            icon=\"info\"\n            @click=${() =>\n              this.dispatchEvent(\n                newWizardEvent(\n                  createDaInfoWizard(\n                    this.element,\n                    this.instanceElement,\n                    this.ancestors,\n                    this.nsdoc\n                  )\n                )\n              )}\n          ></mwc-icon-button>\n        </abbr>\n        ${bType === 'Struct'\n          ? html` <abbr\n              slot=\"action\"\n              title=\"${get('iededitor.toggleChildElements')}\"\n            >\n              <mwc-icon-button-toggle\n                id=\"toggleButton\"\n                onIcon=\"keyboard_arrow_up\"\n                offIcon=\"keyboard_arrow_down\"\n                @click=${() => this.requestUpdate()}\n              >\n              </mwc-icon-button-toggle>\n            </abbr>`\n          : html`${this.renderVal()}`}\n        ${this.toggleButton?.on && bType === 'Struct'\n          ? this.getBDAElements().map(\n              bdaElement =>\n                html`<da-container\n                  .editCount=${this.editCount}\n                  .doc=${this.doc}\n                  .element=${bdaElement}\n                  .instanceElement=${getInstanceDAElement(\n                    this.instanceElement,\n                    bdaElement\n                  )}\n                  .nsdoc=${this.nsdoc}\n                  .ancestors=${[...this.ancestors, this.element]}\n                >\n                </da-container>`\n            )\n          : nothing}\n      </action-pane>\n    `;\n  }\n\n  static styles = css`\n    h4 {\n      color: var(--mdc-theme-on-surface);\n      font-family: 'Roboto', sans-serif;\n      font-weight: 300;\n      margin: 0px;\n      padding-left: 0.3em;\n      word-break: break-word;\n      white-space: pre-wrap;\n    }\n\n    mwc-icon-button {\n      color: var(--mdc-theme-on-surface);\n    }\n  `;\n}\n"]}