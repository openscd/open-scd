{"version":3,"file":"selectDo.js","sourceRoot":"","sources":["../../../../src/editors/protocol104/wizards/selectDo.ts"],"names":[],"mappings":"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","sourcesContent":["import { html, TemplateResult } from 'lit-element';\nimport { get } from 'lit-translate';\n\nimport '@openscd/open-scd/src/finder-list.js';\n\nimport {\n  getDisplayString,\n  getReader,\n} from '../../../wizards/foundation/finder.js';\nimport { FinderList, Path } from '@openscd/open-scd/src/finder-list.js';\nimport {\n  compareNames,\n  getNameAttribute,\n  identity,\n  newSubWizardEvent,\n  find,\n  Wizard,\n  WizardActor,\n  WizardInputElement,\n} from '@openscd/open-scd/src/foundation.js';\nimport { createAddressesWizard } from './createAddresses.js';\nimport { SupportedCdcType, supportedCdcTypes } from '../foundation/cdc.js';\nimport { PROTOCOL_104_PRIVATE } from '../foundation/private.js';\nimport {\n  getCdcValueFromDOElement,\n  getDoElements,\n} from '../foundation/foundation.js';\n\n/**\n * Check if the passed DO Element is supported by the 104 protocol and isn't initiated.\n *\n * @param lnElement - The LN Element used to search for Address Element below DOI, if available.\n * @param doElement - The DO Element to check.\n */\nfunction filterAvailableDOElements(\n  lnElement: Element,\n  doElement: Element\n): boolean {\n  // First check if this DO Element is supported by the 104 Protocol.\n  const cdc = getCdcValueFromDOElement(doElement) ?? '';\n  if (!supportedCdcTypes.includes(<SupportedCdcType>cdc)) {\n    return false;\n  }\n\n  // Use the parent (LN) to find the DOI that's linked to the DO Element\n  // And check if there is DOI if it doesn't already contain Address Elements for the 104 Protocol.\n  const doName = getNameAttribute(doElement);\n  return (\n    lnElement.querySelectorAll(\n      `:scope > DOI[name=\"${doName}\"] DAI > Private[type=\"${PROTOCOL_104_PRIVATE}\"] > Address`\n    ).length <= 0\n  );\n}\n\n/**\n * Check if there are DO Elements that aren't initiated and are supported by the 104 protocol. If this is the\n * case the Element can be shown in the Finder.\n *\n * @param child  - The child to check if it should still be displayed in the finder list.\n */\nfunction filterAvailableElements(child: Element): boolean {\n  // For other elements create a list of LN Elements for processing the DO Element from the LN Elements.\n  let lnElements: Element[];\n  if (['LN0', 'LN'].includes(child.tagName)) {\n    lnElements = [child];\n  } else {\n    // For the other Elements we will just retrieve all the DOI Elements.\n    lnElements = Array.from(child.querySelectorAll('LN0, LN'));\n  }\n\n  // If after filtering there are still LN/DO Element(s) to be displayed, this element will be included.\n  return (\n    lnElements.filter(\n      lnElement =>\n        // Check if there are available DO Elements that aren't initiated and supported by 104 protocol\n        getDoElements(lnElement).filter(doElement =>\n          filterAvailableDOElements(lnElement, doElement)\n        ).length > 0\n    ).length > 0\n  );\n}\n\n/**\n * Retrieve the Data Children needed for the filter-list to display, the elements shown are\n * 'IED' -&gt; 'AccessPoint' -&gt; 'LDevice' -&gt; 'LN(0)' -&gt; 'DO'.\n *\n * @param parent - The previous element selected, starting with SCL Element.\n */\nexport function getDataChildren(parent: Element): Element[] {\n  let children;\n  if (['LN0', 'LN'].includes(parent.tagName)) {\n    // For LN Element we will not search for the children, but the DO Element linked to LN from the Template Section.\n    const lnType = parent.getAttribute('lnType') ?? '';\n    children = Array.from(\n      parent.ownerDocument.querySelectorAll(\n        `:root > DataTypeTemplates > LNodeType[id=\"${lnType}\"] > DO`\n      )\n    )\n      .filter(child => filterAvailableDOElements(parent, child))\n      .sort((a, b) => compareNames(`${identity(a)}`, `${identity(b)}`));\n  } else if (parent.tagName === 'AccessPoint') {\n    // From the Access Point we will skip directly to the LDevice Element and skip the Server element.\n    // Or retrieve the LN Elements directly below the AccessPoint.\n    children = Array.from(parent.querySelectorAll('LDevice, :scope > LN'))\n      .filter(child => filterAvailableElements(child))\n      .sort((a, b) => compareNames(`${identity(a)}`, `${identity(b)}`));\n  } else {\n    // The other element, just retrieve the children and if the tagName is one we need return that child.\n    children = Array.from(parent.children)\n      .filter(child =>\n        ['IED', 'AccessPoint', 'LN0', 'LN'].includes(child.tagName)\n      )\n      .filter(child => filterAvailableElements(child))\n      .sort((a, b) => compareNames(`${identity(a)}`, `${identity(b)}`));\n  }\n\n  return children;\n}\n\n/**\n * Action executed when 'next' is pressed. It will start the 'create address'-wizard when a DO Element\n * is selected, otherwise nothing happens.\n *\n * @param doc - The XML Document loaded to search element in.\n */\nfunction openPrepareAddressWizard(doc: XMLDocument): WizardActor {\n  return (_: WizardInputElement[], wizard: Element) => {\n    const finder = wizard.shadowRoot?.querySelector<FinderList>('finder-list');\n    const path = finder?.path ?? [];\n\n    if (path.length === 0) return [];\n\n    const doElement = checkAndGetLastElementFromPath(doc, path, ['DO']);\n    const lnElement = checkAndGetLastElementFromPath(doc, path, ['LN0', 'LN']);\n\n    if (lnElement && doElement) {\n      wizard.dispatchEvent(\n        newSubWizardEvent(createAddressesWizard(lnElement, doElement))\n      );\n    }\n    return [];\n  };\n}\n\n/**\n * Simple function to retrieve the next element from the path selected.\n * Also check if that element is the expected element.\n *\n * @param doc         - The XML Document to be used for querying.\n * @param path        - The array of selected element to pop the last element name from.\n * @param expectedTag - The tagname expected to be found when popping the lats element.\n */\nfunction checkAndGetLastElementFromPath(\n  doc: XMLDocument,\n  path: Path,\n  expectedTag: string[]\n): Element | null {\n  const [tagName, id] = path.pop()!.split(': ');\n  if (!expectedTag.includes(tagName)) return null;\n\n  return find(doc, tagName, id);\n}\n\n/**\n * Start a Finder List to select a DO that can be initiated to be used for the 104 protocol.\n *\n * @param doc - The XML Document loaded.\n * @returns The Wizard to be displayed in a dialog.\n */\nexport function selectDoWizard(doc: Document): Wizard {\n  function renderTemplate(doc: XMLDocument): TemplateResult {\n    return html` <finder-list\n      path=\"${JSON.stringify(['SCL: '])}\"\n      .read=${getReader(doc, getDataChildren)}\n      .getDisplayString=${getDisplayString}\n      .getTitle=${(path: string[]) => path[path.length - 1]}\n    >\n    </finder-list>`;\n  }\n\n  return [\n    {\n      title: get('wizard.title.select', { tagName: 'DO(I)' }),\n      primary: {\n        icon: '',\n        label: get('next'),\n        action: openPrepareAddressWizard(doc),\n      },\n      content: [renderTemplate(doc)],\n    },\n  ];\n}\n"]}