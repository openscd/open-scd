{"version":3,"file":"compare.js","sourceRoot":"","sources":["../../src/foundation/compare.ts"],"names":[],"mappings":"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","sourcesContent":["import { html, TemplateResult } from 'lit-element';\nimport { repeat } from 'lit-html/directives/repeat';\nimport { get } from 'lit-translate';\n\nimport '@material/mwc-list';\nimport '@material/mwc-list/mwc-list-item';\nimport '@material/mwc-icon';\n\nimport { identity } from '../foundation.js';\nimport { SVGTemplateResult } from 'lit-html';\n\nimport { attributeIcon, contentIcon, elementIcon } from '../icons/compare.js';\n\nconst diffTypeToIcon: Map<DiffType, SVGTemplateResult> = new Map<\n  DiffType,\n  SVGTemplateResult\n>();\n\ndiffTypeToIcon.set('Attribute', attributeIcon);\ndiffTypeToIcon.set('Content', contentIcon);\ndiffTypeToIcon.set('Element', elementIcon);\n\nexport type DiffType = 'Element' | 'Attribute' | 'Content';\n\nexport type Diff<T> =\n  | { type: DiffType; oldValue: T; newValue: null }\n  | { type: DiffType; oldValue: null; newValue: T }\n  | { type: DiffType; oldValue: T; newValue: T };\n\n/**\n * Type to filter out a difference based on `tagName`.`attributeName`\n *\n * The matcher can be a boolean or a `consumer` that returns a boolean\n */\nexport interface DiffFilter<T> {\n  [selector: string]: DiffFilterSelector<T>;\n}\n\ninterface DiffFilterSelector<T> {\n  full?: DiffFilterConsumer<T>;\n  attributes?: {\n    [name: string]: DiffFilterConsumer<T>;\n  };\n}\n\n/**\n * Consumer to match if a diff should be filtered out.\n */\ntype DiffFilterConsumer<T> = boolean | ((value: T | null) => boolean);\n\nfunction getDiffFilterSelector(\n  elementToBeCompared: Element,\n  rootElementToBeCompared: Element,\n  filters: DiffFilter<Element>\n): DiffFilterSelector<Element> | undefined {\n  const querySelector: string | undefined =\n    rootElementToBeCompared === elementToBeCompared\n      ? ':scope'\n      : Object.keys(filters).find(selector =>\n          Array.from(\n            rootElementToBeCompared.querySelectorAll(selector)\n          ).includes(elementToBeCompared)\n        );\n\n  return querySelector ? filters[querySelector!] : undefined;\n}\n\nfunction shouldFilterElement(\n  element: Element,\n  filter: DiffFilterSelector<Element> | undefined\n): boolean {\n  if (!filter || !filter.full) {\n    return false;\n  }\n  const consumer: DiffFilterConsumer<Element> = filter!.full!;\n\n  return typeof consumer === 'boolean' ? consumer : consumer(element);\n}\n\nfunction shouldFilterAttribute(\n  element: Element,\n  attribute: string,\n  filter: DiffFilterSelector<Element> | undefined\n): boolean {\n  if (!filter || !filter.attributes || !filter.attributes![attribute]) {\n    return false;\n  }\n  const consumer: DiffFilterConsumer<Element> = filter!.attributes![attribute];\n\n  return typeof consumer === 'boolean' ? consumer : consumer(element);\n}\n\n/**\n * Returns the description of the Element that differs.\n *\n * @param element - The Element to retrieve the identifier from.\n */\nfunction describe(element: Element): string {\n  const id = identity(element);\n  return typeof id === 'string' ? id : get('unidentifiable');\n}\n\n/**\n * Check if there are any attribute values changed between the two elements.\n *\n * @param elementToBeCompared     - The element to check for differences.\n * @param elementToCompareAgainst - The element used to check against.\n */\nexport function diffSclAttributes(\n  elementToBeCompared: Element,\n  elementToCompareAgainst: Element,\n  filterToIgnore: DiffFilter<Element>,\n  searchElementToBeCompared: Element\n): [string, Diff<string>][] {\n  const attrDiffs: [string, Diff<string>][] = [];\n\n  // First check if there is any text inside the element and there should be no child elements.\n  const newText = elementToBeCompared.textContent?.trim() ?? '';\n  const oldText = elementToCompareAgainst.textContent?.trim() ?? '';\n  if (\n    elementToBeCompared.childElementCount === 0 &&\n    elementToCompareAgainst.childElementCount === 0 &&\n    newText !== oldText\n  ) {\n    const shouldFilter: boolean = shouldFilterElement(\n      elementToBeCompared,\n      getDiffFilterSelector(\n        elementToBeCompared,\n        searchElementToBeCompared,\n        filterToIgnore\n      )\n    );\n\n    if (!shouldFilter) {\n      attrDiffs.push([\n        'value',\n        { type: 'Content', newValue: newText, oldValue: oldText },\n      ]);\n    }\n  }\n\n  // Next check if there are any difference between attributes.\n  const attributeNames = new Set(\n    elementToCompareAgainst\n      .getAttributeNames()\n      .concat(elementToBeCompared.getAttributeNames())\n  );\n  for (const name of attributeNames) {\n    const shouldFilter: boolean = shouldFilterAttribute(\n      elementToBeCompared,\n      name,\n      getDiffFilterSelector(\n        elementToBeCompared,\n        searchElementToBeCompared,\n        filterToIgnore\n      )\n    );\n    if (\n      !shouldFilter &&\n      elementToCompareAgainst.getAttribute(name) !==\n        elementToBeCompared.getAttribute(name)\n    ) {\n      attrDiffs.push([\n        name,\n        <Diff<string>>{\n          type: 'Attribute',\n          newValue: elementToBeCompared.getAttribute(name),\n          oldValue: elementToCompareAgainst.getAttribute(name),\n        },\n      ]);\n    }\n  }\n  return attrDiffs;\n}\n\n/**\n * Function to retrieve the identity to compare 2 children on the same level.\n * This means we only need to last part of the Identity string to compare the children.\n *\n * @param element - The element to retrieve the identity from.\n */\nexport function identityForCompare(element: Element): string | number {\n  let identityOfElement = identity(element);\n  if (typeof identityOfElement === 'string') {\n    identityOfElement = identityOfElement.split('>').pop() ?? '';\n  }\n  return identityOfElement;\n}\n\n/**\n * Custom method for comparing to check if 2 elements are the same. Because they are on the same level\n * we don't need to compare the full identity, we just compare the part of the Element itself.\n *\n * <b>Remark</b>Private elements are already filtered out, so we don't need to bother them.\n *\n * @param newValue - The new element to compare with the old element.\n * @param oldValue - The old element to which the new element is compared.\n */\nexport function isSame(newValue: Element, oldValue: Element): boolean {\n  return (\n    newValue.tagName === oldValue.tagName &&\n    identityForCompare(newValue) === identityForCompare(oldValue)\n  );\n}\n\n/**\n * List of all differences between children elements that both old and new element have.\n * The list contains children both elements have and children that were added or removed\n * from the new element.\n * <b>Remark</b>: Private elements are ignored.\n *\n * @param elementToBeCompared     - The element to check for differences.\n * @param elementToCompareAgainst - The element used to check against.\n */\nexport function diffSclChilds(\n  elementToBeCompared: Element,\n  elementToCompareAgainst: Element,\n  filterToIgnore: DiffFilter<Element>,\n  searchElementToBeCompared: Element,\n  searchElementToCompareAgainst: Element\n): Diff<Element>[] {\n  const childDiffs: Diff<Element>[] = [];\n  const childrenToBeCompared = Array.from(elementToBeCompared.children);\n  const childrenToCompareTo = Array.from(elementToCompareAgainst.children);\n\n  childrenToBeCompared.forEach(newElement => {\n    if (!newElement.closest('Private')) {\n      const shouldFilter: boolean = shouldFilterElement(\n        newElement,\n        getDiffFilterSelector(\n          newElement,\n          searchElementToBeCompared,\n          filterToIgnore\n        )\n      );\n      if (!shouldFilter) {\n        const twinIndex = childrenToCompareTo.findIndex(ourChild =>\n          isSame(newElement, ourChild)\n        );\n        const oldElement =\n          twinIndex > -1 ? childrenToCompareTo[twinIndex] : null;\n\n        if (oldElement) {\n          childrenToCompareTo.splice(twinIndex, 1);\n          childDiffs.push({\n            type: 'Element',\n            newValue: newElement,\n            oldValue: oldElement,\n          });\n        } else {\n          childDiffs.push({\n            type: 'Element',\n            newValue: newElement,\n            oldValue: null,\n          });\n        }\n      }\n    }\n  });\n  childrenToCompareTo.forEach(oldElement => {\n    if (!oldElement.closest('Private')) {\n      const shouldFilter: boolean = shouldFilterElement(\n        oldElement,\n        getDiffFilterSelector(\n          oldElement,\n          searchElementToCompareAgainst,\n          filterToIgnore\n        )\n      );\n      if (!shouldFilter) {\n        childDiffs.push({\n          type: 'Element',\n          newValue: null,\n          oldValue: oldElement,\n        });\n      }\n    }\n  });\n  return childDiffs;\n}\n\n/**\n * Generate HTML (TemplateResult) containing all the differences between the two elements passed.\n * If null is returned there are no differences between the two elements.\n *\n * @param elementToBeCompared     - The element to check for differences.\n * @param elementToCompareAgainst - The element used to check against.\n */\nexport function renderDiff(\n  elementToBeCompared: Element,\n  elementToCompareAgainst: Element,\n  filterToIgnore: DiffFilter<Element> = {}\n): TemplateResult | null {\n  return renderDiffInternal(\n    elementToBeCompared,\n    elementToCompareAgainst,\n    filterToIgnore,\n    elementToBeCompared,\n    elementToCompareAgainst\n  );\n}\n\nfunction renderDiffInternal(\n  elementToBeCompared: Element,\n  elementToCompareAgainst: Element,\n  filterToIgnore: DiffFilter<Element> = {},\n  searchElementToBeCompared: Element,\n  searchElementToCompareAgainst: Element\n): TemplateResult | null {\n  // Determine the ID from the current tag. These can be numbers or strings.\n  let idTitle: string | undefined = identity(elementToBeCompared).toString();\n  if (idTitle === 'NaN') {\n    idTitle = undefined;\n  }\n\n  // Set the root elements if they are not defined yet\n  searchElementToBeCompared = searchElementToBeCompared || elementToBeCompared;\n  searchElementToCompareAgainst =\n    searchElementToCompareAgainst || elementToCompareAgainst;\n\n  const attrDiffs: [string, Diff<string>][] = diffSclAttributes(\n    elementToBeCompared,\n    elementToCompareAgainst,\n    filterToIgnore,\n    searchElementToBeCompared\n  );\n\n  // Next check which elements are added, deleted or in both elements.\n  const childDiffs: Diff<Element>[] = diffSclChilds(\n    elementToBeCompared,\n    elementToCompareAgainst,\n    filterToIgnore,\n    searchElementToBeCompared,\n    searchElementToCompareAgainst\n  );\n\n  const childAddedOrDeleted: Diff<Element>[] = [];\n  const childToCompare: Diff<Element>[] = [];\n  childDiffs.forEach(diff => {\n    if (!diff.oldValue || !diff.newValue) {\n      childAddedOrDeleted.push(diff);\n    } else {\n      childToCompare.push(diff);\n    }\n  });\n\n  // These children exist in both old and new element, let's check if there are any difference in the children.\n  const childToCompareTemplates = childToCompare\n    .map(diff => renderDiff(diff.newValue!, diff.oldValue!, filterToIgnore))\n    .filter(result => result !== null);\n\n  // If there are difference generate the HTML otherwise just return null.\n  if (\n    childToCompareTemplates.length > 0 ||\n    attrDiffs.length > 0 ||\n    childAddedOrDeleted.length > 0\n  ) {\n    return html` ${attrDiffs.length > 0 || childAddedOrDeleted.length > 0\n      ? html`<div class=\"container container--alt\">\n          <div class=\"list__container list__container--left\">\n            <mwc-list multi right nonInteractive>\n              ${repeat(\n                attrDiffs,\n                e => e,\n                ([name, diff]) =>\n                  html`<mwc-list-item right twoLine graphic=\"icon\">\n                    ${diff.oldValue !== null\n                      ? html`\n                          <span>\n                            ${name}:\n                            ${diff.oldValue === '' ? '\"\"' : diff.oldValue}\n                          </span>\n                          <span slot=\"secondary\">${idTitle}</span>\n                          <mwc-icon slot=\"graphic\">\n                            ${diffTypeToIcon.get(diff.type)}\n                          </mwc-icon>\n                        `\n                      : ''}\n                  </mwc-list-item>`\n              )}\n              ${repeat(\n                childAddedOrDeleted,\n                e => e,\n                diff =>\n                  html` <mwc-list-item right twoLine graphic=\"icon\">\n                    ${diff.oldValue\n                      ? html`\n                          <span>${diff.oldValue.tagName}</span>\n                          <span slot=\"secondary\">\n                            ${describe(diff.oldValue!)}\n                          </span>\n                          <mwc-icon slot=\"graphic\">\n                            ${diffTypeToIcon.get(diff.type)}\n                          </mwc-icon>\n                        `\n                      : ''}\n                  </mwc-list-item>`\n              )}\n            </mwc-list>\n          </div>\n          <div class=\"list__container\">\n            <mwc-list multi left nonInteractive>\n              ${repeat(\n                attrDiffs,\n                e => e,\n                ([name, diff]) =>\n                  html` <mwc-list-item left twoLine graphic=\"icon\">\n                    ${diff.newValue !== null\n                      ? html`\n                          <span>\n                            ${name}:\n                            ${diff.newValue === '' ? '\"\"' : diff.newValue}\n                          </span>\n                          <span slot=\"secondary\">${idTitle}</span>\n                          <mwc-icon slot=\"graphic\">\n                            ${diffTypeToIcon.get(diff.type)}\n                          </mwc-icon>\n                        `\n                      : ''}\n                  </mwc-list-item>`\n              )}\n              ${repeat(\n                childAddedOrDeleted,\n                e => e,\n                diff =>\n                  html` <mwc-list-item left twoLine graphic=\"icon\">\n                    ${diff.newValue\n                      ? html`\n                          <span>${diff.newValue.tagName}</span>\n                          <span slot=\"secondary\">\n                            ${describe(diff.newValue!)}\n                          </span>\n                          <mwc-icon slot=\"graphic\">\n                            ${diffTypeToIcon.get(diff.type)}\n                          </mwc-icon>\n                        `\n                      : ''}\n                  </mwc-list-item>`\n              )}\n            </mwc-list>\n          </div>\n        </div>`\n      : ''}\n    ${childToCompareTemplates}`;\n  }\n  return null;\n}\n"]}