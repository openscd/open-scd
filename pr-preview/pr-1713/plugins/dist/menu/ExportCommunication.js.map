{"version":3,"file":"ExportCommunication.js","sourceRoot":"","sources":["../../src/menu/ExportCommunication.ts"],"names":[],"mappings":"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","sourcesContent":["import { LitElement, property } from 'lit-element';\nimport { get } from 'lit-translate';\n\nimport { formatXml } from '@openscd/xml';\nimport { newLogEvent } from '@openscd/core/foundation/deprecated/history';\n\nfunction cloneAttributes(destElement: Element, sourceElement: Element) {\n  let attr;\n  const attributes = Array.prototype.slice.call(sourceElement.attributes);\n  while ((attr = attributes.pop())) {\n    destElement.setAttribute(attr.nodeName, attr.nodeValue);\n  }\n}\n\n/**\n * Take an XMLDocument and pretty-print, format it, attach it to a document link and then download it.\n * @param doc - The XML document\n * @param document - The element to attach to within the DOM\n * @param filename - The filename to produce\n * @returns The blob object that is serialised\n */\nexport function saveXmlBlob(\n  doc: XMLDocument,\n  document: Document,\n  filename: string\n): void {\n  const blob = new Blob(\n    [formatXml(new XMLSerializer().serializeToString(doc))],\n    {\n      type: 'application/xml',\n    }\n  );\n\n  const a = document.createElement('a');\n  a.download = filename;\n  a.href = URL.createObjectURL(blob);\n  a.dataset.downloadurl = ['application/xml', a.download, a.href].join(':');\n  a.style.display = 'none';\n  document.body.appendChild(a);\n  a.click();\n  document.body.removeChild(a);\n  setTimeout(function () {\n    URL.revokeObjectURL(a.href);\n  }, 5000);\n}\n\n/**\n * Plug-in to allow exporting of the Communication SCL element as an XML file.\n */\nexport default class ExportCommunication extends LitElement {\n  /** The document being edited as provided to plugins by [[`OpenSCD`]]. */\n  @property({ attribute: false }) doc!: XMLDocument;\n  @property({ type: Number })\n  editCount = -1;\n  @property({ attribute: false }) docName!: string;\n\n  /** Entry point for this plug-in */\n  async run(): Promise<void> {\n    // create document\n    const sclNamespace = 'http://www.iec.ch/61850/2003/SCL';\n    const sclDoc = document.implementation.createDocument(\n      sclNamespace,\n      'SCL',\n      null\n    );\n    const pi = sclDoc.createProcessingInstruction(\n      'xml',\n      'version=\"1.0\" encoding=\"UTF-8\"'\n    );\n    sclDoc.insertBefore(pi, sclDoc.firstChild);\n\n    // ensure schema revision and namespace definitions are transferred\n    cloneAttributes(sclDoc.documentElement, this.doc.documentElement);\n\n    const communicationSection = this.doc.querySelector(\n      ':root > Communication'\n    );\n\n    if (communicationSection) {\n      const header = this.doc.querySelector(':root > Header')?.cloneNode(true);\n      const communication = this.doc\n        .querySelector(':root > Communication')\n        ?.cloneNode(true);\n\n      if (header) sclDoc.documentElement.appendChild(<Node>header);\n      sclDoc.documentElement.appendChild(<Node>communication);\n\n      const ending = this.docName.slice(0, -4);\n      let docName = `${this.docName}-Communication.scd`;\n      // use filename extension if there seems to be one\n      if (ending.slice(0, 1) === '.') {\n        docName = `${this.docName.slice(0, -4)}-Communication${ending}`;\n      }\n      saveXmlBlob(sclDoc, document, docName);\n    } else {\n      this.dispatchEvent(\n        newLogEvent({\n          kind: 'warning',\n          title: get('exportCommunication.noCommunicationSection'),\n        })\n      );\n    }\n  }\n}\n"]}