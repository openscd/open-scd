{"version":3,"file":"connectivitynode.js","sourceRoot":"","sources":["../../src/wizards/connectivitynode.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAkB,MAAM,aAAa,CAAC;AACnD,OAAO,EAAE,GAAG,EAAE,MAAM,eAAe,CAAC;AAEpC,OAAO,EAAE,QAAQ,EAAU,MAAM,qCAAqC,CAAC;AAEvE,SAAS,MAAM,CACb,IAAmB,EACnB,QAAuB,EACvB,aAAuB;IAEvB,OAAO;QACL,IAAI,CAAA;;oBAEY,IAAI;gBACR,GAAG,CAAC,oCAAoC,CAAC;;2BAE9B,GAAG,CAAC,oBAAoB,CAAC;;wBAE5B,aAAa;;yBAEZ;QACrB,IAAI,CAAA;;oBAEY,QAAQ;gBACZ,GAAG,CAAC,wCAAwC,CAAC;;2BAElC,GAAG,CAAC,oBAAoB,CAAC;;yBAE3B;KACtB,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,0BAA0B,CAAC,OAAgB;IACzD,MAAM,aAAa,GAAG,KAAK,CAAC,IAAI,CAC9B,OAAO,CAAC,UAAW,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,CACzD;SACE,MAAM,CAAC,QAAQ,CAAC;SAChB,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;SAC9C,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,KAAK,OAAO,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;IAEzD,OAAO;QACL;YACE,KAAK,EAAE,GAAG,CAAC,oCAAoC,CAAC;YAChD,OAAO;YACP,OAAO,EAAE,MAAM,CACb,OAAO,CAAC,YAAY,CAAC,MAAM,CAAC,EAC5B,OAAO,CAAC,YAAY,CAAC,UAAU,CAAC,EAChC,aAAa,CACd;SACF;KACF,CAAC;AACJ,CAAC","sourcesContent":["import { html, TemplateResult } from 'lit-element';\nimport { get } from 'lit-translate';\n\nimport { isPublic, Wizard } from '@openscd/open-scd/src/foundation.js';\n\nfunction render(\n  name: string | null,\n  pathName: string | null,\n  reservedNames: string[]\n): TemplateResult[] {\n  return [\n    html`<wizard-textfield\n      label=\"name\"\n      .maybeValue=${name}\n      helper=\"${get('connectivitynode.wizard.nameHelper')}\"\n      required\n      validationMessage=\"${get('textfield.required')}\"\n      dialogInitialFocus\n      .reservedValues=${reservedNames}\n      readonly\n    ></wizard-textfield>`,\n    html`<wizard-textfield\n      label=\"pathName\"\n      .maybeValue=${pathName}\n      helper=\"${get('connectivitynode.wizard.pathNameHelper')}\"\n      required\n      validationMessage=\"${get('textfield.required')}\"\n      readonly\n    ></wizard-textfield>`,\n  ];\n}\n\nexport function editConnectivityNodeWizard(element: Element): Wizard {\n  const reservedNames = Array.from(\n    element.parentNode!.querySelectorAll('ConnectivityNode')\n  )\n    .filter(isPublic)\n    .map(cNode => cNode.getAttribute('name') ?? '')\n    .filter(name => name !== element.getAttribute('name'));\n\n  return [\n    {\n      title: get('connectivitynode.wizard.title.edit'),\n      element,\n      content: render(\n        element.getAttribute('name'),\n        element.getAttribute('pathName'),\n        reservedNames\n      ),\n    },\n  ];\n}\n"]}