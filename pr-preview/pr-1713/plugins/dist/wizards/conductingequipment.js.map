{"version":3,"file":"conductingequipment.js","sourceRoot":"","sources":["../../src/wizards/conductingequipment.ts"],"names":[],"mappings":"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","sourcesContent":["import { html, TemplateResult } from 'lit-element';\nimport { get } from 'lit-translate';\n\nimport '@material/mwc-list/mwc-list-item';\nimport '@material/mwc-select';\n\nimport '@openscd/open-scd/src/wizard-textfield.js';\nimport {\n  crossProduct,\n  getValue,\n  isPublic,\n  Wizard,\n  WizardActor,\n  WizardInputElement,\n} from '@openscd/open-scd/src/foundation.js';\n\nimport {\n  createElement,\n} from '@openscd/xml';\n\nimport { EditorAction } from '@openscd/core/foundation/deprecated/editor.js';\nimport { replaceNamingAction } from './foundation/actions.js';\n\nconst types: Partial<Record<string, string>> = {\n  // standard\n  CBR: 'Circuit Breaker',\n  DIS: 'Disconnector',\n  // custom\n  ERS: 'Earth Switch',\n  CTR: 'Current Transformer',\n  VTR: 'Voltage Transformer',\n  AXN: 'Auxiliary Network',\n  BAT: 'Battery',\n  BSH: 'Bushing',\n  CAP: 'Capacitor Bank',\n  CON: 'Converter',\n  EFN: 'Earth Fault Neutralizer',\n  FAN: 'Fan',\n  GIL: 'Gas Insulated Line',\n  GEN: 'Generator',\n  IFL: 'Infeeding Line',\n  MOT: 'Motor',\n  RES: 'Neutral Resistor',\n  REA: 'Reactor',\n  PSH: 'Power Shunt',\n  CAB: 'Power Cable',\n  PMP: 'Pump',\n  LIN: 'Power Overhead Line',\n  RRC: 'Rotating Reactive Component',\n  SCR: 'Semiconductor Controlled Rectifier',\n  SAR: 'Surge Arrester',\n  SMC: 'Synchronous Machine',\n  TCF: 'Thyristor Controlled Frequency Converter',\n  TCR: 'Thyristor Controlled Reactive Component',\n};\n\n/**\n * Finds LN within IED based on LNode from Substation SCL section.\n * @param lNode - LNode in Substation SCL section.\n * @returns - LN in the IED SCL section.\n */\nfunction getLogicalNodeInstance(lNode: Element | null): Element | null {\n  if (!lNode) return null;\n  const [lnInst, lnClass, iedName, ldInst, prefix] = [\n    'lnInst',\n    'lnClass',\n    'iedName',\n    'ldInst',\n    'prefix',\n  ].map(attribute => lNode?.getAttribute(attribute));\n  const iedSelector = [`IED[name=\"${iedName}\"]`, 'IED'];\n  const lDevicePath = ['AccessPoint > Server'];\n  const lNSelector = [\n    `LDevice[inst=\"${ldInst}\"] > LN[inst=\"${lnInst}\"][lnClass=\"${lnClass}\"]`,\n  ];\n  const lNPrefixSelector =\n    prefix && prefix !== ''\n      ? [`[prefix=\"${prefix}\"]`]\n      : ['[prefix=\"\"]', ':not(prefix)'];\n  return lNode.ownerDocument.querySelector(\n    crossProduct(\n      iedSelector,\n      [' > '],\n      lDevicePath,\n      [' > '],\n      lNSelector,\n      lNPrefixSelector\n    )\n      .map(strings => strings.join(''))\n      .join(',')\n  );\n}\n\n/**\n * Searches DataTypeTemplates for SwTyp:stVal from an LN or LNode reference.\n * @param lNorlNode - SCL IED Logical Node or LNode from Substation section.\n * @returns - value of stVal data attribute if found.\n */\nfunction getSwitchTypeValueFromDTT(lNorlNode: Element): string | undefined {\n  const rootNode = lNorlNode?.ownerDocument;\n  const lNodeType = lNorlNode.getAttribute('lnType');\n  const lnClass = lNorlNode.getAttribute('lnClass');\n  const dObj = rootNode.querySelector(\n    `DataTypeTemplates > LNodeType[id=\"${lNodeType}\"][lnClass=\"${lnClass}\"] > DO[name=\"SwTyp\"]`\n  );\n  if (dObj) {\n    const dORef = dObj.getAttribute('type');\n    return rootNode\n      .querySelector(\n        `DataTypeTemplates > DOType[id=\"${dORef}\"] > DA[name=\"stVal\"] > Val`\n      )\n      ?.innerHTML.trim();\n  }\n  // definition missing\n  return undefined;\n}\n\n/**\n * Finds whether a logical node has the SwTyp:stVal data attribute.\n * @param lN - logical node within the IED section.\n * @returns - value of type as a string.\n */\nfunction getSwitchTypeValue(lN: Element): string | undefined {\n  const daInstantiated = lN.querySelector(\n    'DOI[name=\"SwTyp\"] > DAI[name=\"stVal\"]'\n  );\n  // definition is on instantiated object\n  if (daInstantiated) {\n    return daInstantiated.querySelector('Val')?.innerHTML.trim();\n    // definition must be on the data object type\n  } else {\n    return getSwitchTypeValueFromDTT(lN);\n  }\n}\n\n/**\n * Returns true if any terminal of the ConductingEquipment has a connectivity node name 'grounded'.\n * @param condEq - SCL ConductingEquipment.\n * @returns if any terminal of the ConductingEquipment is grounded.\n */\nfunction containsGroundedTerminal(condEq: Element): boolean {\n  return Array.from(condEq.querySelectorAll('Terminal')).some(\n    t => t.getAttribute('cNodeName') === 'grounded'\n  );\n}\n\n/**\n * Looks to see if the Conducting Equipment contains an XSWI LN. If so, check if the XSWI definition\n * includes SwTyp and if stVal indicates an Earth/Earthing Switch by looking at either the IED or the\n * DataTypeTemplates.\n * @param condEq - SCL ConductingEquipment.\n * @returns true if an earth switch is found, false otherwise.\n */\nfunction containsEarthSwitchDefinition(condEq: Element): boolean {\n  const lNodeXSWI = condEq.querySelector('LNode[lnClass=\"XSWI\"]');\n  const lN = getLogicalNodeInstance(lNodeXSWI);\n  let swTypVal;\n  if (lN) {\n    swTypVal = getSwitchTypeValue(lN);\n  } else if (lNodeXSWI) {\n    swTypVal = getSwitchTypeValueFromDTT(lNodeXSWI);\n  }\n  return swTypVal\n    ? ['Earthing Switch', 'High Speed Earthing Switch'].includes(swTypVal)\n    : false;\n}\n\n/**\n * Find the type of an SCL conducting equipment. For earth switches derive this from terminals or XSWI logical node definition.\n * @param condEq - SCL ConductingEquipment\n * @returns  Three letter primary apparatus device type as defined in IEC 61850-6.\n */\nexport function typeStr(condEq: Element): string {\n  if (\n    condEq.getAttribute('type') === 'DIS' &&\n    (containsGroundedTerminal(condEq) || containsEarthSwitchDefinition(condEq))\n  ) {\n    // these checks only carried out for a three phase system\n    return 'ERS';\n  } else {\n    return condEq.getAttribute('type') ?? '';\n  }\n}\n\nexport function typeName(condEq: Element): string {\n  return types[typeStr(condEq)] ?? get('conductingequipment.unknownType');\n}\n\nfunction renderTypeSelector(\n  option: 'edit' | 'create',\n  type: string\n): TemplateResult {\n  return option === 'create'\n    ? html`<mwc-select\n        style=\"--mdc-menu-max-height: 196px;\"\n        required\n        label=\"type\"\n        helper=\"${get('conductingequipment.wizard.typeHelper')}\"\n        validationMessage=\"${get('textfield.required')}\"\n      >\n        ${Object.keys(types).map(\n          v => html`<mwc-list-item value=\"${v}\">${types[v]}</mwc-list-item>`\n        )}\n      </mwc-select>`\n    : html`<mwc-select\n        label=\"type\"\n        helper=\"${get('conductingequipment.wizard.typeHelper')}\"\n        validationMessage=\"${get('textfield.required')}\"\n        disabled\n      >\n        <mwc-list-item selected value=\"0\">${type}</mwc-list-item>\n      </mwc-select>`;\n}\n\nexport function renderConductingEquipmentWizard(\n  name: string | null,\n  desc: string | null,\n  option: 'edit' | 'create',\n  type: string,\n  reservedNames: string[]\n): TemplateResult[] {\n  return [\n    renderTypeSelector(option, type),\n    html`<wizard-textfield\n      label=\"name\"\n      .maybeValue=${name}\n      helper=\"${get('conductingequipment.wizard.nameHelper')}\"\n      required\n      validationMessage=\"${get('textfield.required')}\"\n      dialogInitialFocus\n      .reservedValues=${reservedNames}\n    ></wizard-textfield>`,\n    html`<wizard-textfield\n      label=\"desc\"\n      .maybeValue=${desc}\n      nullable\n      helper=\"${get('conductingequipment.wizard.descHelper')}\"\n    ></wizard-textfield>`,\n  ];\n}\n\nexport function createAction(parent: Element): WizardActor {\n  return (inputs: WizardInputElement[]): EditorAction[] => {\n    const name = getValue(inputs.find(i => i.label === 'name')!);\n    const desc = getValue(inputs.find(i => i.label === 'desc')!);\n    const proxyType = getValue(inputs.find(i => i.label === 'type')!);\n    const type = proxyType === 'ERS' ? 'DIS' : proxyType;\n\n    const element = createElement(parent.ownerDocument, 'ConductingEquipment', {\n      name,\n      type,\n      desc,\n    });\n\n    if (proxyType !== 'ERS') return [{ new: { parent, element } }];\n\n    const groundNode = parent\n      .closest('VoltageLevel')\n      ?.querySelector('ConnectivityNode[name=\"grounded\"]');\n\n    const substationName = groundNode\n      ? groundNode.closest('Substation')?.getAttribute('name') ?? null\n      : parent.closest('Substation')?.getAttribute('name') ?? null;\n    const voltageLevelName = groundNode\n      ? groundNode.closest('VoltageLevel')?.getAttribute('name') ?? null\n      : parent.closest('VoltageLevel')?.getAttribute('name') ?? null;\n    const bayName = groundNode\n      ? groundNode.closest('Bay')?.getAttribute('name') ?? null\n      : parent.closest('Bay')?.getAttribute('name') ?? null;\n    const connectivityNode =\n      bayName && voltageLevelName && substationName\n        ? substationName + '/' + voltageLevelName + '/' + bayName + '/grounded'\n        : null;\n\n    element.appendChild(\n      createElement(parent.ownerDocument, 'Terminal', {\n        name: 'T1',\n        cNodeName: 'grounded',\n        substationName,\n        voltageLevelName,\n        bayName,\n        connectivityNode,\n      })\n    );\n\n    const action = {\n      new: {\n        parent,\n        element,\n      },\n    };\n\n    if (groundNode) return [action];\n\n    const cNodeElement = createElement(\n      parent.ownerDocument,\n      'ConnectivityNode',\n      {\n        name: 'grounded',\n        pathName: connectivityNode,\n      }\n    );\n\n    const cNodeAction = {\n      new: {\n        parent,\n        element: cNodeElement,\n      },\n    };\n\n    return [action, cNodeAction];\n  };\n}\n\nexport function reservedNamesConductingEquipment(\n  parent: Element,\n  currentName?: string | null\n): string[] {\n  return Array.from(parent.querySelectorAll('ConductingEquipment'))\n    .filter(isPublic)\n    .map(condEq => condEq.getAttribute('name') ?? '')\n    .filter(name => currentName && name !== currentName);\n}\n\nexport function createConductingEquipmentWizard(parent: Element): Wizard {\n  const reservedNames = reservedNamesConductingEquipment(parent);\n\n  return [\n    {\n      title: get('conductingequipment.wizard.title.add'),\n      element: undefined,\n      primary: {\n        icon: 'add',\n        label: get('add'),\n        action: createAction(parent),\n      },\n      content: renderConductingEquipmentWizard(\n        '',\n        '',\n        'create',\n        '',\n        reservedNames\n      ),\n    },\n  ];\n}\n\nexport function editConductingEquipmentWizard(element: Element): Wizard {\n  const reservedNames = reservedNamesConductingEquipment(\n    <Element>element.parentNode!,\n    element.getAttribute('name')\n  );\n\n  return [\n    {\n      title: get('conductingequipment.wizard.title.edit'),\n      element,\n      primary: {\n        icon: 'edit',\n        label: get('save'),\n        action: replaceNamingAction(element),\n      },\n      content: renderConductingEquipmentWizard(\n        element.getAttribute('name'),\n        element.getAttribute('desc'),\n        'edit',\n        typeName(element),\n        reservedNames\n      ),\n    },\n  ];\n}\n"]}