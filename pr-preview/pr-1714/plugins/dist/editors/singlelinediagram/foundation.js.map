{"version":3,"file":"foundation.js","sourceRoot":"","sources":["../../../src/editors/singlelinediagram/foundation.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  getNameAttribute,\n  getPathNameAttribute,\n} from '@openscd/open-scd/src/foundation.js';\n\n/**\n * A point is a position containing a x and a y within a SCL file.\n */\nexport interface Point {\n  x: number;\n  y: number;\n}\n\nexport const SCL_COORDINATES_NAMESPACE =\n  'http://www.iec.ch/61850/2003/SCLcoordinates';\n\n/** Scope factor: the ConnectivityNode allocation algorithm works better with a scale factor which is bigger than 1. */\nconst COORDINATES_SCALE_FACTOR = 2;\n\n/**\n * Get the coordinates of a XML element (x and y coordinates).\n * @param element - The element to extract coordinates from.\n * @returns A point containing the coordinates.\n */\nexport function getRelativeCoordinates(element: Element): Point {\n  const x = element.getAttributeNS(SCL_COORDINATES_NAMESPACE, 'x');\n  const y = element.getAttributeNS(SCL_COORDINATES_NAMESPACE, 'y');\n\n  return {\n    x: x ? parseInt(x) * COORDINATES_SCALE_FACTOR : 0,\n    y: y ? parseInt(y) * COORDINATES_SCALE_FACTOR : 0,\n  };\n}\n\n/**\n * Get the absolute (its own and all parents') coordinates of a SCL element (x and y coordinates)\n * @param element - The element to extract coordinates from.\n * @returns A point containing the coordinates.\n */\nexport function getAbsoluteCoordinates(element: Element): Point {\n  if (!element.parentElement || element.parentElement?.tagName === 'SCL')\n    return getRelativeCoordinates(element);\n\n  const absParent = getAbsoluteCoordinates(element.parentElement);\n  const relElement = getRelativeCoordinates(element);\n  return {\n    x: absParent.x! + relElement.x!,\n    y: absParent.y! + relElement.y!,\n  };\n}\n\n/**\n * Checking of an element is a BusBar or not.\n * @param element - The element to check.\n * @returns Is the element a BusBar or not.\n */\nexport function isBusBar(element: Element): boolean {\n  return (\n    element.children.length === 1 &&\n    element.children[0].tagName === 'ConnectivityNode'\n  );\n}\n\n/**\n * Get all the connected terminals to a given element.\n * @param element - The element to check.\n * @returns All connected terminals.\n */\nexport function getConnectedTerminals(element: Element): Element[] {\n  const substationElement = element?.closest('Substation');\n  if (!substationElement) return [];\n\n  const path = getPathNameAttribute(element) ?? '';\n  const [substationName, voltageLevelName, bayName] = path.split('/');\n\n  return Array.from(substationElement.getElementsByTagName('Terminal')).filter(\n    terminal =>\n      terminal.getAttribute('connectivityNode') === path &&\n      terminal.getAttribute('cNodeName') === getNameAttribute(element) &&\n      (!terminal.hasAttribute('substationName') ||\n        terminal.getAttribute('substationName') === substationName) &&\n      (!terminal.hasAttribute('voltageLevelName') ||\n        terminal.getAttribute('voltageLevelName') === voltageLevelName) &&\n      (!terminal.hasAttribute('bayName') ||\n        terminal.getAttribute('bayName') === bayName)\n  );\n}\n\n/**\n * Calculate the SCL x and y coordinate of a Connectivity Node.\n * The algorithm is as follow:\n * - Get all elements that are connected to this Connectivity Node.\n * - Extract the SCL x and y coordinates of these Connectivity Nodes and add them up.\n * - Divide the final x and y numbers by the number of connected elements. This way, you get an so-called average.\n * @param cNodeElement  - The Connectivity Node to calculate the X and Y Coordinates for.\n * @returns The calculated SCL x and y coordinates for this Connectivity Node.\n */\nexport function calculateConnectivityNodeCoordinates(\n  cNodeElement: Element\n): Point {\n  // If element is not a Connectivity Node, return default {x: 0, y: 0}\n  if (cNodeElement.tagName != 'ConnectivityNode') return { x: 0, y: 0 };\n\n  const substationElement = cNodeElement.closest('Substation');\n  const pathName = getPathNameAttribute(cNodeElement);\n\n  let nrOfConnections = 0;\n  let nrOfXConnections = 0;\n  let totalX = 0;\n  let totalY = 0;\n\n  Array.from(\n    substationElement!.querySelectorAll('ConductingEquipment, PowerTransformer')\n  )\n    .filter(\n      equipment =>\n        equipment.querySelector(`Terminal[connectivityNode=\"${pathName}\"]`) !=\n        null\n    )\n    .forEach(equipment => {\n      nrOfConnections++;\n\n      const { x, y } = getAbsoluteCoordinates(equipment);\n\n      // Only if the Element is in the same bay, we will use that X-value to calculate the location\n      // of the Connectivity Node. This will cause the Connectivity Node to stay with the boundaries\n      // of the Bay and not causing al kind of overlays between bays.\n      if (equipment.parentElement === cNodeElement.parentElement) {\n        nrOfXConnections++;\n        totalX += x!;\n      }\n      totalY += y!;\n    });\n\n  if (nrOfConnections === 0) return { x: 0, y: 0 };\n  if (nrOfConnections === 1) return { x: totalX + 1, y: totalY + 1 };\n\n  return {\n    x: Math.round(totalX / nrOfXConnections),\n    y: Math.round(totalY / nrOfConnections),\n  };\n}\n\nexport function getCommonParentElement(\n  leftElement: Element,\n  rightElement: Element,\n  defaultParent: Element | null\n): Element | null {\n  let leftParentElement = leftElement.parentElement;\n  while (leftParentElement) {\n    if (leftParentElement.contains(rightElement)) {\n      return leftParentElement;\n    }\n    leftParentElement = leftParentElement.parentElement;\n  }\n  return defaultParent;\n}\n"]}