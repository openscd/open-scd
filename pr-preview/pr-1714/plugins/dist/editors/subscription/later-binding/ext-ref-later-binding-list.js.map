{"version":3,"file":"ext-ref-later-binding-list.js","sourceRoot":"","sources":["../../../../src/editors/subscription/later-binding/ext-ref-later-binding-list.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  css,\n  customElement,\n  html,\n  LitElement,\n  property,\n  state,\n  TemplateResult,\n} from 'lit-element';\nimport { nothing } from 'lit-html';\nimport { get } from 'lit-translate';\n\nimport {\n  getDescriptionAttribute,\n  identity,\n} from '@openscd/open-scd/src/foundation.js';\n\nimport {\n  cloneElement,\n} from '@openscd/xml';\n\nimport {\n  ComplexAction,\n  Delete,\n  newActionEvent,\n} from '@openscd/core/foundation/deprecated/editor.js';\n\nimport {\n  getExistingSupervision,\n  styles,\n  updateExtRefElement,\n  serviceTypes,\n  instantiateSubscriptionSupervision,\n  removeSubscriptionSupervision,\n  FcdaSelectEvent,\n  newSubscriptionChangedEvent,\n  canRemoveSubscriptionSupervision,\n} from '../foundation.js';\n\nimport {\n  getExtRefElements,\n  getSubscribedExtRefElements,\n  fcdaSpecification,\n  inputRestriction,\n  isSubscribed,\n} from './foundation.js';\n\n/**\n * A sub element for showing all Ext Refs from a FCDA Element.\n * The List reacts on a custom event to know which FCDA Element was selected and updated the view.\n */\n@customElement('extref-later-binding-list')\nexport class ExtRefLaterBindingList extends LitElement {\n  @property({ attribute: false })\n  doc!: XMLDocument;\n  @property({ type: Number })\n  editCount = -1;\n  @property()\n  controlTag!: 'SampledValueControl' | 'GSEControl';\n\n  @state()\n  currentSelectedControlElement: Element | undefined;\n  @state()\n  currentSelectedFcdaElement: Element | undefined;\n  @state()\n  currentIedElement: Element | undefined;\n\n  serviceTypeLookup = {\n    GSEControl: 'GOOSE',\n    SampledValueControl: 'SMV',\n  };\n\n  constructor() {\n    super();\n\n    const parentDiv = this.closest('.container');\n    if (parentDiv) {\n      this.onFcdaSelectEvent = this.onFcdaSelectEvent.bind(this);\n      parentDiv.addEventListener('fcda-select', this.onFcdaSelectEvent);\n    }\n  }\n\n  private async onFcdaSelectEvent(event: FcdaSelectEvent) {\n    this.currentSelectedControlElement = event.detail.control;\n    this.currentSelectedFcdaElement = event.detail.fcda;\n\n    // Retrieve the IED Element to which the FCDA belongs.\n    // These ExtRef Elements will be excluded.\n    this.currentIedElement = this.currentSelectedFcdaElement\n      ? this.currentSelectedFcdaElement.closest('IED') ?? undefined\n      : undefined;\n  }\n\n  /**\n   * Check data consistency of source `FCDA` and sink `ExtRef` based on\n   * `ExtRef`'s `pLN`, `pDO`, `pDA` and `pServT` attributes.\n   * Consistent means `CDC` and `bType` of both ExtRef and FCDA is equal.\n   * In case\n   *  - `pLN`, `pDO`, `pDA` or `pServT` attributes are not present, allow subscribing\n   *  - no CDC or bType can be extracted, do not allow subscribing\n   *\n   * @param extRef - The `ExtRef` Element to check against\n   */\n  private unsupportedExtRefElement(extRef: Element): boolean {\n    // Vendor does not provide data for the check\n    if (\n      !extRef.hasAttribute('pLN') ||\n      !extRef.hasAttribute('pDO') ||\n      !extRef.hasAttribute('pDA') ||\n      !extRef.hasAttribute('pServT')\n    )\n      return false;\n\n    // Not ready for any kind of subscription\n    if (!this.currentSelectedFcdaElement) return true;\n\n    const fcda = fcdaSpecification(this.currentSelectedFcdaElement);\n    const input = inputRestriction(extRef);\n\n    if (fcda.cdc === null && input.cdc === null) return true;\n    if (fcda.bType === null && input.bType === null) return true;\n    if (\n      serviceTypes[this.currentSelectedControlElement?.tagName ?? ''] !==\n      extRef.getAttribute('pServT')\n    )\n      return true;\n\n    return fcda.cdc !== input.cdc || fcda.bType !== input.bType;\n  }\n\n  /**\n   * Unsubscribing means removing a list of attributes from the ExtRef Element.\n   *\n   * @param extRefElement - The Ext Ref Element to clean from attributes.\n   */\n  private unsubscribe(extRefElement: Element): void {\n    if (\n      !this.currentIedElement ||\n      !this.currentSelectedFcdaElement ||\n      !this.currentSelectedControlElement!\n    ) {\n      return;\n    }\n    const clonedExtRefElement = cloneElement(extRefElement, {\n      iedName: null,\n      ldInst: null,\n      prefix: null,\n      lnClass: null,\n      lnInst: null,\n      doName: null,\n      daName: null,\n      serviceType: null,\n      srcLDInst: null,\n      srcPrefix: null,\n      srcLNClass: null,\n      srcLNInst: null,\n      srcCBName: null,\n    });\n\n    const replaceAction = {\n      old: { element: extRefElement },\n      new: { element: clonedExtRefElement },\n    };\n\n    const subscriberIed = extRefElement.closest('IED') || undefined;\n    const removeSubscriptionActions: Delete[] = [];\n    if (canRemoveSubscriptionSupervision(extRefElement))\n      removeSubscriptionActions.push(\n        ...removeSubscriptionSupervision(\n          this.currentSelectedControlElement,\n          subscriberIed\n        )\n      );\n\n    this.dispatchEvent(\n      newActionEvent({\n        title: get(`subscription.disconnect`),\n        actions: [replaceAction, ...removeSubscriptionActions],\n      })\n    );\n    this.dispatchEvent(\n      newSubscriptionChangedEvent(\n        this.currentSelectedControlElement,\n        this.currentSelectedFcdaElement\n      )\n    );\n  }\n\n  /**\n   * Subscribing means copying a list of attributes from the FCDA Element (and others) to the ExtRef Element.\n   *\n   * @param extRefElement - The Ext Ref Element to add the attributes to.\n   */\n  private subscribe(extRefElement: Element): void {\n    if (\n      !this.currentIedElement ||\n      !this.currentSelectedFcdaElement ||\n      !this.currentSelectedControlElement!\n    ) {\n      return;\n    }\n\n    const complexAction: ComplexAction = {\n      actions: [],\n      title: get(`subscription.connect`),\n    };\n\n    const replaceAction = {\n      old: { element: extRefElement },\n      new: {\n        element: updateExtRefElement(\n          extRefElement,\n          this.currentSelectedControlElement,\n          this.currentSelectedFcdaElement\n        ),\n      },\n    };\n    complexAction.actions.push(replaceAction);\n\n    const subscriberIed = extRefElement.closest('IED') || undefined;\n\n    complexAction.actions.push(\n      ...instantiateSubscriptionSupervision(\n        this.currentSelectedControlElement,\n        subscriberIed\n      )\n    );\n\n    this.dispatchEvent(newActionEvent(complexAction));\n    this.dispatchEvent(\n      newSubscriptionChangedEvent(\n        this.currentSelectedControlElement,\n        this.currentSelectedFcdaElement\n      )\n    );\n  }\n\n  private getSubscribedExtRefElements(): Element[] {\n    return getSubscribedExtRefElements(\n      <Element>this.doc.getRootNode(),\n      this.controlTag,\n      this.currentSelectedFcdaElement,\n      this.currentSelectedControlElement,\n      true\n    );\n  }\n\n  private getAvailableExtRefElements(): Element[] {\n    return getExtRefElements(\n      <Element>this.doc.getRootNode(),\n      this.currentSelectedFcdaElement,\n      true\n    ).filter(\n      extRefElement =>\n        !isSubscribed(extRefElement) &&\n        (!extRefElement.hasAttribute('serviceType') ||\n          extRefElement.getAttribute('serviceType') ===\n            this.serviceTypeLookup[this.controlTag])\n    );\n  }\n\n  private renderTitle(): TemplateResult {\n    return html`<h1>${get(`subscription.laterBinding.extRefList.title`)}</h1>`;\n  }\n\n  private renderExtRefElement(extRefElement: Element): TemplateResult {\n    const supervisionNode = getExistingSupervision(extRefElement);\n    return html` <mwc-list-item\n      graphic=\"large\"\n      ?hasMeta=${supervisionNode !== null}\n      twoline\n      @click=${() => this.unsubscribe(extRefElement)}\n      value=\"${identity(extRefElement)}\"\n    >\n      <span>\n        ${extRefElement.getAttribute('intAddr')}\n        ${getDescriptionAttribute(extRefElement)\n          ? html` (${getDescriptionAttribute(extRefElement)})`\n          : nothing}\n      </span>\n      <span slot=\"secondary\"\n        >${identity(extRefElement.parentElement)}${supervisionNode !== null\n          ? ` (${identity(supervisionNode)})`\n          : ''}</span\n      >\n      <mwc-icon slot=\"graphic\">swap_horiz</mwc-icon>\n      ${supervisionNode !== null\n        ? html`<mwc-icon title=\"${identity(supervisionNode)}\" slot=\"meta\"\n            >monitor_heart</mwc-icon\n          >`\n        : nothing}\n    </mwc-list-item>`;\n  }\n\n  private renderSubscribedExtRefs(): TemplateResult {\n    const subscribedExtRefs = this.getSubscribedExtRefElements();\n    return html`\n      <mwc-list-item\n        noninteractive\n        value=\"${subscribedExtRefs\n          .map(\n            extRefElement =>\n              getDescriptionAttribute(extRefElement) +\n              ' ' +\n              identity(extRefElement)\n          )\n          .join(' ')}\"\n      >\n        <span>${get('subscription.subscriber.subscribed')}</span>\n      </mwc-list-item>\n      <li divider role=\"separator\"></li>\n      ${subscribedExtRefs.length > 0\n        ? html`${subscribedExtRefs.map(extRefElement =>\n            this.renderExtRefElement(extRefElement)\n          )}`\n        : html`<mwc-list-item graphic=\"large\" noninteractive>\n            ${get('subscription.laterBinding.extRefList.noSubscribedExtRefs')}\n          </mwc-list-item>`}\n    `;\n  }\n\n  private renderAvailableExtRefs(): TemplateResult {\n    const availableExtRefs = this.getAvailableExtRefElements();\n    return html`\n      <mwc-list-item\n        noninteractive\n        value=\"${availableExtRefs\n          .map(\n            extRefElement =>\n              getDescriptionAttribute(extRefElement) +\n              ' ' +\n              identity(extRefElement)\n          )\n          .join(' ')}\"\n      >\n        <span> ${get('subscription.subscriber.availableToSubscribe')} </span>\n      </mwc-list-item>\n      <li divider role=\"separator\"></li>\n      ${availableExtRefs.length > 0\n        ? html`${availableExtRefs.map(\n            extRefElement => html` <mwc-list-item\n              graphic=\"large\"\n              ?disabled=${this.unsupportedExtRefElement(extRefElement)}\n              twoline\n              @click=${() => this.subscribe(extRefElement)}\n              value=\"${identity(extRefElement)}\"\n            >\n              <span>\n                ${extRefElement.getAttribute('intAddr')}\n                ${getDescriptionAttribute(extRefElement)\n                  ? html` (${getDescriptionAttribute(extRefElement)})`\n                  : nothing}\n              </span>\n              <span slot=\"secondary\"\n                >${identity(extRefElement.parentElement)}</span\n              >\n              <mwc-icon slot=\"graphic\">arrow_back</mwc-icon>\n            </mwc-list-item>`\n          )}`\n        : html`<mwc-list-item graphic=\"large\" noninteractive>\n            ${get('subscription.laterBinding.extRefList.noAvailableExtRefs')}\n          </mwc-list-item>`}\n    `;\n  }\n\n  render(): TemplateResult {\n    return html` <section tabindex=\"0\">\n      ${this.currentSelectedControlElement && this.currentSelectedFcdaElement\n        ? html`\n            ${this.renderTitle()}\n            <filtered-list>\n              ${this.renderSubscribedExtRefs()} ${this.renderAvailableExtRefs()}\n            </filtered-list>\n          `\n        : html`\n            <h1>${get('subscription.laterBinding.extRefList.noSelection')}</h1>\n          `}\n    </section>`;\n  }\n\n  static styles = css`\n    ${styles}\n\n    mwc-list-item.hidden[noninteractive] + li[divider] {\n      display: none;\n    }\n  `;\n}\n"]}