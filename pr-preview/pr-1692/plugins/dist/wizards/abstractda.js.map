{"version":3,"file":"abstractda.js","sourceRoot":"","sources":["../../src/wizards/abstractda.ts"],"names":[],"mappings":"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","sourcesContent":["import { html, render, TemplateResult } from 'lit-html';\nimport { get } from 'lit-translate';\n\nimport '@material/mwc-list/mwc-list-item';\nimport { ListItem } from '@material/mwc-list/mwc-list-item';\nimport { SelectedEvent } from '@material/mwc-list/mwc-list-foundation';\nimport { Select } from '@material/mwc-select';\n\nimport '@openscd/open-scd/src/wizard-checkbox.js';\nimport '@openscd/open-scd/src/wizard-select.js';\nimport '@openscd/open-scd/src/wizard-textfield.js';\nimport {\n  createElement,\n} from '@openscd/xml';\nimport { EditorAction } from '@openscd/core/foundation/deprecated/editor.js';\nimport { WizardSelect } from '@openscd/open-scd/src/wizard-select.js';\nimport { WizardTextField } from '@openscd/open-scd/src/wizard-textfield.js';\nimport { maxLength, patterns } from './foundation/limits.js';\nimport { predefinedBasicTypeEnum, valKindEnum } from './foundation/enums.js';\n\nfunction selectType(e: SelectedEvent, data: Element, Val: string | null): void {\n  if (!e.target || !(e.target as Select).parentElement) return;\n\n  const typeSelected = (<Select>e.target).selected?.value;\n  const selectedBType = (<WizardSelect>(\n    (<Select>e.target).parentElement!.querySelector(\n      'wizard-select[label=\"bType\"]'\n    )!\n  )).value;\n\n  if (selectedBType !== 'Enum') return;\n\n  const enumVals = Array.from(\n    data.querySelectorAll(`EnumType[id=\"${typeSelected}\"] > EnumVal`)\n  ).map(\n    enumval =>\n      html`<mwc-list-item\n        value=\"${enumval.textContent?.trim() ?? ''}\"\n        ?selected=${enumval.textContent?.trim() === Val}\n        >${enumval.textContent?.trim()}</mwc-list-item\n      >`\n  );\n\n  const selectValOptionUI = <WizardSelect>(\n    (<Select>e.target).parentElement!.querySelector(\n      'wizard-select[label=\"Val\"]'\n    )!\n  );\n  render(html`${enumVals}`, selectValOptionUI);\n  selectValOptionUI.requestUpdate();\n}\n\nfunction selectBType(\n  e: SelectedEvent,\n  bType: string | null,\n  type: string | null\n): void {\n  const bTypeSelected = (<Select>e.target).selected!.value;\n\n  const typeUI = <Select>(\n    (<Select>e.target).parentElement!.querySelector(\n      'wizard-select[label=\"type\"]'\n    )!\n  );\n  typeUI.disabled = !(bTypeSelected === 'Enum' || bTypeSelected === 'Struct');\n  const enabledItems: ListItem[] = [];\n  Array.from(typeUI.children).forEach(child => {\n    const childItem = <ListItem>child;\n    childItem.disabled = !child.classList.contains(bTypeSelected);\n    childItem.noninteractive = !child.classList.contains(bTypeSelected);\n    childItem.style.display = !child.classList.contains(bTypeSelected)\n      ? 'none'\n      : '';\n    if (!childItem.disabled) enabledItems.push(childItem);\n  });\n  if (type && bType === bTypeSelected) typeUI.value = type;\n  else typeUI.value = enabledItems.length ? enabledItems[0].value : '';\n\n  const selectValOptionUI = <WizardSelect>(\n    (<Select>e.target).parentElement!.querySelector(\n      'wizard-select[label=\"Val\"]'\n    )!\n  );\n  if (bTypeSelected === 'Enum') selectValOptionUI.style.display = '';\n  else selectValOptionUI.style.display = 'none';\n\n  const textfieldValOptionUI = <WizardTextField>(\n    (<Select>e.target).parentElement!.querySelector(\n      'wizard-textfield[label=\"Val\"]'\n    )!\n  );\n  if (bTypeSelected === 'Enum' || bTypeSelected === 'Struct')\n    textfieldValOptionUI.style.display = 'none';\n  else textfieldValOptionUI.style.display = '';\n\n  selectValOptionUI.requestUpdate();\n  textfieldValOptionUI.requestUpdate();\n  typeUI.requestUpdate();\n}\n\nexport function wizardContent(\n  name: string | null,\n  desc: string | null,\n  bType: string,\n  types: Element[],\n  type: string | null,\n  sAddr: string | null,\n  valKind: string | null,\n  valImport: string | null,\n  Val: string | null,\n  data: Element\n): TemplateResult[] {\n  return [\n    html`<wizard-textfield\n      label=\"name\"\n      .maybeValue=${name}\n      helper=\"${get('scl.name')}\"\n      required\n      pattern=\"${patterns.abstractDataAttributeName}\"\n      maxLength=\"${maxLength.abstracDaName}\"\n      dialogInitialFocus\n    >\n      ></wizard-textfield\n    >`,\n    html`<wizard-textfield\n      label=\"desc\"\n      helper=\"${get('scl.desc')}\"\n      .maybeValue=${desc}\n      nullable\n      pattern=\"${patterns.normalizedString}\"\n    ></wizard-textfield>`,\n    html`<wizard-select\n      fixedMenuPosition\n      label=\"bType\"\n      .value=${bType}\n      helper=\"${get('scl.bType')}\"\n      required\n      @selected=${(e: SelectedEvent) => selectBType(e, bType, type)}\n      >${predefinedBasicTypeEnum.map(\n        redefinedBType =>\n          html`<mwc-list-item value=\"${redefinedBType}\"\n            >${redefinedBType}</mwc-list-item\n          >`\n      )}</wizard-select\n    >`,\n    html`<wizard-select\n      label=\"type\"\n      .maybeValue=${type}\n      helper=\"${get('scl.type')}\"\n      fixedMenuPosition\n      @selected=${(e: SelectedEvent) => selectType(e, data, Val)}\n      >${types.map(\n        dataType =>\n          html`<mwc-list-item\n            class=\"${dataType.tagName === 'EnumType' ? 'Enum' : 'Struct'}\"\n            value=${dataType.id}\n            >${dataType.id}</mwc-list-item\n          >`\n      )}</wizard-select\n    >`,\n    html`<wizard-textfield\n      label=\"sAddr\"\n      .maybeValue=${sAddr}\n      helper=\"${get('scl.sAddr')}\"\n      nullable\n      pattern=\"${patterns.normalizedString}\"\n    ></wizard-textfield>`,\n    html`<wizard-select\n      label=\"valKind\"\n      .maybeValue=${valKind}\n      helper=\"${get('scl.valKind')}\"\n      nullable\n      required\n      fixedMenuPosition\n      >${valKindEnum.map(\n        valKindOption =>\n          html`<mwc-list-item value=\"${valKindOption}\"\n            >${valKindOption}</mwc-list-item\n          >`\n      )}</wizard-select\n    >`,\n    html`<wizard-checkbox\n      label=\"valImport\"\n      .maybeValue=${valImport}\n      helper=\"${get('scl.valImport')}\"\n      nullable\n      required\n    ></wizard-checkbox>`,\n    html`<wizard-select\n      label=\"Val\"\n      .maybeValue=${Val}\n      helper=\"${get('scl.Val')}\"\n      nullable\n      >${Array.from(\n        data.querySelectorAll(`EnumType > EnumVal[id=\"${type}\"]`)\n      ).map(\n        enumVal =>\n          html`<mwc-list-item value=\"${enumVal.textContent?.trim() ?? ''}\"\n            >${enumVal.textContent?.trim()}</mwc-list-item\n          >`\n      )}</wizard-select\n    >`,\n    html`<wizard-textfield\n      label=\"Val\"\n      .maybeValue=${Val}\n      helper=\"${get('scl.Val')}\"\n      nullable\n    ></wizard-textfield>`,\n  ];\n}\n\nexport function getValAction(\n  oldVal: Element | null,\n  Val: string | null,\n  abstractda: Element\n): EditorAction {\n  if (oldVal === null) {\n    const element = createElement(abstractda.ownerDocument, 'Val', {});\n    element.textContent = Val;\n    return {\n      new: {\n        parent: abstractda,\n        element,\n        reference: abstractda.firstElementChild,\n      },\n    };\n  }\n\n  if (Val === null)\n    return {\n      old: {\n        parent: abstractda,\n        element: oldVal,\n        reference: oldVal.nextSibling,\n      },\n    };\n\n  const newVal = <Element>oldVal.cloneNode(false);\n  newVal.textContent = Val;\n  return {\n    old: { element: oldVal },\n    new: { element: newVal },\n  };\n}\n"]}