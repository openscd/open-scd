{"version":3,"file":"sld-drawing.js","sourceRoot":"","sources":["../../../src/editors/singlelinediagram/sld-drawing.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  getDescriptionAttribute,\n  getNameAttribute,\n  identity,\n} from '@openscd/open-scd/src/foundation.js';\nimport { getIcon } from '../substation/foundation.js';\nimport {\n  connectivityNodeIcon,\n  editIcon,\n  powerTransformerTwoWindingIcon,\n} from '@openscd/open-scd/src/icons/icons.js';\n\nimport {\n  getRelativeCoordinates,\n  Point,\n  getAbsoluteCoordinates,\n  calculateConnectivityNodeCoordinates,\n} from './foundation.js';\nimport { getOrthogonalPath } from './ortho-connector.js';\n\n/** Default 'grid size' of our SVG */\nexport const SVG_GRID_SIZE = 64;\n\n/** Size of SLC element ConductingEquipment or PowerTransformer */\nexport const EQUIPMENT_SIZE = 50;\n\n/** The size of SLC element ConnectivityNode */\nexport const CNODE_SIZE = 25;\n\n/** Offset of a terminal next to its parent element */\nconst TERMINAL_OFFSET = 6;\n\ntype Direction = 'top' | 'right' | 'bottom' | 'left';\n/** Start and end direction of the route */\n\nexport interface PointDirections {\n  startDirection: Direction;\n  endDirection: Direction;\n}\n\n/**\n * Get the full position of an element (multiplied with an offset for the SVG).\n * It's just a matter of adding all the position up of the element including it's parent(s).\n * @param element - The SCL element to get the position for.\n * @returns A point containing the full x/y position.\n */\nexport function getAbsolutePosition(element: Element): Point {\n  const absoluteCoordinates = getAbsoluteCoordinates(element);\n  return {\n    x:\n      absoluteCoordinates.x! * SVG_GRID_SIZE +\n      (SVG_GRID_SIZE - EQUIPMENT_SIZE) / 2,\n    y:\n      absoluteCoordinates.y! * SVG_GRID_SIZE +\n      (SVG_GRID_SIZE - EQUIPMENT_SIZE) / 2,\n  };\n}\n\n/**\n * Get the full position of an bus bar (multiplied with an offset for the SVG).\n * @param busbar - The SCL element Bay to get the position for.\n * @returns A point containing the full x/y position in px.\n */\nexport function getAbsolutePositionBusBar(busbar: Element): Point {\n  const absoluteCoordinates = getAbsoluteCoordinates(busbar);\n  return {\n    x: absoluteCoordinates.x! * SVG_GRID_SIZE,\n    y: absoluteCoordinates.y! * SVG_GRID_SIZE,\n  };\n}\n\n/**\n * Get the full position of an ConnectivityNode SCL element (multiplied with an offset for the SVG).\n * @param connectivityNode - The SCL element ConnectivityNode to get the position for.\n * @returns A point containing the full x/y position in px.\n */\nexport function getAbsolutePositionConnectivityNode(\n  connectivityNode: Element\n): Point {\n  const absoluteCoordinates =\n    calculateConnectivityNodeCoordinates(connectivityNode);\n  return {\n    x:\n      absoluteCoordinates.x! * SVG_GRID_SIZE + (SVG_GRID_SIZE - CNODE_SIZE) / 2,\n    y:\n      absoluteCoordinates.y! * SVG_GRID_SIZE + (SVG_GRID_SIZE - CNODE_SIZE) / 2,\n  };\n}\n\n/**\n * Calculate the absolute offset of a terminal next to an element.\n * @param parentElementPosition - The position of the parent element of the terminal.\n * @param elementOffset - The offset of the parent element.\n * @param terminalSide - The side of the parent element where the terminal should be placed.\n * @param customTerminalOffset - An optional parameter containing the offset of the terminal next to the parent element.\n * This may vary, for example for Connectivity Nodes.\n *\n * @returns The absolute position of the terminal.\n */\nfunction absoluteOffsetTerminal(\n  parentElementPosition: Point,\n  elementOffset: number,\n  terminalSide: Direction,\n  customTerminalOffset?: number\n): Point {\n  const terminalOffset = customTerminalOffset ?? TERMINAL_OFFSET;\n\n  switch (terminalSide) {\n    case 'top': {\n      const x = parentElementPosition.x;\n      const y = parentElementPosition.y;\n      return {\n        x: x! + elementOffset / 2,\n        y: y! - terminalOffset,\n      };\n    }\n    case 'bottom': {\n      const x = parentElementPosition.x;\n      const y = parentElementPosition.y;\n      return {\n        x: x! + elementOffset / 2,\n        y: y! + (elementOffset + terminalOffset),\n      };\n    }\n    case 'left': {\n      const x = parentElementPosition.x;\n      const y = parentElementPosition.y;\n      return {\n        x: x! - terminalOffset,\n        y: y! + elementOffset / 2,\n      };\n    }\n    case 'right': {\n      const x = parentElementPosition.x;\n      const y = parentElementPosition.y;\n      return {\n        x: x! + (elementOffset + terminalOffset),\n        y: y! + elementOffset / 2,\n      };\n    }\n    default: {\n      return parentElementPosition;\n    }\n  }\n}\n\n/**\n * Get the absolute position in py for a equipments Terminal (based on the TERMINAL_OFFSET).\n * @param equipment - The SCL elements ConductingEquipment or PowerTransformer.\n * @param direction - On which side does the terminal needs to be placed relative to the given point.\n */\nexport function getAbsolutePositionTerminal(\n  equipment: Element,\n  direction: Direction\n): Point {\n  const parentElementPosition = getAbsolutePosition(equipment);\n\n  return absoluteOffsetTerminal(\n    parentElementPosition,\n    EQUIPMENT_SIZE,\n    direction\n  );\n}\n\n/**\n * Get the absolute position in px for a SLC element ConnectivityNode drawing start/end (based on the TERMINAL_OFFSET).\n * @param cNode - The SCL element ConnectivityNode\n * @param direction - The direction of the connector from/to the ConnectivityNode\n */\nexport function getConnectivityNodesDrawingPosition(\n  cNode: Element,\n  direction: Direction\n): Point {\n  const parentElementPosition = getAbsolutePositionConnectivityNode(cNode);\n\n  // Using a custom terminal offset for Connectivity Nodes, so the routes are nicely connected to the Connectivity Nodes.\n  const customTerminalOffset = -(CNODE_SIZE / 3);\n  return absoluteOffsetTerminal(\n    parentElementPosition,\n    CNODE_SIZE,\n    direction,\n    customTerminalOffset\n  );\n}\n\n/**\n * Create a <g> element based on a single XML element.\n * @param element - The element.\n * @returns The <g> element.\n */\nfunction createGroupElement(element: Element): SVGGraphicsElement {\n  const finalElement = document.createElementNS(\n    'http://www.w3.org/2000/svg',\n    'g'\n  );\n  finalElement.setAttribute(\n    'id',\n    typeof identity(element) === 'string'\n      ? <string>identity(element)\n      : 'unidentifiable'\n  );\n  finalElement.setAttribute('type', element.tagName);\n\n  const description = getDescriptionAttribute(element);\n  if (description) finalElement.setAttribute('desc', description);\n\n  // Setting the X and Y coordinates of this <g> element.\n  // It's not actually used, it's more informative.\n  const coordinates = getRelativeCoordinates(element);\n  finalElement.setAttribute('sxy:x', `${coordinates.x}`);\n  finalElement.setAttribute('sxy:y', `${coordinates.y}`);\n\n  return finalElement;\n}\n\n/**\n * Create a Substation <g> element.\n * @param substation - The Substation from the SCL document to use.\n * @returns A Substation <g> element.\n */\nexport function createSubstationElement(substation: Element): SVGElement {\n  return createGroupElement(substation);\n}\n\n/**\n * Create a Voltage Level <g> element.\n * @param voltageLevel - The Voltage Level from the SCL document to use.\n * @returns A Voltage Level <g> element.\n */\nexport function createVoltageLevelElement(voltageLevel: Element): SVGElement {\n  return createGroupElement(voltageLevel);\n}\n\n/**\n * Create a Bay <g> element.\n * @param bayElement - The Bay from the SCL document to use.\n * @returns A Bay <g> element.\n */\nexport function createBayElement(bayElement: Element): SVGGraphicsElement {\n  return createGroupElement(bayElement);\n}\n\n/**\n * Add a Text Element to the top of the Bay\n *\n * @param rootGroup - The Root group containing all groups.\n * @param bayElement - The Bay from the SCL document to use.\n * @param clickAction - The action to execute when the Name of the Bay is being clicked.\n */\nexport function addLabelToBay(\n  rootGroup: SVGElement,\n  bayElement: Element,\n  clickAction?: (event: Event) => void\n): void {\n  rootGroup\n    .querySelectorAll(`g[id=\"${identity(bayElement)}\"]`)\n    .forEach(bayGroup => {\n      const labelGroup = document.createElementNS(\n        'http://www.w3.org/2000/svg',\n        'g'\n      );\n      labelGroup.setAttribute('type', 'BayLabel');\n      if (clickAction) labelGroup.addEventListener('click', clickAction);\n      bayGroup.prepend(labelGroup);\n\n      const bayBox = (<SVGGraphicsElement>bayGroup).getBBox();\n      const text = createTextElement(\n        bayElement.getAttribute('name') || '',\n        { x: bayBox.x, y: bayBox.y - 20 },\n        'medium'\n      );\n      labelGroup.append(text);\n\n      const textBox = text.getBBox();\n      const parsedIcon = new DOMParser().parseFromString(\n        editIcon.strings[0],\n        'application/xml'\n      );\n      parsedIcon.querySelectorAll('circle,path,line').forEach(icon => {\n        icon.setAttribute(\n          'transform',\n          `translate(${textBox.x + textBox.width + 5},${textBox.y}) scale(0.75)`\n        );\n        labelGroup.append(icon);\n      });\n    });\n}\n\n/**\n * Create a basic caption.\n * @param textContent - The content of the caption.\n * @param coordinates - The x and y position in px to locate in drawing pane.\n * @param textSize - The size of the caption\n * @returns The text SVG element.\n */\nexport function createTextElement(\n  textContent: string,\n  coordinates: Point,\n  textSize: string\n): SVGGraphicsElement {\n  const finalElement = document.createElementNS(\n    'http://www.w3.org/2000/svg',\n    'text'\n  );\n\n  finalElement.textContent = textContent;\n  finalElement.setAttribute(\n    'style',\n    `font-family: Roboto, sans-serif; font-weight: 300; font-size: ${textSize}`\n  );\n\n  finalElement.setAttribute('x', `${coordinates.x}`);\n  finalElement.setAttribute('y', `${coordinates.y}`);\n\n  return finalElement;\n}\n\n/**\n * Create a Terminal element.\n * @param terminal - The SCL element Terminal to draw\n * @param sideToDraw - The side of the element the terminal must be drawn on.\n * @param clickAction - The action to execute when the terminal is being clicked.\n * @returns The terminal SVG element.\n */\nexport function createTerminalElement(\n  terminal: Element,\n  sideToDraw: Direction,\n  clickAction?: (event: Event) => void\n): SVGElement {\n  const groupElement = createGroupElement(terminal);\n\n  const terminalIdentity =\n    typeof identity(terminal) === 'string'\n      ? <string>identity(terminal)\n      : 'unidentifiable';\n\n  const parentEquipment = terminal.closest(\n    'ConductingEquipment, PowerTransformer'\n  );\n  const terminalPosition = getAbsolutePositionTerminal(\n    parentEquipment!,\n    sideToDraw\n  );\n\n  const icon = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n  icon.setAttribute('id', `${terminalIdentity}`);\n  icon.setAttribute('cx', `${terminalPosition.x}`);\n  icon.setAttribute('cy', `${terminalPosition.y}`);\n  icon.setAttribute('r', '2');\n  groupElement.appendChild(icon);\n\n  if (clickAction) groupElement.addEventListener('click', clickAction);\n\n  return groupElement;\n}\n\n/**\n * Create a bus bar element.\n * @param busbarElement - The Bus Bar SCL Element.\n * @param busbarLength - The length of the bus bar depending on the x coordinate of the most far out right equipment ()\n * @returns The Bus Bar SVG element.\n */\nexport function createBusBarElement(\n  busbarElement: Element,\n  busbarLength: number\n): SVGGraphicsElement {\n  const groupElement = createGroupElement(busbarElement);\n  // Overwrite the type to make a distinction between Bays and Busbars.\n  groupElement.setAttribute('type', 'Busbar');\n\n  const absolutePosition = getAbsolutePositionBusBar(busbarElement);\n\n  // TODO: Add this to the icons.ts file.\n  const icon = document.createElementNS('http://www.w3.org/2000/svg', 'line');\n  icon.setAttribute('name', getNameAttribute(busbarElement)!);\n  icon.setAttribute('stroke-width', '4');\n  icon.setAttribute('stroke', 'currentColor');\n\n  icon.setAttribute('x1', `${absolutePosition.x}`);\n  icon.setAttribute('y1', `${absolutePosition.y}`);\n  icon.setAttribute('x2', `${busbarLength}`);\n  icon.setAttribute('y2', `${absolutePosition.y}`);\n\n  groupElement.appendChild(icon);\n\n  return groupElement;\n}\n\n/**\n * Add a Text Element to the top of the Bay\n *\n * @param rootGroup - The Root group containing all groups.\n * @param busbarElement - The BusBar from the SCL document to use.\n * @param clickAction - The action to execute when the Name of the BusBar is being clicked.\n */\nexport function addLabelToBusBar(\n  rootGroup: SVGElement,\n  busbarElement: Element,\n  clickAction?: (event: Event) => void\n): void {\n  rootGroup\n    .querySelectorAll(`g[id=\"${identity(busbarElement)}\"]`)\n    .forEach(busbarGroup => {\n      const labelGroup = document.createElementNS(\n        'http://www.w3.org/2000/svg',\n        'g'\n      );\n      labelGroup.setAttribute('type', 'BusbarLabel');\n      if (clickAction) labelGroup.addEventListener('click', clickAction);\n      busbarGroup.prepend(labelGroup);\n\n      const busbarBox = (<SVGGraphicsElement>busbarGroup).getBBox();\n      const text = createTextElement(\n        busbarElement.getAttribute('name') || '',\n        { x: busbarBox.x, y: busbarBox.y - 20 },\n        'medium'\n      );\n      labelGroup.append(text);\n\n      const textBox = text.getBBox();\n      const parsedIcon = new DOMParser().parseFromString(\n        editIcon.strings[0],\n        'application/xml'\n      );\n      parsedIcon.querySelectorAll('circle,path,line').forEach(icon => {\n        icon.setAttribute(\n          'transform',\n          `translate(${textBox.x + textBox.width + 5},${textBox.y}) scale(0.75)`\n        );\n        labelGroup.append(icon);\n      });\n    });\n}\n\n/**\n * Create a Conducting Equipment element.\n * @param equipmentElement - The SCL element ConductingEquipment\n * @param clickAction - The action to execute when the Conducting Equipment is being clicked.\n * @returns The Conducting Equipment SVG element.\n */\nexport function createConductingEquipmentElement(\n  equipmentElement: Element,\n  clickAction?: (event: Event) => void\n): SVGElement {\n  const groupElement = createGroupElement(equipmentElement);\n\n  const absolutePosition = getAbsolutePosition(equipmentElement);\n  const parsedIcon = new DOMParser().parseFromString(\n    getIcon(equipmentElement).strings[0],\n    'application/xml'\n  );\n  parsedIcon.querySelectorAll('circle,path,line').forEach(icon => {\n    icon.setAttribute(\n      'transform',\n      `translate(${absolutePosition.x},${absolutePosition.y}) scale(${\n        EQUIPMENT_SIZE / 25\n      })`\n    );\n    groupElement.appendChild(icon);\n  });\n\n  const text = createTextElement(\n    getNameAttribute(equipmentElement)!,\n    { x: absolutePosition.x! - 15, y: absolutePosition.y! + 30 },\n    'x-small'\n  );\n  groupElement.appendChild(text);\n\n  if (clickAction) groupElement.addEventListener('click', clickAction);\n\n  return groupElement;\n}\n\n/**\n * Create a PowerTransformer element.\n * @param powerTransformerElement - The SCL element PowerTransformer\n * @param clickAction - The action to execute when the Power Transformer is being clicked.\n * @returns The Power Transformer SVG element.\n */\nexport function createPowerTransformerElement(\n  powerTransformerElement: Element,\n  clickAction?: (event: Event) => void\n): SVGElement {\n  const groupElement = createGroupElement(powerTransformerElement);\n\n  const absolutePosition = getAbsolutePosition(powerTransformerElement);\n  const parsedIcon = new DOMParser().parseFromString(\n    powerTransformerTwoWindingIcon.strings[0],\n    'application/xml'\n  );\n  parsedIcon.querySelectorAll('circle,path,line').forEach(icon => {\n    icon.setAttribute(\n      'transform',\n      `translate(${absolutePosition.x},${absolutePosition.y}) scale(${\n        EQUIPMENT_SIZE / 25\n      })`\n    );\n    groupElement.appendChild(icon);\n  });\n\n  const text = createTextElement(\n    getNameAttribute(powerTransformerElement)!,\n    { x: absolutePosition.x! - 15, y: absolutePosition.y! + 30 },\n    'x-small'\n  );\n  groupElement.appendChild(text);\n\n  if (clickAction) groupElement.addEventListener('click', clickAction);\n\n  return groupElement;\n}\n\n/**\n * Create a Connectivity Node element.\n * @param cNodeElement - The SCL element ConnectivityNode\n * @param clickAction - The action to execute when the Terminal is being clicked.\n * @returns The Connectivity Node SVG element.\n */\nexport function createConnectivityNodeElement(\n  cNodeElement: Element,\n  clickAction?: (event: Event) => void\n): SVGElement {\n  const groupElement = createGroupElement(cNodeElement);\n\n  const parsedIcon = new DOMParser().parseFromString(\n    connectivityNodeIcon.strings[0],\n    'application/xml'\n  );\n\n  const absolutePosition = getAbsolutePositionConnectivityNode(cNodeElement);\n  parsedIcon.querySelectorAll('circle').forEach(icon => {\n    icon.setAttribute(\n      'transform',\n      `translate(${absolutePosition.x},${absolutePosition.y})`\n    );\n    groupElement.appendChild(icon);\n  });\n\n  if (clickAction) groupElement.addEventListener('click', clickAction);\n\n  return groupElement;\n}\n\n/**\n * Draw a route from ConnectivityNode to equipments Terminal (ConductingEquipment or PowerTransformer)\n * @param cNodesTerminalPosition - The start position in px of the SCL element ConnectivityNode.\n * @param equipmentsTerminalPosition - The end position in px of the SCL element ConductingEquipment or PowerTransformer.\n * @param svgElementToDrawOn - The SVG Element to draw the route on.\n */\nexport function drawCNodeConnections(\n  cNodesTerminalPosition: Point,\n  equipmentsTerminalPosition: Point,\n  svgElementToDrawOn: SVGElement\n): void {\n  const path = getOrthogonalPath(\n    equipmentsTerminalPosition,\n    cNodesTerminalPosition,\n    SVG_GRID_SIZE\n  );\n\n  const line = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n  let d = '';\n  path.forEach(({ x, y }, index) => {\n    if (index === 0) {\n      d = d + ` M ${x} ${y}`;\n    } else {\n      d = d + ` L ${x} ${y}`;\n    }\n  });\n\n  line.setAttribute('d', d);\n  line.setAttribute('fill', 'transparent');\n  line.setAttribute('stroke', 'currentColor');\n  line.setAttribute('stroke-width', '1');\n\n  // Inserting elements like this works kind of like z-index (not supported in SVG yet),\n  // these elements are placed behind all other elements.\n  // By doing it like this, all other elements are hoverable for example.\n  svgElementToDrawOn.insertAdjacentElement('afterbegin', line);\n}\n\n/**\n * Draw a route from the bus bar to elements terminal position.\n * @param busbarsTerminalPosition - The start position in px the bus bar.\n * @param equipmentsTerminalPosition - The end position in px of the SCL element ConductingEquipment or PowerTransformer.\n * @param svgElementToDrawOn - The SVG Element to draw the route on.\n */\nexport function drawBusBarRoute(\n  busbarsTerminalPosition: Point,\n  equipmentsTerminalPosition: Point,\n  svgElementToDrawOn: SVGElement\n): void {\n  const path = [busbarsTerminalPosition].concat([equipmentsTerminalPosition]);\n\n  const line = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n  let d = '';\n  path.forEach(({ x, y }, index) => {\n    if (index === 0) {\n      d = d + ` M ${x} ${y}`;\n    } else {\n      d = d + ` L ${x} ${y}`;\n    }\n  });\n\n  line.setAttribute('d', d);\n  line.setAttribute('fill', 'transparent');\n  line.setAttribute('stroke', 'currentColor');\n  line.setAttribute('stroke-width', '1.5');\n\n  svgElementToDrawOn.appendChild(line);\n}\n\n/**\n * Small simple algorithm deciding on which direction the route should be drawn\n * for a connection between elements Terminal and ConnectivityNode\n * @param equipment - The SCL element ConductingEquipment or PowerTransformer the route starts from.\n * @param cNode -  The SLC element ConnectivityNode the route ends with.\n * @returns The sides of both points .\n */\nexport function getDirections(\n  equipment: Element,\n  cNode: Element\n): PointDirections {\n  const pointA = getAbsoluteCoordinates(equipment);\n  const pointB = calculateConnectivityNodeCoordinates(cNode);\n\n  if (pointA.y < pointB.y && pointA.x < pointB.x)\n    return { startDirection: 'bottom', endDirection: 'left' };\n\n  if (pointA.y < pointB.y && pointA.x > pointB.x)\n    return { startDirection: 'bottom', endDirection: 'right' };\n\n  if (pointA.y < pointB.y && pointA.x === pointB.x)\n    return { startDirection: 'bottom', endDirection: 'top' };\n\n  if (pointA.y > pointB.y && pointA.x < pointB.x)\n    return { startDirection: 'top', endDirection: 'left' };\n\n  if (pointA.y > pointB.y && pointA.x > pointB.x)\n    return { startDirection: 'top', endDirection: 'right' };\n\n  if (pointA.y > pointB.y && pointA.x === pointB.x)\n    return { startDirection: 'top', endDirection: 'bottom' };\n\n  if (pointA.y === pointB.y && pointA.x > pointB.x)\n    return { startDirection: 'left', endDirection: 'right' };\n\n  if (pointA.y === pointB.y && pointA.x < pointB.x)\n    return { startDirection: 'right', endDirection: 'left' };\n\n  return { startDirection: 'bottom', endDirection: 'top' };\n}\n\n/**\n * Get the name of the parent of given child element.\n * @param childElement - The child element.\n * @returns The name.\n */\nexport function getParentElementName(\n  childElement: Element\n): string | undefined {\n  const parentElement = <Element>childElement.parentElement;\n  return getNameAttribute(parentElement);\n}\n\n/* Calculate length of the busbar that is depending on the most far right equipment\n * @param root - Either the whole SCL file or the voltage level where the bus bar resides\n * @returns - the length of the bus bar\n */\nexport function getBusBarLength(root: Element): number {\n  return (\n    Math.max(\n      ...Array.from(\n        root.querySelectorAll('ConductingEquipment, PowerTransformer')\n      ).map(equipment => getAbsolutePosition(equipment).x!)\n    ) + SVG_GRID_SIZE\n  );\n}\n"]}