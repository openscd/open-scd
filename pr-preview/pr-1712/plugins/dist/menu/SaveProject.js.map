{"version":3,"file":"SaveProject.js","sourceRoot":"","sources":["../../src/menu/SaveProject.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAC;AAEnD,SAAS,SAAS,CAAC,GAAW,EAAE,GAAY;IAC1C,IAAI,SAAS,GAAG,EAAE,EAChB,MAAM,GAAG,EAAE,CAAC;IAEd,IAAI,CAAC,GAAG;QAAE,GAAG,GAAG,IAAI,CAAC;IACrB,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,UAAU,IAAI;QACvC,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC;YAAE,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,GAAI,CAAC,MAAM,CAAC,CAAC;QAChE,SAAS,IAAI,MAAM,GAAG,GAAG,GAAG,IAAI,GAAG,OAAO,CAAC;QAC3C,IAAI,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC;YAAE,MAAM,IAAI,GAAG,CAAC;IACnD,CAAC,CAAC,CAAC;IACH,OAAO,SAAS,CAAC,SAAS,CAAC,CAAC,EAAE,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;AACtD,CAAC;AAED,MAAM,CAAC,OAAO,OAAO,iBAAkB,SAAQ,UAAU;IAIvD,KAAK,CAAC,GAAG;QACP,IAAI,IAAI,CAAC,GAAG,EAAE;YACZ,IAAI,gBAAgB,GAAG,SAAS,CAC9B,IAAI,aAAa,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC,GAAG,CAAC,CAChD,CAAC;YAEF,mDAAmD;YACnD,+EAA+E;YAC/E,gBAAgB,GAAG,gBAAgB,CAAC,UAAU,CAAC,OAAO,CAAC;gBACrD,CAAC,CAAC,gBAAgB;gBAClB,CAAC,CAAC,wCAAwC,GAAG,IAAI,GAAG,gBAAgB,CAAC;YAEvE,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,gBAAgB,CAAC,EAAE;gBACxC,IAAI,EAAE,iBAAiB;aACxB,CAAC,CAAC;YAEH,MAAM,CAAC,GAAG,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;YACtC,CAAC,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC;YAC1B,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YACnC,CAAC,CAAC,OAAO,CAAC,WAAW,GAAG,CAAC,iBAAiB,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAC1E,CAAC,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;YACzB,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YAC7B,CAAC,CAAC,KAAK,EAAE,CAAC;YACV,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YAC7B,UAAU,CAAC;gBACT,GAAG,CAAC,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;YAC9B,CAAC,EAAE,IAAI,CAAC,CAAC;SACV;IACH,CAAC;CACF;AAhCa;IAAX,QAAQ,EAAE;8CAAmB;AAClB;IAAX,QAAQ,EAAE;kDAAkB","sourcesContent":["import { LitElement, property } from 'lit-element';\n\nfunction formatXml(xml: string, tab?: string) {\n  let formatted = '',\n    indent = '';\n\n  if (!tab) tab = '\\t';\n  xml.split(/>\\s*</).forEach(function (node) {\n    if (node.match(/^\\/\\w/)) indent = indent.substring(tab!.length);\n    formatted += indent + '<' + node + '>\\r\\n';\n    if (node.match(/^<?\\w[^>]*[^/]$/)) indent += tab;\n  });\n  return formatted.substring(1, formatted.length - 3);\n}\n\nexport default class SaveProjectPlugin extends LitElement {\n  @property() doc!: XMLDocument;\n  @property() docName!: string;\n\n  async run(): Promise<void> {\n    if (this.doc) {\n      let documentAsString = formatXml(\n        new XMLSerializer().serializeToString(this.doc)\n      );\n\n      // Add XML declaration/prolog if it's been stripped\n      // TODO: This can be removed once the improved OpenSCD core edit API is present\n      documentAsString = documentAsString.startsWith('<?xml')\n        ? documentAsString\n        : '<?xml version=\"1.0\" encoding=\"UTF-8\"?>' + '\\n' + documentAsString;\n\n      const blob = new Blob([documentAsString], {\n        type: 'application/xml',\n      });\n\n      const a = document.createElement('a');\n      a.download = this.docName;\n      a.href = URL.createObjectURL(blob);\n      a.dataset.downloadurl = ['application/xml', a.download, a.href].join(':');\n      a.style.display = 'none';\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      setTimeout(function () {\n        URL.revokeObjectURL(a.href);\n      }, 5000);\n    }\n  }\n}\n"]}