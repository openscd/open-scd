{"version":3,"file":"guess-wizard.js","sourceRoot":"","sources":["../../../src/editors/substation/guess-wizard.ts"],"names":[],"mappings":"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","sourcesContent":["import { html } from 'lit-element';\nimport { get } from 'lit-translate';\n\nimport '@material/mwc-list';\nimport '@material/mwc-list/mwc-check-list-item';\n\nimport { List } from '@material/mwc-list';\nimport { ListItemBase } from '@material/mwc-list/mwc-list-item-base';\n\nimport {\n  compareNames,\n  Wizard,\n  WizardActor,\n  WizardInputElement,\n} from '@openscd/open-scd/src/foundation.js';\n\nimport {\n  createElement,\n} from '@openscd/xml';\n\nimport { EditorAction } from '@openscd/core/foundation/deprecated/editor.js';\n\nlet bayNum = 1;\nlet cbNum = 1;\nlet dsNum = 1;\n\nfunction addLNodes(condEq: Element, cswi: Element): Element {\n  // switchgear ideally is a composition of lnClass CILO,CSWI,XSWI\n  cswi.parentElement\n    ?.querySelectorAll(\n      `LN[lnClass=\"CSWI\"]${\n        cswi.getAttribute('prefix')\n          ? `[prefix=\"${cswi.getAttribute('prefix')}\"]`\n          : ``\n      }${\n        cswi.getAttribute('inst') ? `[inst=\"${cswi.getAttribute('inst')}\"]` : ``\n      },LN[lnClass=\"CILO\"]${\n        cswi.getAttribute('prefix')\n          ? `[prefix=\"${cswi.getAttribute('prefix')}\"]`\n          : ``\n      }${\n        cswi.getAttribute('inst') ? `[inst=\"${cswi.getAttribute('inst')}\"]` : ``\n      },LN[lnClass=\"XCBR\"]${\n        cswi.getAttribute('prefix')\n          ? `[prefix=\"${cswi.getAttribute('prefix')}\"]`\n          : ``\n      }${\n        cswi.getAttribute('inst') ? `[inst=\"${cswi.getAttribute('inst')}\"]` : ``\n      },LN[lnClass=\"XSWI\"]${\n        cswi.getAttribute('prefix')\n          ? `[prefix=\"${cswi.getAttribute('prefix')}\"]`\n          : ``\n      }${\n        cswi.getAttribute('inst') ? `[inst=\"${cswi.getAttribute('inst')}\"]` : ``\n      }`\n    )\n    .forEach(ln => {\n      condEq.appendChild(\n        createElement(cswi.ownerDocument, 'LNode', {\n          iedName:\n            ln.parentElement?.parentElement?.parentElement?.parentElement?.getAttribute(\n              'name'\n            ) ?? null,\n          ldInst: cswi.parentElement?.getAttribute('inst') ?? null,\n          prefix: ln.getAttribute('prefix'),\n          lnClass: ln.getAttribute('lnClass'),\n          lnInst: ln.getAttribute('inst'),\n        })\n      );\n    });\n\n  return condEq;\n}\n\nfunction getSwitchGearType(cswi: Element): string {\n  return cswi.parentElement?.querySelector(\n    `LN[lnClass=\"XCBR\"]${\n      cswi.getAttribute('prefix')\n        ? `[prefix=\"${cswi.getAttribute('prefix')}\"]`\n        : ``\n    }${\n      cswi.getAttribute('inst') ? `[inst=\"${cswi.getAttribute('inst')}\"]` : ``\n    }`\n  )\n    ? 'CBR'\n    : 'DIS';\n}\n\nfunction getSwitchGearName(ln: Element): string {\n  if (ln.getAttribute('prefix') && ln.getAttribute('inst'))\n    return ln.getAttribute('prefix')! + ln.getAttribute('inst');\n\n  if (ln.getAttribute('inst') && getSwitchGearType(ln) === 'CBR')\n    return 'QA' + cbNum++;\n\n  return 'QB' + dsNum++;\n}\n\nfunction isSwitchGear(ln: Element, selectedCtlModel: string[]): boolean {\n  // ctlModel can be configured in IED section.\n  if (\n    Array.from(\n      ln.querySelectorAll('DOI[name=\"Pos\"] > DAI[name=\"ctlModel\"] > Val')\n    ).filter(val => selectedCtlModel.includes(val.innerHTML.trim())).length\n  )\n    return true;\n\n  // ctlModel can be configured as type in DataTypeTemplate section\n  const doc = ln.ownerDocument;\n  return (\n    Array.from(\n      doc.querySelectorAll(\n        `DataTypeTemplates > LNodeType[id=\"${ln.getAttribute(\n          'lnType'\n        )}\"] > DO[name=\"Pos\"]`\n      )\n    )\n      .map(DO => (<Element>DO).getAttribute('type'))\n      .flatMap(doType =>\n        Array.from(\n          doc.querySelectorAll(\n            `DOType[id=\"${doType}\"] > DA[name=\"ctlModel\"] > Val`\n          )\n        )\n      )\n      .filter(val => selectedCtlModel.includes((<Element>val).innerHTML.trim()))\n      .length > 0\n  );\n}\n\nfunction getCSWI(ied: Element): Element[] {\n  return Array.from(\n    ied.querySelectorAll('AccessPoint > Server > LDevice > LN[lnClass=\"CSWI\"]')\n  );\n}\n\nfunction getValidCSWI(ied: Element, selectedCtlModel: string[]): Element[] {\n  if (!ied.parentElement) return [];\n\n  return getCSWI(ied).filter(cswi => isSwitchGear(cswi, selectedCtlModel));\n}\n\nfunction createBayElement(\n  ied: Element,\n  ctlModelList: string[]\n): Element | null {\n  const switchGear = getValidCSWI(ied, ctlModelList);\n  cbNum = 1;\n  dsNum = 1;\n\n  if (switchGear.length) {\n    const bay = createElement(ied.ownerDocument, 'Bay', {\n      name: 'Q' + bayNum++,\n      desc: 'Bay for controller ' + ied.getAttribute('name'),\n    });\n\n    const condEq = switchGear.map(cswi => {\n      return addLNodes(\n        createElement(ied.ownerDocument, 'ConductingEquipment', {\n          name: getSwitchGearName(cswi),\n          type: getSwitchGearType(cswi),\n        }),\n        cswi\n      );\n    });\n\n    condEq.forEach(condEq => bay.appendChild(condEq));\n\n    return bay;\n  }\n  return null;\n}\n\nfunction guessBasedOnCSWI(doc: XMLDocument, substation: Element): WizardActor {\n  return (\n    inputs: WizardInputElement[],\n    wizard: Element,\n    list?: List | null\n  ): EditorAction[] => {\n    const actions: EditorAction[] = [];\n\n    const ctlModelList = (<ListItemBase[]>list!.selected).map(\n      item => item.value\n    );\n\n    const voltageLevel = createElement(doc, 'VoltageLevel', {\n      name: 'E1',\n      desc: 'guessed by OpenSCD',\n      nomFreq: '50.0',\n      numPhases: '3',\n    });\n    const voltage = createElement(doc, 'Voltage', {\n      unit: 'V',\n      multiplier: 'k',\n    });\n    voltage.textContent = '110.00';\n    voltageLevel.appendChild(voltage);\n\n    actions.push({\n      new: { parent: doc.querySelector('SCL')!, element: substation },\n    });\n\n    actions.push({\n      new: {\n        parent: substation,\n        element: voltageLevel,\n      },\n    });\n\n    Array.from(doc.querySelectorAll(':root > IED'))\n      .sort(compareNames)\n      .map(ied => createBayElement(ied, ctlModelList))\n      .forEach(bay => {\n        if (bay) actions.push({ new: { parent: voltageLevel, element: bay } });\n      });\n\n    return actions;\n  };\n}\n\n/** @returns a Wizard for guessing `VoltageLevel` stucture assuming each\n * `LN[lnClass=\"CSWI\"]` represents a bay controller */\nexport function guessVoltageLevel(\n  doc: XMLDocument,\n  substation: Element\n): Wizard {\n  return [\n    {\n      title: get('guess.wizard.title'),\n      primary: {\n        icon: 'play_arrow',\n        label: get('guess.wizard.primary'),\n        action: guessBasedOnCSWI(doc, substation),\n      },\n      content: [\n        html`<p>${get('guess.wizard.description')}</p>`,\n        html`<mwc-list multi id=\"ctlModelList\"\n          ><mwc-check-list-item value=\"status-only\"\n            >status-only</mwc-check-list-item\n          ><mwc-check-list-item value=\"direct-with-normal-security\"\n            >direct-with-normal-security</mwc-check-list-item\n          ><mwc-check-list-item value=\"direct-with-enhanced-security\"\n            >direct-with-enhanced-security</mwc-check-list-item\n          ><mwc-check-list-item value=\"sbo-with-normal-security\"\n            >sbo-with-normal-security</mwc-check-list-item\n          ><mwc-check-list-item selected value=\"sbo-with-enhanced-security\"\n            >sbo-with-enhanced-security</mwc-check-list-item\n          ></mwc-list\n        >`,\n      ],\n    },\n  ];\n}\n"]}