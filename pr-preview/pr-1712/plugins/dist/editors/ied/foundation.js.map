{"version":3,"file":"foundation.js","sourceRoot":"","sources":["../../../src/editors/ied/foundation.ts"],"names":[],"mappings":"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","sourcesContent":["import { LitElement, property } from 'lit-element';\n\nimport {\n  getInstanceAttribute,\n  getNameAttribute,\n} from '@openscd/open-scd/src/foundation.js';\nimport { Nsdoc } from '@openscd/open-scd/src/foundation/nsdoc.js';\nimport { createElement } from '@openscd/xml';\nimport { InsertV2 } from '@openscd/core';\nimport { insertSelectedLNodeType } from '@openenergytools/scl-lib/dist/tDataTypeTemplates/insertSelectedLNodeType.js';\n\n/** Base class for all containers inside the IED Editor. */\nexport class Container extends LitElement {\n  @property()\n  doc!: XMLDocument;\n  @property({ type: Number })\n  editCount = -1;\n\n  @property({ attribute: false })\n  element!: Element;\n\n  @property()\n  nsdoc!: Nsdoc;\n\n  @property()\n  ancestors: Element[] = [];\n\n  constructor() {\n    super();\n\n    this.addEventListener('focus', event => {\n      event.stopPropagation();\n      const pathOfAncestorNames = this.ancestors.map(\n        ancestor => getTitleForElementPath(ancestor)!\n      );\n      pathOfAncestorNames.push(getTitleForElementPath(this.element)!);\n\n      this.dispatchEvent(newFullElementPathEvent(pathOfAncestorNames));\n    });\n\n    this.addEventListener('blur', () => {\n      this.dispatchEvent(\n        newFullElementPathEvent(\n          this.ancestors.map(ancestor => getTitleForElementPath(ancestor)!)\n        )\n      );\n    });\n  }\n}\n\n/**\n * Search for an element with a passed tag-name in the list of ancestors passed.\n * @param ancestors - The list of elements to search in for an LN or LN0 element.\n * @param tagName - The Tag-name of the element to search for.\n * @returns The found element with the tag-name or null if not found.\n */\nexport function findElement(\n  ancestors: Element[],\n  tagName: string\n): Element | null {\n  return ancestors.find(element => element.tagName === tagName) ?? null;\n}\n\n/**\n * Search for the LN0 or LN element in the list of ancestors passed.\n * @param ancestors - The list of elements to search in for an LN or LN0 element.\n * @returns The LN0/LN Element found or null if not found.\n */\nexport function findLogicalNodeElement(ancestors: Element[]): Element | null {\n  let element = findElement(ancestors, 'LN0');\n  if (!element) {\n    element = findElement(ancestors, 'LN');\n  }\n  return element;\n}\n\n/**\n * Find an existing LLN0 LNodeType in the document.\n * @param doc - The XML document to search in.\n * @returns The LLN0 LNodeType element or null if not found.\n */\nexport function findLLN0LNodeType(doc: XMLDocument): Element | null {\n  return doc.querySelector('DataTypeTemplates > LNodeType[lnClass=\"LLN0\"]');\n}\n\n/**\n * Create a minimal LLN0 LNodeType with essential data objects.\n * @param doc - The XML document to create the LNodeType in.\n * @param id - Optional ID for the LNodeType, defaults to 'LLN0_OpenSCD'.\n * @returns Array of InsertV2 operations to create the LNodeType and dependencies.\n */\nexport function createLLN0LNodeType(doc: XMLDocument, id: string): InsertV2[] {\n  const selection = {\n    Beh: {\n      stVal: {\n        on: {},\n        blocked: {},\n        test: {},\n        'test/blocked': {},\n        off: {},\n      },\n      q: {},\n      t: {},\n    },\n  };\n\n  const logicalnode = {\n    class: 'LLN0',\n    id,\n  };\n\n  return insertSelectedLNodeType(doc, selection, logicalnode);\n}\n\n/**\n * Create a basic IED structure with the specified name.\n * @param doc - The XML document to create the IED in.\n * @param iedName - The name for the new IED.\n * @param lnTypeId - The LNodeType ID to use for the LN0.\n * @param manufacturer - Optional manufacturer name, defaults to 'OpenSCD'.\n * @returns The created IED element.\n */\nexport function createIEDStructure(\n  doc: XMLDocument,\n  iedName: string,\n  lnTypeId: string,\n  manufacturer: string = 'OpenSCD'\n): Element {\n  const ied = createElement(doc, 'IED', {\n    name: iedName,\n    manufacturer,\n  });\n\n  const accessPoint = createElement(doc, 'AccessPoint', { name: 'AP1' });\n  ied.appendChild(accessPoint);\n\n  const server = createElement(doc, 'Server', {});\n  accessPoint.appendChild(server);\n\n  const authentication = createElement(doc, 'Authentication', {});\n  server.appendChild(authentication);\n\n  const lDevice = createElement(doc, 'LDevice', { inst: 'LD1' });\n  server.appendChild(lDevice);\n\n  const ln0 = createElement(doc, 'LN0', {\n    lnClass: 'LLN0',\n    inst: '',\n    lnType: lnTypeId,\n  });\n  lDevice.appendChild(ln0);\n\n  return ied;\n}\n\n/**\n * With the passed DO Element retrieve the type attribute and search for the DOType in the DataType Templates section.\n * @param element - The DO Element.\n * @returns The DOType element found in the DataType Templates section or null if it not exists.\n */\nexport function findDOTypeElement(element: Element | null): Element | null {\n  if (element && element.hasAttribute('type')) {\n    const type = element.getAttribute('type');\n    return element\n      .closest('SCL')!\n      .querySelector(`:root > DataTypeTemplates > DOType[id=\"${type}\"]`);\n  }\n  return null;\n}\n\n/**\n * Get the instance element (SDI / DAI) of a DA element (if available)\n * @param parentInstance - The parent instance if available to search in for other instance elements.\n * @param da             - The (B)DA object to search with.\n * @returns The optional SDI / DAI element.\n */\nexport function getInstanceDAElement(\n  parentInstance: Element | null,\n  da: Element\n): Element | null {\n  if (parentInstance) {\n    const daName = getNameAttribute(da);\n    const bType = da.getAttribute('bType');\n    if (bType == 'Struct') {\n      return parentInstance.querySelector(`:scope > SDI[name=\"${daName}\"]`);\n    }\n    return parentInstance.querySelector(`:scope > DAI[name=\"${daName}\"]`);\n  }\n  return null;\n}\n\nexport function getTitleForElementPath(element: Element): string {\n  switch (element.tagName) {\n    case 'LN':\n    case 'LN0': {\n      return element.getAttribute('lnClass')!;\n    }\n    case 'LDevice': {\n      return (getNameAttribute(element) ?? getInstanceAttribute(element))!;\n    }\n    case 'Server': {\n      return 'Server';\n    }\n    default: {\n      return element.getAttribute('name')!;\n    }\n  }\n}\n\n/** @returns  Array of 'Val' elements for a given parent data attribute */\nexport function getValueElements(parent: Element): Element[] {\n  return Array.from(parent.querySelectorAll('Val'));\n}\n\nexport interface FullElementPathDetail {\n  elementNames: string[];\n}\nexport type FullElementPathEvent = CustomEvent<FullElementPathDetail>;\nexport function newFullElementPathEvent(\n  elementNames: string[],\n  eventInitDict?: CustomEventInit<FullElementPathDetail>\n): FullElementPathEvent {\n  return new CustomEvent<FullElementPathDetail>('full-element-path', {\n    bubbles: true,\n    composed: true,\n    ...eventInitDict,\n    detail: { elementNames, ...eventInitDict?.detail },\n  });\n}\n\ndeclare global {\n  interface ElementEventMap {\n    ['full-element-path']: FullElementPathEvent;\n  }\n}\n"]}