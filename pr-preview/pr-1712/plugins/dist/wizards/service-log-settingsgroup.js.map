{"version":3,"file":"service-log-settingsgroup.js","sourceRoot":"","sources":["../../src/wizards/service-log-settingsgroup.ts"],"names":[],"mappings":"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","sourcesContent":["import { TemplateResult } from 'lit-html';\nimport { get } from 'lit-translate';\nimport { WizardPage } from '@openscd/open-scd/src/foundation.js';\n\nimport {\n  createFormDivider,\n  createFormElementsFromInputs,\n  isEmptyObject,\n} from './services.js';\n\ninterface LogSettings {\n  cbName: string | null;\n  datSet: string | null;\n  logEna: string | null;\n  trgOps: string | null;\n  intgPd: string | null;\n}\n\ninterface ConfLogControl {\n  max: string | null;\n}\n\ninterface ClientServices {\n  readLog: string | null;\n}\n\ninterface SGEdit {\n  resvTms: string | null;\n}\n\ninterface ConfSG {\n  resvTms: string | null;\n}\n\ninterface DataSet {\n  max: string | null;\n  maxAttributes: string | null;\n  modify: string | null;\n}\ninterface ContentOptions {\n  logSettings: LogSettings;\n  confLogControl: ConfLogControl;\n  clientServices: ClientServices;\n  sGEdit: SGEdit;\n  confSG: ConfSG;\n  dataSet: DataSet;\n}\n\nexport function createLogSettingsGroupServicesWizardPage(\n  services: Element\n): WizardPage | null {\n  const content: TemplateResult[] | null =\n    createLogSettingsGroupServicesWizard(services);\n\n  return content\n    ? {\n        title: get('wizard.title.edit', { tagName: 'Services' }),\n        content: [...content],\n        element: services,\n      }\n    : null;\n}\n\nfunction createLogSettingsGroupServicesWizard(\n  parent: Element\n): TemplateResult[] | null {\n  const content: ContentOptions = {\n    logSettings: {\n      cbName:\n        parent.querySelector('LogSettings')?.getAttribute('cbName') ?? null,\n      datSet:\n        parent.querySelector('LogSettings')?.getAttribute('datSet') ?? null,\n      logEna:\n        parent.querySelector('LogSettings')?.getAttribute('logEna') ?? null,\n      intgPd:\n        parent.querySelector('LogSettings')?.getAttribute('trgOps') ?? null,\n      trgOps:\n        parent.querySelector('LogSettings')?.getAttribute('intgPd') ?? null,\n    },\n    confLogControl: {\n      max: parent.querySelector('ConfLogControl')?.getAttribute('max') ?? null,\n    },\n    dataSet: {\n      max:\n        parent.querySelector('ConfDataSet')?.getAttribute('max') ??\n        Array.from(\n          parent.parentElement?.querySelectorAll('DataSet') || []\n        ).length.toString(),\n      maxAttributes:\n        parent.querySelector('ConfDataSet')?.getAttribute('maxAttributes') ??\n        null,\n      modify:\n        parent.querySelector('ConfDataSet')?.getAttribute('modify') ?? 'true',\n    },\n    clientServices: {\n      readLog:\n        parent.querySelector('ClientServices')?.getAttribute('readLog') ?? null,\n    },\n    sGEdit: {\n      resvTms:\n        parent\n          .querySelector('SettingGroups > SGEdit')\n          ?.getAttribute('resvTms') || null,\n    },\n    confSG: {\n      resvTms:\n        parent\n          .querySelector('SettingGroups > ConfSG')\n          ?.getAttribute('resvTms') || null,\n    },\n  };\n\n  return isEmptyObject(content)\n    ? null\n    : [\n        createFormDivider('Log Control Configuration'),\n        ...createFormElementsFromInputs([\n          {\n            kind: 'Select',\n            label: 'cbName',\n            maybeValue: content.logSettings.cbName,\n            helper:\n              'Whether log control block name is configurable offline (Conf) or fixed (Fix)',\n            values: ['Conf', 'Fix'],\n            default: 'Fix',\n            nullable: true,\n          },\n          {\n            kind: 'Select',\n            label: 'datSet',\n            maybeValue: content.logSettings.datSet,\n            helper:\n              'Whether log control blocks data set and its structure is configurable offline (Conf), online(Dyn) or is fixed (Fix)',\n            values: ['Dyn', 'Conf', 'Fix'],\n            default: 'Fix',\n            nullable: true,\n          },\n          {\n            kind: 'Select',\n            label: 'logEna',\n            maybeValue: content.logSettings.logEna,\n            helper:\n              'Whether log control blocks attribute logEna is configurable offline (Conf), online (Dyn) or is fixed (Fix)',\n            values: ['Dyn', 'Conf', 'Fix'],\n            default: 'Fix',\n            nullable: true,\n          },\n          {\n            kind: 'Select',\n            label: 'trgOps',\n            maybeValue: content.logSettings.trgOps,\n            helper:\n              'Whether log control blocks trigger options are configurable offline (Conf), online(Dyn) or are fixed (Fix)',\n            values: ['Dyn', 'Conf', 'Fix'],\n            default: 'Fix',\n            nullable: true,\n          },\n          {\n            kind: 'Select',\n            label: 'intgPd',\n            maybeValue: content.logSettings.intgPd,\n            helper:\n              'Whether log control blocks integrity period is configurable offlien (Conf), online (Dyn), or is fixed (Fix)',\n            values: ['Dyn', 'Conf', 'Fix'],\n            default: 'Fix',\n            nullable: true,\n          },\n        ]),\n        createFormDivider('Log Capabilities'),\n        ...createFormElementsFromInputs([\n          {\n            kind: 'TextField',\n            label: 'Max',\n            required: true,\n            helper:\n              'The maximum number of log control blocks instantiable by system configuration tool',\n            maybeValue: content.confLogControl.max,\n          },\n        ]),\n        createFormDivider('Client Capabilities'),\n        ...createFormElementsFromInputs([\n          {\n            kind: 'Checkbox',\n            label: 'read Log',\n            nullable: true,\n            helper:\n              'Whether IED supports services to handle logs as a client (see IEC 61850-7-2 for further information)',\n            maybeValue: content.clientServices.readLog,\n          },\n        ]),\n        createFormDivider('DataSet Configuration'),\n        ...createFormElementsFromInputs([\n          {\n            kind: 'TextField',\n            label: 'Max',\n            nullable: false,\n            helper: 'The maximum allow data sets in this IED',\n            maybeValue: content.dataSet.max,\n          },\n          {\n            kind: 'TextField',\n            label: 'Max attributes',\n            nullable: true,\n            helper: 'The maximum number of FCDA elements per DataSet',\n            maybeValue: content.dataSet.maxAttributes,\n          },\n          {\n            kind: 'Checkbox',\n            label: 'Modify',\n            helper: 'Whether DataSet can be modified by SCT',\n            maybeValue: content.dataSet.modify,\n          },\n        ]),\n        createFormDivider('Setting Group'),\n        ...createFormElementsFromInputs([\n          {\n            kind: 'Checkbox',\n            label: 'SGEdit',\n            nullable: true,\n            helper:\n              'Whether IED allows manipulating editable setting groups online',\n            maybeValue: content.sGEdit.resvTms,\n          },\n          {\n            kind: 'Checkbox',\n            label: 'ConfSG',\n            nullable: true,\n            helper:\n              'Whether IED accepts the system configuration tool to configure the number of setting groups',\n            maybeValue: content.confSG.resvTms,\n          },\n        ]),\n      ];\n}\n"]}