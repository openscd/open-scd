{"version":3,"file":"filtered-list.js","sourceRoot":"","sources":["../src/filtered-list.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  css,\n  customElement,\n  html,\n  property,\n  query,\n  state,\n  TemplateResult,\n  unsafeCSS,\n} from 'lit-element';\nimport { get } from 'lit-translate';\n\nimport '@material/mwc-checkbox';\nimport '@material/mwc-formfield';\nimport '@material/mwc-textfield';\nimport { CheckListItem } from '@material/mwc-list/mwc-check-list-item';\nimport { List } from '@material/mwc-list';\nimport { ListBase } from '@material/mwc-list/mwc-list-base';\nimport { ListItemBase } from '@material/mwc-list/mwc-list-item-base';\nimport { TextField } from '@material/mwc-textfield';\n\nfunction slotItem(item: Element): Element {\n  if (!item.closest('filtered-list') || !item.parentElement) return item;\n  if (item.parentElement instanceof FilteredList) return item;\n  return slotItem(item.parentElement);\n}\n\nfunction hideFiltered(item: ListItemBase, searchText: string): void {\n  const itemInnerText = item.innerText + '\\n';\n  const childInnerText = Array.from(item.children)\n    .map(child => (<HTMLElement>child).innerText)\n    .join('\\n');\n  const value = item.value;\n\n  const filterTarget: string = (\n    itemInnerText +\n    childInnerText +\n    value\n  ).toUpperCase();\n\n  const terms: string[] = searchText\n    .toUpperCase()\n    .replace(/[.+^${}()|[\\]\\\\]/g, '\\\\$&')\n    .trim()\n    .split(/\\s+/g);\n\n  (terms.length === 1 && terms[0] === '') ||\n  terms.every(term => {\n    // regexp escape\n    const reTerm = new RegExp(\n      `*${term}*`.replace(/\\*/g, '.*').replace(/\\?/g, '.{1}'),\n      'i'\n    );\n    return reTerm.test(filterTarget);\n  })\n    ? slotItem(item).classList.remove('hidden')\n    : slotItem(item).classList.add('hidden');\n}\n\n/**\n * A mwc-list with mwc-textfield that filters the list items for given or separated terms\n */\n@customElement('filtered-list')\nexport class FilteredList extends ListBase {\n  /** search mwc-textfield label property */\n  @property({ type: String })\n  searchFieldLabel?: string;\n  /** Whether the check all option (checkbox next to search text field) is activated */\n  @property({ type: Boolean })\n  disableCheckAll = false;\n\n  @state()\n  private get existCheckListItem(): boolean {\n    return this.items.some(item => item instanceof CheckListItem);\n  }\n\n  @state()\n  private get isAllSelected(): boolean {\n    return this.items\n      .filter(item => !item.disabled)\n      .filter(item => item instanceof CheckListItem)\n      .every(checkItem => checkItem.selected);\n  }\n\n  @state()\n  private get isSomeSelected(): boolean {\n    return this.items\n      .filter(item => !item.disabled)\n      .filter(item => item instanceof CheckListItem)\n      .some(checkItem => checkItem.selected);\n  }\n\n  @query('mwc-textfield') searchField!: TextField;\n\n  private onCheckAll(): void {\n    const select = !this.isAllSelected;\n    this.items\n      .filter(item => !item.disabled && !item.classList.contains('hidden'))\n      .forEach(item => (item.selected = select));\n  }\n\n  onFilterInput(): void {\n    Array.from(\n      this.querySelectorAll(\n        'mwc-list-item, mwc-check-list-item, mwc-radio-list-item'\n      )\n    ).forEach(item =>\n      hideFiltered(item as ListItemBase, this.searchField.value)\n    );\n  }\n\n  protected onListItemConnected(e: CustomEvent): void {\n    super.onListItemConnected(e);\n    this.requestUpdate();\n  }\n\n  protected update(\n    changedProperties: Map<string | number | symbol, unknown>\n  ): void {\n    super.update(changedProperties);\n    // regenerate filtering of text\n    this.onFilterInput();\n  }\n\n  constructor() {\n    super();\n    this.addEventListener('selected', () => {\n      this.requestUpdate();\n    });\n  }\n\n  private renderCheckAll(): TemplateResult {\n    return this.existCheckListItem && !this.disableCheckAll\n      ? html`<mwc-formfield class=\"checkall\"\n          ><mwc-checkbox\n            ?indeterminate=${!this.isAllSelected && this.isSomeSelected}\n            ?checked=${this.isAllSelected}\n            @change=${() => {\n              this.onCheckAll();\n            }}\n          ></mwc-checkbox\n        ></mwc-formfield>`\n      : html``;\n  }\n\n  render(): TemplateResult {\n    return html`<div id=\"tfcontainer\">\n        <abbr title=\"${this.searchFieldLabel ?? get('filter')}\"\n          ><mwc-textfield\n            label=\"${this.searchFieldLabel ?? ''}\"\n            iconTrailing=\"search\"\n            outlined\n            @input=${() => this.onFilterInput()}\n          ></mwc-textfield\n        ></abbr>\n        ${this.renderCheckAll()}\n      </div>\n      ${super.render()}`;\n  }\n\n  static styles = css`\n    ${unsafeCSS(List.styles)}\n\n    #tfcontainer {\n      display: flex;\n      flex: auto;\n    }\n\n    ::slotted(.hidden) {\n      display: none;\n    }\n\n    abbr {\n      display: flex;\n      flex: auto;\n      margin: 8px;\n      text-decoration: none;\n      border-bottom: none;\n    }\n\n    mwc-textfield {\n      width: 100%;\n      --mdc-shape-small: 28px;\n    }\n\n    mwc-formfield.checkall {\n      padding-right: 8px;\n    }\n\n    .mdc-list {\n      padding-inline-start: 0px;\n    }\n  `;\n}\n"]}