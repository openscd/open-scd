{"version":3,"file":"smvopts.js","sourceRoot":"","sources":["../../src/wizards/smvopts.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAkB,MAAM,aAAa,CAAC;AACnD,OAAO,EAAE,GAAG,EAAE,MAAM,eAAe,CAAC;AAEpC,OAAO,EAAE,YAAY,EAAE,MAAM,cAAc,CAAC;AAE5C,OAAO,EACL,QAAQ,GAKT,MAAM,qCAAqC,CAAC;AAU7C,MAAM,UAAU,oBAAoB,CAAC,MAAsB;IACzD,OAAO,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,CAC/B,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE,CACf,IAAI,CAAA;iBACO,GAAG;sBACE,KAAK;;kBAET,GAAG,CAAC,OAAO,GAAG,EAAE,CAAC;0BACT,CACvB,CAAC;AACJ,CAAC;AAED,SAAS,mBAAmB,CAAC,OAAgB;IAC3C,OAAO,CAAC,MAA4B,EAAkB,EAAE;QACtD,MAAM,UAAU,GAAkC,EAAE,CAAC;QACrD,MAAM,aAAa,GAAG;YACpB,aAAa;YACb,YAAY;YACZ,SAAS;YACT,UAAU;YACV,eAAe;SAChB,CAAC;QACF,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;YAC1B,UAAU,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,KAAK,GAAG,CAAE,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC;QAEH,IACE,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,OAAO,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;YAEzE,OAAO,EAAE,CAAC;QAEZ,MAAM,UAAU,GAAG,YAAY,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;QACrD,OAAO,CAAC,EAAE,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,GAAG,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,EAAE,CAAC,CAAC;IAC9D,CAAC,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,iBAAiB,CAAC,OAAgB;IAChD,MAAM,CAAC,WAAW,EAAE,UAAU,EAAE,OAAO,EAAE,QAAQ,EAAE,aAAa,CAAC,GAAG;QAClE,aAAa;QACb,YAAY;QACZ,SAAS;QACT,UAAU;QACV,eAAe;KAChB,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,OAAO,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;IAE9C,OAAO;QACL;YACE,KAAK,EAAE,GAAG,CAAC,mBAAmB,EAAE,EAAE,OAAO,EAAE,OAAO,CAAC,OAAO,EAAE,CAAC;YAC7D,OAAO;YACP,OAAO,EAAE;gBACP,IAAI,EAAE,MAAM;gBACZ,KAAK,EAAE,GAAG,CAAC,MAAM,CAAC;gBAClB,MAAM,EAAE,mBAAmB,CAAC,OAAO,CAAC;aACrC;YACD,OAAO,EAAE;gBACP,GAAG,oBAAoB,CAAC;oBACtB,WAAW;oBACX,UAAU;oBACV,OAAO;oBACP,QAAQ;oBACR,aAAa;iBACd,CAAC;aACH;SACF;KACF,CAAC;AACJ,CAAC","sourcesContent":["import { html, TemplateResult } from 'lit-element';\nimport { get } from 'lit-translate';\n\nimport { cloneElement } from '@openscd/xml';\n\nimport {\n  getValue,\n  Wizard,\n  WizardAction,\n  WizardActor,\n  WizardInputElement,\n} from '@openscd/open-scd/src/foundation.js';\n\ninterface ContentOptions {\n  refreshTime: string | null;\n  sampleRate: string | null;\n  dataSet: string | null;\n  security: string | null;\n  synchSourceId: string | null;\n}\n\nexport function contentSmvOptsWizard(option: ContentOptions): TemplateResult[] {\n  return Object.entries(option).map(\n    ([key, value]) =>\n      html`<wizard-checkbox\n        label=\"${key}\"\n        .maybeValue=${value}\n        nullable\n        helper=\"${get(`scl.${key}`)}\"\n      ></wizard-checkbox>`\n  );\n}\n\nfunction updateSmvOptsAction(element: Element): WizardActor {\n  return (inputs: WizardInputElement[]): WizardAction[] => {\n    const attributes: Record<string, string | null> = {};\n    const attributeKeys = [\n      'refreshTime',\n      'sampleRate',\n      'dataSet',\n      'security',\n      'synchSourceId',\n    ];\n    attributeKeys.forEach(key => {\n      attributes[key] = getValue(inputs.find(i => i.label === key)!);\n    });\n\n    if (\n      !attributeKeys.some(key => attributes[key] !== element.getAttribute(key))\n    )\n      return [];\n\n    const newElement = cloneElement(element, attributes);\n    return [{ old: { element }, new: { element: newElement } }];\n  };\n}\n\nexport function editSmvOptsWizard(element: Element): Wizard {\n  const [refreshTime, sampleRate, dataSet, security, synchSourceId] = [\n    'refreshTime',\n    'sampleRate',\n    'dataSet',\n    'security',\n    'synchSourceId',\n  ].map(smvopt => element.getAttribute(smvopt));\n\n  return [\n    {\n      title: get('wizard.title.edit', { tagName: element.tagName }),\n      element,\n      primary: {\n        icon: 'save',\n        label: get('save'),\n        action: updateSmvOptsAction(element),\n      },\n      content: [\n        ...contentSmvOptsWizard({\n          refreshTime,\n          sampleRate,\n          dataSet,\n          security,\n          synchSourceId,\n        }),\n      ],\n    },\n  ];\n}\n"]}