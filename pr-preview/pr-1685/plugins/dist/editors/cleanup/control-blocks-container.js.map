{"version":3,"file":"control-blocks-container.js","sourceRoot":"","sources":["../../../src/editors/cleanup/control-blocks-container.ts"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nimport {\n  customElement,\n  css,\n  html,\n  LitElement,\n  property,\n  TemplateResult,\n  query,\n  queryAll,\n} from 'lit-element';\nimport { classMap } from 'lit-html/directives/class-map';\nimport { get } from 'lit-translate';\n\nimport '@material/mwc-button';\nimport '@material/mwc-icon';\nimport '@material/mwc-icon-button-toggle';\nimport '@material/mwc-list/mwc-check-list-item.js';\nimport '@material/mwc-checkbox';\n\nimport { Button } from '@material/mwc-button';\nimport { Checkbox } from '@material/mwc-checkbox';\nimport { List, MWCListIndex } from '@material/mwc-list';\nimport { ListItem } from '@material/mwc-list/mwc-list-item.js';\n\nimport '@openscd/open-scd/src/filtered-list.js';\n\nimport {\n  identity,\n  isPublic,\n  newSubWizardEvent,\n} from '@openscd/open-scd/src/foundation.js';\nimport { Delete, newActionEvent } from '@openscd/core/foundation/deprecated/editor.js';\nimport { styles } from '../templates/foundation.js';\nimport {\n  controlBlockIcons,\n  getFilterIcon,\n  iconType,\n} from '@openscd/open-scd/src/icons/icons.js';\nimport { editGseControlWizard, getGSE } from '../../wizards/gsecontrol.js';\nimport { editReportControlWizard } from '../../wizards/reportcontrol.js';\nimport {\n  editSampledValueControlWizard,\n  getSMV,\n} from '../../wizards/sampledvaluecontrol.js';\nimport { cleanSCLItems, identitySort } from './foundation.js';\n\ntype controlType =\n  | 'GSEControl'\n  | 'LogControl'\n  | 'SampledValueControl'\n  | 'ReportControl';\n\nconst iconMapping = {\n  GSEControl: <iconType>'gooseIcon',\n  LogControl: <iconType>'logIcon',\n  SampledValueControl: <iconType>'smvIcon',\n  ReportControl: <iconType>'reportIcon',\n};\n\n/**\n * Check whether a control block is instantiated in the Communication section of the SCL file.\n * @param controlBlock - SCL control block element.\n * @returns true or false if a GSE or SMV element exists under the Communication section.\n */\nfunction getCommAddress(controlBlock: Element): Element | null | undefined {\n  if (controlBlock.tagName === 'GSEControl') {\n    return getGSE(controlBlock);\n  } else if (controlBlock.tagName === 'SampledValueControl') {\n    return getSMV(controlBlock);\n  }\n  return null;\n}\n\n/** An editor component for cleaning SCL Control Blocks. */\n@customElement('cleanup-control-blocks')\nexport class CleanupControlBlocks extends LitElement {\n  /** The document being edited as provided to plugins by [[`OpenSCD`]]. */\n  @property({ attribute: false })\n  doc!: XMLDocument;\n\n  @property({ type: Boolean })\n  disableControlClean = false;\n\n  @property({ type: Array })\n  unreferencedControls: Element[] = [];\n\n  @property({ attribute: false })\n  selectedControlItems: MWCListIndex | [] = [];\n\n  @query('.deleteButton')\n  cleanButton!: Button;\n\n  @query('.cleanupList')\n  cleanupList: List | undefined;\n\n  @queryAll('mwc-check-list-item.cleanupListItem')\n  cleanupListItems: ListItem[] | undefined;\n\n  @query('.cleanupAddressCheckbox')\n  cleanupAddressCheckbox: Checkbox | undefined;\n\n  @query('.tGSEControlFilter')\n  cleanupGSEControlFilter!: Button;\n\n  @query('.tSampledValueControlFilter')\n  cleanupSampledValueControlFilter!: Button;\n\n  @query('.tLogControlFilter')\n  cleanupLogControlFilter!: Button;\n\n  @query('.tReportControlFilter')\n  cleanupReportControlFilter!: Button;\n\n  /**\n   * Toggle the class hidden in the unused controls list for use by filter buttons.\n   * @param selectorType - class for selection to toggle the hidden class used by the list.\n   */\n  private toggleHiddenClass(selectorType: string) {\n    this.cleanupList!.querySelectorAll(`.${selectorType}`).forEach(element => {\n      element.classList.toggle('hiddenontypefilter');\n      if (element.hasAttribute('disabled')) element.removeAttribute('disabled');\n      else element.setAttribute('disabled', 'true');\n    });\n  }\n\n  /**\n   * Initial update after container is loaded.\n   */\n  async firstUpdated(): Promise<void> {\n    this.cleanupList?.addEventListener('selected', () => {\n      this.selectedControlItems = this.cleanupList!.index;\n    });\n    this.toggleHiddenClass('tReportControl');\n  }\n\n  /**\n   * Create a button for filtering in the control block cleanup container.\n   * @param controlType - SCL Control Type e.g. GSEControl.\n   * @param initialState - boolean representing whether button is on or off.\n   * @returns html for the icon button.\n   */\n  private renderFilterIconButton(\n    controlType: controlType,\n    initialState = true\n  ): TemplateResult {\n    return html`<mwc-icon-button-toggle\n      slot=\"graphic\"\n      label=\"filter\"\n      ?on=${initialState}\n      class=\"t${controlType}Filter\"\n      @click=\"${(e: MouseEvent) => {\n        e.stopPropagation();\n        this.toggleHiddenClass(`t${controlType}`);\n      }}\"\n      >${getFilterIcon(iconMapping[controlType], true)}\n      ${getFilterIcon(iconMapping[controlType], false)}\n    </mwc-icon-button-toggle> `;\n  }\n\n  /**\n   * Provide list item in the control block cleanup container.\n   * @param controlBlock - an unused SCL ControlBlock element.\n   * @returns html for checklist item.\n   */\n  private renderListItem(controlBlock: Element): TemplateResult {\n    return html`<mwc-check-list-item\n      twoline\n      class=\"${classMap({\n        cleanupListItem: true,\n        tReportControl: controlBlock.tagName === 'ReportControl',\n        tLogControl: controlBlock.tagName === 'LogControl',\n        tGSEControl: controlBlock.tagName === 'GSEControl',\n        tSampledValueControl: controlBlock.tagName === 'SampledValueControl',\n      })}\"\n      value=\"${identity(controlBlock)}\"\n      graphic=\"large\"\n      ><span class=\"unreferencedControl\"\n        >${controlBlock.getAttribute('name')!}\n      </span>\n      <span>\n        <mwc-icon-button\n          label=\"warning\"\n          icon=\"warning_amber\"\n          class=\"cautionItem\"\n          title=\"${get(\n            'cleanup.unreferencedControls.addressDefinitionTooltip'\n          )}\"\n          ?disabled=\"${!(getCommAddress(controlBlock) !== null)}\"\n        >\n        </mwc-icon-button>\n      </span>\n      <span>\n        <mwc-icon-button\n          label=\"Edit\"\n          icon=\"edit\"\n          class=\"editItem\"\n          ?disabled=\"${controlBlock.tagName === 'LogControl'}\"\n          @click=${(e: MouseEvent) => {\n            e.stopPropagation();\n            if (controlBlock.tagName === 'GSEControl') {\n              e.target?.dispatchEvent(\n                newSubWizardEvent(editGseControlWizard(controlBlock))\n              );\n            } else if (controlBlock.tagName === 'ReportControl') {\n              e.target?.dispatchEvent(\n                newSubWizardEvent(editReportControlWizard(controlBlock))\n              );\n            } else if (controlBlock.tagName === 'SampledValueControl') {\n              e.target?.dispatchEvent(\n                newSubWizardEvent(editSampledValueControlWizard(controlBlock))\n              );\n            } else if (controlBlock.tagName === 'LogControl') {\n              // not implemented yet, disabled above\n            }\n          }}\n        ></mwc-icon-button>\n      </span>\n      <span slot=\"secondary\"\n        >${controlBlock.tagName} -\n        ${controlBlock.closest('IED')?.getAttribute('name')}\n        (${controlBlock.closest('IED')?.getAttribute('manufacturer') ??\n        'No manufacturer defined'})\n        -\n        ${controlBlock.closest('IED')?.getAttribute('type') ??\n        'No Type Defined'}</span\n      >\n      <mwc-icon slot=\"graphic\"\n        >${controlBlockIcons[controlBlock.tagName]}</mwc-icon\n      >\n    </mwc-check-list-item>`;\n  }\n\n  /**\n   * Provide delete button the control block cleanup container.\n   * @returns html for the Delete Button of this container.\n   */\n  private renderDeleteButton(): TemplateResult {\n    const sizeSelectedItems = (<Set<number>>this.selectedControlItems).size;\n\n    return html`<mwc-button\n      outlined\n      icon=\"delete\"\n      class=\"deleteButton\"\n      label=\"${get(\n        'cleanup.unreferencedControls.deleteButton'\n      )} (${sizeSelectedItems || '0'})\"\n      ?disabled=${(<Set<number>>this.selectedControlItems).size === 0 ||\n      (Array.isArray(this.selectedControlItems) &&\n        !this.selectedControlItems.length)}\n      @click=${(e: MouseEvent) => {\n        const cleanItems = Array.from(\n          (<Set<number>>this.selectedControlItems).values()\n        ).map(index => this.unreferencedControls[index]);\n        let gseSmvAddressItems: Delete[] = [];\n        if (this.cleanupAddressCheckbox!.checked === true) {\n          // TODO: To be truly complete other elements should also be checked, possibly\n          // including: tServiceSettings, tReportSettings, tGSESettings, tSMVSettings\n          gseSmvAddressItems = cleanSCLItems(\n            cleanItems.map(cb => getCommAddress(cb)!).filter(Boolean)\n          );\n        }\n        const gseSmvLogReportDeleteActions =\n          cleanSCLItems(cleanItems).concat(gseSmvAddressItems);\n        gseSmvLogReportDeleteActions.forEach(deleteAction =>\n          e.target?.dispatchEvent(newActionEvent(deleteAction))\n        );\n        this.cleanupListItems!.forEach(item => {\n          item.selected = false;\n        });\n      }}\n    ></mwc-button>`;\n  }\n\n  /**\n   * Render a user selectable table of unreferenced datasets if any exist, otherwise indicate this is not an issue.\n   * @returns html for table and action button.\n   */\n  private renderUnreferencedControls() {\n    const unreferencedCBs: Element[] = [];\n    // Control Blocks which can have a DataSet reference\n    Array.from(\n      this.doc?.querySelectorAll(\n        'GSEControl, ReportControl, SampledValueControl, LogControl'\n      ) ?? []\n    )\n      .filter(isPublic)\n      .forEach(cb => {\n        const parent = cb.parentElement;\n        const name = cb.getAttribute('datSet');\n        const isReferenced = parent?.querySelector(`DataSet[name=\"${name}\"]`);\n        if (parent && (!name || !isReferenced)) unreferencedCBs.push(cb);\n      });\n    this.unreferencedControls = identitySort(unreferencedCBs);\n    return html`\n      <div>\n        <h1>\n          ${get('cleanup.unreferencedControls.title')}\n          (${unreferencedCBs.length})\n          <abbr slot=\"action\">\n            <mwc-icon-button\n              icon=\"info\"\n              title=\"${get('cleanup.unreferencedControls.tooltip')}\"\n            >\n            </mwc-icon-button>\n          </abbr>\n        </h1>\n        ${this.renderFilterIconButton('LogControl')}\n        ${this.renderFilterIconButton('ReportControl', false)}\n        ${this.renderFilterIconButton('GSEControl')}\n        ${this.renderFilterIconButton('SampledValueControl')}\n        <filtered-list multi class=\"cleanupList\"\n          >${Array.from(unreferencedCBs.map(cb => this.renderListItem(cb)))}\n        </filtered-list>\n      </div>\n      <footer>\n        ${this.renderDeleteButton()}\n        <mwc-formfield\n          class=\"removeFromCommunication\"\n          label=\"${get(\n            'cleanup.unreferencedControls.alsoRemoveFromCommunication'\n          )}\"\n        >\n          <mwc-checkbox\n            checked\n            class=\"cleanupAddressCheckbox\"\n            ?disabled=${(<Set<number>>this.selectedControlItems).size === 0 ||\n            (Array.isArray(this.selectedControlItems) &&\n              !this.selectedControlItems.length)}\n          ></mwc-checkbox\n        ></mwc-formfield>\n      </footer>\n    `;\n  }\n\n  render(): TemplateResult {\n    return html`\n      <section tabindex=\"1\">${this.renderUnreferencedControls()}</section>\n    `;\n  }\n\n  static styles = css`\n    ${styles}\n\n    section {\n      display: flex;\n      flex: 1;\n      flex-direction: column;\n      justify-content: space-between;\n    }\n\n    @media (max-width: 1200px) {\n      footer {\n        flex-direction: row;\n      }\n\n      mwc-check-list-item {\n        overflow: hidden;\n        text-overflow: ellipsis;\n      }\n    }\n\n    .editItem,\n    .cautionItem {\n      --mdc-icon-size: 16px;\n    }\n\n    .editItem {\n      visibility: hidden;\n      opacity: 0;\n    }\n\n    .cleanupListItem:hover .editItem {\n      visibility: visible;\n      opacity: 1;\n      transition: visibility 0s, opacity 0.5s linear;\n    }\n\n    .cautionItem {\n      color: var(--yellow);\n    }\n\n    .cautionItem[disabled],\n    .editItem[disabled] {\n      display: none;\n    }\n\n    .deleteButton {\n      float: right;\n    }\n\n    footer {\n      align-items: center;\n      align-content: center;\n      display: flex;\n      flex-flow: row wrap;\n      flex-direction: row-reverse;\n      justify-content: space-between;\n      margin: 16px;\n    }\n\n    filtered-list {\n      min-height: 20vh;\n      overflow-y: scroll;\n    }\n\n    .tGSEControlFilter[on],\n    .tSampledValueControlFilter[on],\n    .tLogControlFilter[on],\n    .tReportControlFilter[on] {\n      color: var(--secondary);\n      opacity: 1;\n    }\n\n    /* Make sure to type filter here\n    .hidden is set on string filter in filtered-list and must always filter*/\n    .cleanupListItem.hiddenontypefilter:not(.hidden) {\n      display: none;\n    }\n\n    /* filter disabled, Material Design guidelines for opacity */\n    .tGSEControlFilter,\n    .tSampledValueControlFilter,\n    .tLogControlFilter,\n    .tReportControlFilter {\n      opacity: 0.38;\n    }\n  `;\n}\n"]}