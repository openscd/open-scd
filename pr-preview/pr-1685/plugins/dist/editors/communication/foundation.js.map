{"version":3,"file":"foundation.js","sourceRoot":"","sources":["../../../src/editors/communication/foundation.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Returns the first element of type ConnectedAP in the provided element's hierarchy.\r\n * @param element - The reference element to search from\r\n * @returns An element of type ConnectedAP or null\r\n */\r\nexport function getCurrentConnectedAP(element: Element): Element | null {\r\n  return element.closest('ConnectedAP');\r\n}\r\n\r\n/**\r\n * Retrieves all ConnectedAP elements within the same IED as the provided element.\r\n *\r\n * @param element - The reference element to find the current ConnectedAP and its IED.\r\n * @param doc - The XML document containing the SubNetwork and ConnectedAP elements.\r\n * @returns An array of ConnectedAP elements belonging to the same IED as the provided element.\r\n */\r\nexport function getAllConnectedAPsOfSameIED(\r\n  element: Element,\r\n  doc: XMLDocument\r\n): Element[] {\r\n  if (!element || !doc) {\r\n    return [];\r\n  }\r\n\r\n  const currentConnectedAP = getCurrentConnectedAP(element);\r\n  if (!currentConnectedAP) {\r\n    return [];\r\n  }\r\n\r\n  const iedName = currentConnectedAP.getAttribute('iedName');\r\n\r\n  return Array.from(\r\n    doc.querySelectorAll(`SubNetwork > ConnectedAP[iedName=${iedName}`)\r\n  );\r\n}\r\n\r\ntype communicationElementTag = 'GSE' | 'SMV';\r\n\r\nconst controlTagDictionary: { [key in communicationElementTag]: string } = {\r\n  GSE: 'GSEControl',\r\n  SMV: 'SampledValueControl'\r\n};\r\n\r\nexport function canMoveCommunicationElementToConnectedAP(\r\n  communicationElement: Element,\r\n  connectedAP: Element,\r\n  doc: XMLDocument\r\n): boolean {\r\n  const currentConnectedAP = getCurrentConnectedAP(communicationElement);\r\n\r\n  if (!currentConnectedAP || currentConnectedAP === connectedAP) {\r\n    return false;\r\n  }\r\n\r\n  const apName = currentConnectedAP.getAttribute('apName');\r\n  const iedName = currentConnectedAP.getAttribute('iedName');\r\n\r\n  if (!apName || !iedName) {\r\n    return false;\r\n  }\r\n\r\n  const ied = doc.querySelector(`IED[name=${iedName}]`);\r\n\r\n  if (!ied) {\r\n    return false;\r\n  }\r\n\r\n  const targetApName = connectedAP.getAttribute('apName');\r\n  const targetAp = ied.querySelector(`:scope > AccessPoint[name=${targetApName}]`);\r\n\r\n  if (!targetAp || !targetApName) {\r\n    return false;\r\n  }\r\n\r\n  const server = queryServer(ied, targetApName);\r\n  if (!server) {\r\n    return false;\r\n  }\r\n\r\n  const ldInst = communicationElement.getAttribute('ldInst');\r\n  const cbName = communicationElement.getAttribute('cbName');\r\n  const controlTag = controlTagDictionary[communicationElement.tagName as communicationElementTag];\r\n\r\n  const controlElement = server.querySelector(`:scope > LDevice[inst=${ldInst}] ${controlTag}[name=${cbName}]`);\r\n  const serverHasControl = controlElement !== null;\r\n\r\n  return serverHasControl;\r\n}\r\n\r\nfunction queryServer(ied: Element, apName: string): Element | null {\r\n  const accessPoint = ied.querySelector(`AccessPoint[name=${apName}]`);\r\n  if (!accessPoint) {\r\n    return null;\r\n  }\r\n\r\n  const server = accessPoint.querySelector('Server');\r\n  if (server) {\r\n    return server;\r\n  }\r\n\r\n  const serverAt = accessPoint.querySelector('ServerAt');\r\n  const serverApName = serverAt?.getAttribute('apName');\r\n  if (!serverApName) {\r\n    return null;\r\n  }\r\n\r\n  const accessPointWithServer = ied.querySelector(`AccessPoint[name=${serverApName}]`);\r\n\r\n  return accessPointWithServer?.querySelector('Server') ?? null;\r\n}\r\n"]}