{"version":3,"file":"transformerWinding.js","sourceRoot":"","sources":["../../src/wizards/transformerWinding.ts"],"names":[],"mappings":"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","sourcesContent":["import { html, TemplateResult } from 'lit-element';\nimport { get } from 'lit-translate';\n\nimport {\n  cloneElement,\n  createElement,\n  getChildElementsByTagName,\n} from '@openscd/xml';\n\nimport {\n  getValue,\n  Wizard,\n  WizardActor,\n  WizardInputElement,\n} from '@openscd/open-scd/src/foundation.js';\nimport { SimpleAction } from '@openscd/core/foundation/deprecated/editor';\n\nfunction createTransformerWindingAction(parent: Element): WizardActor {\n  return (inputs: WizardInputElement[]) => {\n    const transformerWindingAttrs: Record<string, string | null> = {};\n    const transformerWindingKeys = ['name', 'desc', 'type', 'virtual'];\n    transformerWindingKeys.forEach(key => {\n      transformerWindingAttrs[key] = getValue(\n        inputs.find(i => i.label === key)!\n      );\n    });\n\n    const transformerWinding = createElement(\n      parent.ownerDocument,\n      'TransformerWinding',\n      transformerWindingAttrs\n    );\n\n    return [{ new: { parent, element: transformerWinding } }];\n  };\n}\n\nexport function createTransformerWindingWizard(parent: Element): Wizard {\n  const name = '';\n  const desc = null;\n  const type = null;\n  const virtual = null;\n  const reservedNames = Array.from(\n    parent.querySelectorAll('TransformerWinding')\n  ).map(TransformerWinding => TransformerWinding.getAttribute('name')!);\n\n  return [\n    {\n      title: get('wizard.title.add', { tagName: 'TransformerWinding' }),\n      primary: {\n        icon: 'save',\n        label: get('save'),\n        action: createTransformerWindingAction(parent),\n      },\n      content: [\n        ...contentTransformerWindingWizard({\n          name,\n          desc,\n          type,\n          virtual,\n          reservedNames,\n        }),\n      ],\n    },\n  ];\n}\n\nfunction updateTransformerWindingAction(element: Element): WizardActor {\n  return (inputs: WizardInputElement[]): SimpleAction[] => {\n    const transformerWindingAttrs: Record<string, string | null> = {};\n    const transformerWindingKeys = ['name', 'desc', 'type', 'virtual'];\n    transformerWindingKeys.forEach(key => {\n      transformerWindingAttrs[key] = getValue(\n        inputs.find(i => i.label === key)!\n      );\n    });\n\n    if (\n      transformerWindingKeys.some(\n        key => transformerWindingAttrs[key] !== element.getAttribute(key)\n      )\n    ) {\n      const newElement = cloneElement(element, transformerWindingAttrs);\n      return [\n        {\n          old: { element },\n          new: { element: newElement },\n        },\n      ];\n    }\n    return [];\n  };\n}\n\ninterface ContentOptions {\n  name: string | null;\n  desc: string | null;\n  type: string | null;\n  virtual: string | null;\n  reservedNames: string[];\n}\n\nexport function contentTransformerWindingWizard(\n  content: ContentOptions\n): TemplateResult[] {\n  return [\n    html`<wizard-textfield\n      label=\"name\"\n      .maybeValue=${content.name}\n      helper=\"${get('scl.name')}\"\n      required\n      validationMessage=\"${get('textfield.required')}\"\n      .reservedValues=${content.reservedNames}\n      dialogInitialFocus\n    ></wizard-textfield>`,\n    html`<wizard-textfield\n      label=\"desc\"\n      .maybeValue=${content.desc}\n      nullable\n      helper=\"${get('scl.desc')}\"\n    ></wizard-textfield>`,\n    html`<wizard-textfield\n      label=\"type\"\n      .maybeValue=${content.type}\n      disabled\n      helper=\"${get('scl.type')}\"\n    ></wizard-textfield>`,\n    html`<wizard-checkbox\n      label=\"virtual\"\n      .maybeValue=${content.virtual}\n      helper=\"${get('scl.virtual')}\"\n      nullable\n    ></wizard-checkbox>`,\n  ];\n}\n\nexport function editTransformerWindingWizard(element: Element): Wizard {\n  const name = element.getAttribute('name');\n  const desc = element.getAttribute('desc');\n  const type = element.getAttribute('type');\n  const virtual = element.getAttribute('virtual');\n  const reservedNames: string[] = getChildElementsByTagName(\n    element.parentElement!,\n    'TransformerWinding'\n  )\n    .filter(sibling => sibling !== element)\n    .map(sibling => sibling.getAttribute('name')!);\n\n  return [\n    {\n      title: get('wizard.title.edit', { tagName: 'TransformerWinding' }),\n      primary: {\n        icon: 'save',\n        label: get('save'),\n        action: updateTransformerWindingAction(element),\n      },\n      content: [\n        ...contentTransformerWindingWizard({\n          name,\n          desc,\n          type,\n          virtual,\n          reservedNames,\n        }),\n      ],\n    },\n  ];\n}\n"]}