{"version":3,"file":"private.js","sourceRoot":"","sources":["../../../../src/editors/protocol104/foundation/private.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,MAAM,kCAAkC,CAAC;AAEjE,MAAM,CAAC,MAAM,oBAAoB,GAAG,iBAAiB,CAAC;AACtD,MAAM,CAAC,MAAM,eAAe,GAC1B,mDAAmD,CAAC;AACtD,MAAM,CAAC,MAAM,mBAAmB,GAAG,iBAAiB,CAAC;AAErD;;;;;GAKG;AACH,MAAM,UAAU,+BAA+B,CAAC,QAAkB;IAChE,MAAM,WAAW,GAAG,QAAQ,CAAC,iBAAkB,CAAC;IAChD,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,QAAQ,GAAG,mBAAmB,CAAC,EAAE;QAC7D,WAAW,CAAC,cAAc,CACxB,+BAA+B,EAC/B,QAAQ,GAAG,mBAAmB,EAC9B,eAAe,CAChB,CAAC;KACH;AACH,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAU,iBAAiB,CAAC,UAAmB;IACnD,OAAO,UAAU,CAAC,aAAa,CAAC,iBAAiB,oBAAoB,IAAI,CAAC,CAAC;AAC7E,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAU,oBAAoB,CAAC,QAAkB;IACrD,MAAM,cAAc,GAAG,QAAQ,CAAC,eAAe,CAAC,aAAa,EAAE,SAAS,CAAC,CAAC;IAC1E,cAAc,CAAC,YAAY,CAAC,MAAM,EAAE,oBAAoB,CAAC,CAAC;IAC1D,OAAO,cAAc,CAAC;AACxB,CAAC;AAED;;;;;;GAMG;AACH,MAAM,UAAU,oBAAoB,CAAC,QAAkB,EAAE,EAAU;IACjE,MAAM,cAAc,GAAG,QAAQ,CAAC,eAAe,CAAC,eAAe,EAAE,SAAS,CAAC,CAAC;IAC5E,cAAc,CAAC,YAAY,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;IACtC,OAAO,cAAc,CAAC;AACxB,CAAC","sourcesContent":["import { SCL_NAMESPACE } from '@openscd/open-scd/src/schemas.js';\n\nexport const PROTOCOL_104_PRIVATE = 'IEC_60870_5_104';\nexport const PROTOCOL_104_NS =\n  'http://www.iec.ch/61850-80-1/2007/IEC_60870-5-104';\nexport const PROTOCOL_104_PREFIX = 'IEC_60870_5_104';\n\n/**\n * Will add the namespace of the 104 Protocol to the Root Element of the Document (SCL) as prefix to\n * be used with all 104 elements (Address).\n *\n * @param document - The Owner Document used to registered the namespace.\n */\nexport function addPrefixAndNamespaceToDocument(document: Document): void {\n  const rootElement = document.firstElementChild!;\n  if (!rootElement.hasAttribute('xmlns:' + PROTOCOL_104_PREFIX)) {\n    rootElement.setAttributeNS(\n      'http://www.w3.org/2000/xmlns/',\n      'xmlns:' + PROTOCOL_104_PREFIX,\n      PROTOCOL_104_NS\n    );\n  }\n}\n\n/**\n * Get the SCL Private Element with the type set to the 104 Protocol.\n *\n * @param daiElement - The DAI Element to search for the 104 Private Element.\n * @returns The found Private Element or null if not there.\n */\nexport function getPrivateElement(daiElement: Element): Element | null {\n  return daiElement.querySelector(`Private[type=\"${PROTOCOL_104_PRIVATE}\"]`);\n}\n\n/**\n * Create an SCL Private Element with the type set to the 104 Protocol.\n *\n * @param document - The Owner Document used to create the new Private Element with.\n * @returns The created Private Element, <b>not</b> yet added to the DAI Element.\n */\nexport function createPrivateElement(document: Document): Element {\n  const privateElement = document.createElementNS(SCL_NAMESPACE, 'Private');\n  privateElement.setAttribute('type', PROTOCOL_104_PRIVATE);\n  return privateElement;\n}\n\n/**\n * Create a 104 Address element which can be added to the Private element.\n * The attribute 'ti' will also be set to value passed.\n *\n * @param document - The Owner Document used to create the new Address Element with.\n * @param ti       - The value for the attribute 'ti'.\n */\nexport function createPrivateAddress(document: Document, ti: string): Element {\n  const addressElement = document.createElementNS(PROTOCOL_104_NS, 'Address');\n  addressElement.setAttribute('ti', ti);\n  return addressElement;\n}\n"]}