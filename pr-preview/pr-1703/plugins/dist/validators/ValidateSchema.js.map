{"version":3,"file":"ValidateSchema.js","sourceRoot":"","sources":["../../src/validators/ValidateSchema.ts"],"names":[],"mappings":"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","sourcesContent":["import { LitElement, property } from 'lit-element';\nimport { get } from 'lit-translate';\n\nimport {\n  newIssueEvent,\n  newLogEvent,\n} from '@openscd/core/foundation/deprecated/history.js';\n\nimport {\n  getSchema,\n  isLoadSchemaResult,\n  isValidationError,\n  isValidationResult,\n  ValidationResult,\n  Validator,\n  WorkerMessage,\n} from '@openscd/open-scd/src/schemas.js';\n\nconst validators: Partial<Record<string, Validator>> = {};\n\nexport default class ValidateSchema extends LitElement {\n  @property()\n  doc!: XMLDocument;\n\n  @property()\n  docName!: string;\n\n  @property()\n  pluginId!: string;\n\n  private async getValidator(xsd: string, xsdName: string): Promise<Validator> {\n    if (!window.Worker) throw new Error(get('validator.schema.fatal'));\n    if (validators[xsdName]) return validators[xsdName]!;\n\n    const worker: Worker = new Worker('public/js/worker.js');\n\n    async function validate(\n      xml: string,\n      xmlName: string\n    ): Promise<ValidationResult> {\n      return new Promise(resolve => {\n        worker.addEventListener('message', (e: MessageEvent<WorkerMessage>) => {\n          if (isValidationResult(e.data) && e.data.file === xmlName)\n            resolve(e.data);\n        });\n        worker.postMessage({ content: xml, name: xmlName });\n      });\n    }\n\n    validators[xsdName] = validate;\n\n    return new Promise((resolve, reject) => {\n      worker.addEventListener('message', (e: MessageEvent<WorkerMessage>) => {\n        if (isLoadSchemaResult(e.data)) {\n          if (e.data.loaded) resolve(validate);\n          else reject(get('validator.schema.loadEror', { name: e.data.file }));\n        } else if (isValidationError(e.data)) {\n          const parts = e.data.message.split(': ', 2);\n          const description = parts[1] ? parts[1] : parts[0];\n          const qualifiedTag = parts[1] ? ' (' + parts[0] + ')' : '';\n          this.dispatchEvent(\n            newIssueEvent({\n              title: description,\n              validatorId: this.pluginId,\n              message:\n                e.data.file +\n                ':' +\n                e.data.line +\n                ' ' +\n                e.data.node +\n                ' ' +\n                e.data.part +\n                qualifiedTag,\n            })\n          );\n        } else if (!isValidationResult(e.data)) {\n          this.dispatchEvent(\n            newLogEvent({\n              title: get('validator.schema.fatal'),\n              kind: 'error',\n              message: e.data,\n            })\n          );\n        }\n      });\n      worker.postMessage({ content: xsd, name: xsdName });\n    });\n  }\n\n  async validate(): Promise<void> {\n    const fileName = this.docName;\n    let version = '2007';\n    let revision = 'B';\n    let release = '1';\n\n    if (this.doc.documentElement)\n      [version, revision, release] = [\n        this.doc.documentElement.getAttribute('version') ?? '',\n        this.doc.documentElement.getAttribute('revision') ?? '',\n        this.doc.documentElement.getAttribute('release') ?? '',\n      ];\n    const result = await this.getValidator(\n      getSchema(version, revision, release),\n      'SCL' + version + revision + release + '.xsd'\n    ).then(validator =>\n      validator(new XMLSerializer().serializeToString(this.doc), fileName)\n    );\n\n    if (!result.valid) {\n      this.dispatchEvent(\n        newLogEvent({\n          kind: 'warning',\n          title: get('validator.schema.invalid', { name: result.file }),\n        })\n      );\n      return;\n    }\n\n    this.dispatchEvent(\n      newLogEvent({\n        kind: 'info',\n        title: get('validator.schema.valid', { name: result.file }),\n      })\n    );\n    this.dispatchEvent(\n      newIssueEvent({\n        validatorId: this.pluginId,\n        title: get('validator.schema.valid', { name: result.file }),\n      })\n    );\n  }\n}\n"]}