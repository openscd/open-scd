{"version":3,"file":"commmap-wizards.js","sourceRoot":"","sources":["../../src/wizards/commmap-wizards.ts"],"names":[],"mappings":"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","sourcesContent":["import { html } from 'lit-element';\nimport { get } from 'lit-translate';\n\nimport '@material/mwc-icon';\nimport '@material/mwc-list/mwc-list-item';\nimport { SingleSelectedEvent } from '@material/mwc-list/mwc-list-foundation';\n\nimport '@openscd/open-scd/src/filtered-list.js';\nimport {\n  find,\n  findControlBlocks,\n  identity,\n  isPublic,\n  newWizardEvent,\n  Wizard,\n  WizardActor,\n} from '@openscd/open-scd/src/foundation.js';\nimport { selectClientLNsWizard } from './clientln.js';\nimport { selectExtRefsWizard } from './controlwithiedname.js';\nimport { controlBlockIcons } from '@openscd/open-scd/src/icons/icons.js';\n\nexport function openCommunicationMappingWizard(\n  root: XMLDocument | Element\n): WizardActor {\n  return () => [() => communicationMappingWizard(root)];\n}\n\nexport function getSinkReferences(root: Document | Element): Element[] {\n  if (root instanceof Element && root.tagName === 'IED')\n    return Array.from(root.ownerDocument.getElementsByTagName('ClientLN'))\n      .filter(isPublic)\n      .filter(\n        clientLn =>\n          clientLn.getAttribute('iedName') === root.getAttribute('name') ||\n          clientLn.closest('IED') === root\n      );\n\n  return Array.from(root.getElementsByTagName('ClientLN')).filter(isPublic);\n}\n\nexport function getSourceReferences(root: Document | Element): Element[] {\n  if (root instanceof Element && root.tagName === 'IED')\n    return Array.from(root.ownerDocument.getElementsByTagName('ExtRef'))\n      .filter(isPublic)\n      .filter(\n        extRef =>\n          extRef.getAttribute('iedName') === root.getAttribute('name') ||\n          (extRef.closest('IED') === root && extRef.getAttribute('iedName'))\n      );\n\n  return Array.from(root.getElementsByTagName('ExtRef'))\n    .filter(isPublic)\n    .filter(element => element.getAttribute('iedName'));\n}\n\nexport function communicationMappingWizard(\n  element: XMLDocument | Element\n): Wizard {\n  const ownerDocument =\n    element instanceof XMLDocument ? element : element.ownerDocument;\n\n  const connections = new Map<string, Element[]>();\n  const sourceRefs = getSourceReferences(element);\n  const sinkRefs = getSinkReferences(element);\n\n  sinkRefs.forEach(element => {\n    const controlBlock = element.parentElement!.parentElement!;\n    const iedName = element.getAttribute('iedName');\n    const key =\n      identity(controlBlock) + ' | ' + controlBlock.tagName + ' | ' + iedName;\n    if (!connections.has(key)) connections.set(key, []);\n    connections.get(key)?.push(element);\n  });\n  sourceRefs.forEach(element => {\n    const iedName = element.closest('IED')?.getAttribute('name') ?? '';\n    const controlBlocks = findControlBlocks(element);\n    controlBlocks.forEach(controlBlock => {\n      const key =\n        identity(controlBlock) + ' | ' + controlBlock.tagName + ' | ' + iedName;\n      if (!connections.has(key)) connections.set(key, []);\n      connections.get(key)?.push(element);\n    });\n  });\n\n  return [\n    {\n      title: get('commmap.title'),\n      content: [\n        html`<filtered-list\n          >${Array.from(connections.keys()).map(key => {\n            const elements = connections.get(key)!;\n            const [cbId, cbTag, sinkIED] = key.split(' | ');\n            const cbElement = find(ownerDocument, cbTag, cbId);\n            const [_, sourceIED, controlBlock] = cbId.match(/^(.+)>>(.*)$/)!;\n\n            return html`<mwc-list-item\n              twoline\n              graphic=\"icon\"\n              hasMeta\n              @click=\"${(evt: SingleSelectedEvent) => {\n                evt.target!.dispatchEvent(\n                  newWizardEvent(\n                    cbTag === 'ReportControl'\n                      ? selectClientLNsWizard(elements, element)\n                      : selectExtRefsWizard(elements, cbElement, element)\n                  )\n                );\n                evt.target!.dispatchEvent(newWizardEvent());\n              }}\"\n            >\n              <span\n                >${sourceIED}\n                <mwc-icon style=\"--mdc-icon-size: 1em;\">trending_flat</mwc-icon>\n                ${sinkIED}</span\n              >\n              <span slot=\"secondary\">${controlBlock}</span>\n              <span slot=\"meta\" style=\"padding-left: 10px\"\n                >${connections.get(key)!.length}</span\n              >\n              <mwc-icon slot=\"graphic\">${controlBlockIcons[cbTag]}</mwc-icon>\n            </mwc-list-item>`;\n          })}</filtered-list\n        >`,\n      ],\n    },\n  ];\n}\n"]}