{"version":3,"file":"oscd-filter-button.js","sourceRoot":"","sources":["../src/oscd-filter-button.ts"],"names":[],"mappings":";AAAA,OAAO,EACL,GAAG,EACH,aAAa,EACb,IAAI,EACJ,QAAQ,EACR,KAAK,EAEL,SAAS,GACV,MAAM,aAAa,CAAC;AACrB,OAAO,EAAE,GAAG,EAAE,MAAM,eAAe,CAAC;AAEpC,OAAO,2BAA2B,CAAC;AACnC,OAAO,sBAAsB,CAAC;AAE9B,OAAO,oBAAoB,CAAC;AAE5B,OAAO,EAAE,YAAY,EAAE,MAAM,oBAAoB,CAAC;AAGlD;;GAEG;AAEI,IAAM,YAAY,GAAlB,MAAM,YAAa,SAAQ,YAAY;IAAvC;;QAML,aAAQ,GAAG,KAAK,CAAC;IAuDnB,CAAC;IAlDS,UAAU;QAChB,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;IAC3B,CAAC;IAEO,SAAS;QACf,MAAM,aAAa,GAAa,EAAE,CAAC;QACnC,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,IAAI,IAAI,CAAC,QAAQ,YAAY,KAAK,EAAE;gBAClC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;aAC/D;iBAAM;gBACL,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;aACzC;YACD,IAAI,CAAC,aAAa,CAAC,4BAA4B,CAAC,aAAa,CAAC,CAAC,CAAC;SACjE;IACH,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAA;;gBAEC,IAAI,CAAC,IAAI;kBACP,IAAI,CAAC,UAAU;qBACZ,IAAI,CAAC,QAAQ;;;;;;mBAMf,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC;;oBAExC,GAAG,EAAE,CAAC,IAAI,CAAC,SAAS,EAAE;;UAEhC,KAAK,CAAC,MAAM,EAAE;;YAEZ,GAAG,CAAC,OAAO,CAAC;;;KAGnB,CAAC;IACJ,CAAC;;AAEM,mBAAM,GAAG,GAAG,CAAA;MACf,SAAS,CAAC,YAAY,CAAC,MAAM,CAAC;;;;;;;;;GASjC,CAAC;AA1DF;IADC,QAAQ,EAAE;4CACsB;AAEjC;IADC,QAAQ,EAAE;0CACG;AAEd;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;8CACX;AAGjB;IADC,KAAK,CAAC,eAAe,CAAC;kDACO;AATnB,YAAY;IADxB,aAAa,CAAC,oBAAoB,CAAC;GACvB,YAAY,CA6DxB;SA7DY,YAAY;AAmEzB,SAAS,4BAA4B,CACnC,aAAuB,EACvB,aAA2D;IAE3D,OAAO,IAAI,WAAW,CAA6B,wBAAwB,EAAE;QAC3E,OAAO,EAAE,IAAI;QACb,QAAQ,EAAE,IAAI;QACd,GAAG,aAAa;QAChB,MAAM,EAAE,EAAE,aAAa,EAAE,GAAG,aAAa,EAAE,MAAM,EAAE;KACpD,CAAC,CAAC;AACL,CAAC","sourcesContent":["import {\n  css,\n  customElement,\n  html,\n  property,\n  query,\n  TemplateResult,\n  unsafeCSS,\n} from 'lit-element';\nimport { get } from 'lit-translate';\n\nimport '@material/mwc-icon-button';\nimport '@material/mwc-dialog';\n\nimport './filtered-list.js';\n\nimport { FilteredList } from './filtered-list.js';\nimport { Dialog } from '@material/mwc-dialog';\n\n/**\n * A mwc-list with mwc-textfield that filters the list items for given or separated terms\n */\n@customElement('oscd-filter-button')\nexport class FilterButton extends FilteredList {\n  @property()\n  header!: TemplateResult | string;\n  @property()\n  icon!: string;\n  @property({ type: Boolean })\n  disabled = false;\n\n  @query('#filterDialog')\n  private filterDialog!: Dialog;\n\n  private toggleList(): void {\n    this.filterDialog.show();\n  }\n\n  private onClosing(): void {\n    const selectedItems: string[] = [];\n    if (this.selected) {\n      if (this.selected instanceof Array) {\n        this.selected.forEach(item => selectedItems.push(item.value));\n      } else {\n        selectedItems.push(this.selected.value);\n      }\n      this.dispatchEvent(newSelectedItemsChangedEvent(selectedItems));\n    }\n  }\n\n  render(): TemplateResult {\n    return html`\n      <mwc-icon-button\n        icon=\"${this.icon}\"\n        @click=\"${this.toggleList}\"\n        ?disabled=\"${this.disabled}\"\n      >\n        <slot name=\"icon\"></slot>\n      </mwc-icon-button>\n      <mwc-dialog\n        id=\"filterDialog\"\n        heading=\"${this.header ? this.header : get('filter')}\"\n        scrimClickAction=\"\"\n        @closing=\"${() => this.onClosing()}\"\n      >\n        ${super.render()}\n        <mwc-button slot=\"primaryAction\" dialogAction=\"close\">\n          ${get('close')}\n        </mwc-button>\n      </mwc-dialog>\n    `;\n  }\n\n  static styles = css`\n    ${unsafeCSS(FilteredList.styles)}\n\n    mwc-icon-button {\n      color: var(--mdc-theme-on-surface);\n    }\n\n    mwc-dialog {\n      --mdc-dialog-max-height: calc(100vh - 150px);\n    }\n  `;\n}\n\nexport interface SelectedItemsChangedDetail {\n  selectedItems: string[];\n}\nexport type SelectedItemsChangedEvent = CustomEvent<SelectedItemsChangedDetail>;\nfunction newSelectedItemsChangedEvent(\n  selectedItems: string[],\n  eventInitDict?: CustomEventInit<SelectedItemsChangedDetail>\n): SelectedItemsChangedEvent {\n  return new CustomEvent<SelectedItemsChangedDetail>('selected-items-changed', {\n    bubbles: true,\n    composed: true,\n    ...eventInitDict,\n    detail: { selectedItems, ...eventInitDict?.detail },\n  });\n}\n\ndeclare global {\n  interface ElementEventMap {\n    ['selected-items-changed']: SelectedItemsChangedEvent;\n  }\n}\n"]}