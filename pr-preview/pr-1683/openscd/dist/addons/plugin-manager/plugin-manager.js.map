{"version":3,"file":"plugin-manager.js","sourceRoot":"","sources":["../../../src/addons/plugin-manager/plugin-manager.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  customElement,\n  html,\n  LitElement,\n  property,\n  query,\n  TemplateResult,\n  css\n} from 'lit-element';\nimport { get } from 'lit-translate';\n\nimport type { ActionDetail } from '@material/mwc-list';\nimport type { MultiSelectedEvent } from '@material/mwc-list/mwc-list-foundation.js';\nimport type { Dialog } from '@material/mwc-dialog';\nimport '@material/mwc-dialog';\nimport '@material/mwc-list';\nimport type {List} from '@material/mwc-list';\n\nimport {\n  newResetPluginsEvent,\n  newSetPluginsEvent,\n  pluginIcons\n} from '../../open-scd.js';\n\nimport {\n  MenuPosition,\n  Plugin,\n} from \"../../plugin.js\";\n\n@customElement('oscd-plugin-manager')\nexport class OscdPluginManager extends LitElement {\n\n  /** The plugins to render the layout. */\n  @property({ type: Array }) plugins: Plugin[] = [];\n  @query('#plugin-manager-root') root!: Dialog\n  @query('#pluginList') pluginList!: List\n\n  render(): TemplateResult {\n      return html`\n        <mwc-dialog\n          stacked\n          id=\"plugin-manager-root\"\n          heading=\"${get('plugins.heading')}\"\n        >\n          <mwc-list\n            id=\"pluginList\"\n            multi\n            @selected=${(e: MultiSelectedEvent) => {\n              const selectedPlugins = this.pluginList.items\n              .filter((item, index) => e.detail.index.has(index))\n              // @ts-expect-error: we add plugin to the list item\n              .map(item => item.plugin) as Plugin[]\n\n              this.dispatchEvent(newSetPluginsEvent(selectedPlugins))\n            }}\n          >\n            <mwc-list-item graphic=\"avatar\" noninteractive>\n              <strong>${get(`plugins.editor`)}</strong>\n              <mwc-icon slot=\"graphic\" class=\"inverted\">\n                ${pluginIcons['editor']}\n              </mwc-icon>\n            </mwc-list-item>\n\n            <li divider role=\"separator\"></li>\n\n            ${this.generateEditorListItems()}\n\n            <mwc-list-item graphic=\"avatar\" noninteractive>\n              <strong>${get(`plugins.menu`)}</strong>\n              <mwc-icon slot=\"graphic\" class=\"inverted\">\n                <strong>${pluginIcons['menu']}</strong></mwc-icon>\n              </mwc-list-item>\n            <li divider role=\"separator\"></li>\n\n            ${this.generateMenuListItems('top')}\n\n            <li divider role=\"separator\" inset></li>\n\n            ${this.generateValidatorListItems()}\n\n            <li divider role=\"separator\" inset></li>\n\n            ${this.generateMenuListItems('middle')}\n\n            <li divider role=\"separator\" inset></li>\n\n            ${this.generateMenuListItems('bottom')}\n\n          </mwc-list>\n          <mwc-button\n            slot=\"secondaryAction\"\n            icon=\"refresh\"\n            label=\"${get('reset')}\"\n            @click=${async () => {\n              this.dispatchEvent(newResetPluginsEvent());\n              this.requestUpdate();\n            }}\n            style=\"--mdc-theme-primary: var(--mdc-theme-error)\"\n          >\n          </mwc-button>\n          <mwc-button\n            slot=\"secondaryAction\"\n            icon=\"\"\n            label=\"${get('close')}\"\n            dialogAction=\"close\">\n          </mwc-button>\n          <mwc-button\n            outlined\n            trailingIcon\n            slot=\"primaryAction\"\n            icon=\"library_add\"\n            label=\"${get('plugins.add.heading')}&hellip;\"\n            @click=${() => this.dispatchOpenCustomPluginDialogEvent()}>\n          </mwc-button>\n        </mwc-dialog>\n      `;\n  }\n\n  static styles = css`\n    mwc-dialog {\n      --mdc-dialog-max-width: 98vw;\n    }\n  `\n\n  public show(){\n    this.root.show()\n  }\n\n\n  private generateEditorListItems(): TemplateResult[] {\n    return this.plugins\n      .filter(p => p.kind === 'editor')\n      .map(this.renderPluginListItem)\n  }\n\n  private generateMenuListItems(position: MenuPosition): TemplateResult[] {\n    return this.plugins\n      .filter(p => p.kind === 'menu' && p.position === position)\n      .map(this.renderPluginListItem)\n  }\n\n  private generateValidatorListItems(): TemplateResult[] {\n    return this.plugins\n      .filter(p => p.kind === 'validator')\n      .map(this.renderPluginListItem)\n  }\n\n  private dispatchOpenCustomPluginDialogEvent(): void {\n    const event = new CustomEvent('open-plugin-download', {\n      bubbles: true,\n      composed: true,\n    });\n\n    this.dispatchEvent(event);\n  }\n\n  private renderPluginListItem(plugin?: Plugin): TemplateResult {\n    if(!plugin){ return html`` }\n\n    return html`\n      <mwc-check-list-item\n          class=\"${plugin.official ? 'official' : 'external'}\"\n          value=\"${plugin.src}\"\n          .plugin=${plugin}\n          ?selected=${plugin.active}\n          @request-selected=${(e: CustomEvent<{source: string}>) => {\n            if(e.detail.source !== 'interaction'){\n              e.preventDefault();\n              e.stopPropagation();\n              e.stopImmediatePropagation();\n              return false;\n            }\n          }}\n          hasMeta\n          left\n        >\n          <mwc-icon slot=\"meta\">\n            ${plugin.icon || pluginIcons[plugin.kind]}\n          </mwc-icon>\n          ${plugin.name}\n        </mwc-check-list-item>\n\n    `;\n  }\n\n}\n"]}