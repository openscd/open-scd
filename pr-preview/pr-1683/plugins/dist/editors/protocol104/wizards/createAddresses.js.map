{"version":3,"file":"createAddresses.js","sourceRoot":"","sources":["../../../../src/editors/protocol104/wizards/createAddresses.ts"],"names":[],"mappings":"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","sourcesContent":["import { get } from 'lit-translate';\nimport { html, TemplateResult } from 'lit-element';\nimport { Select } from '@material/mwc-select';\nimport { SelectedEvent } from '@material/mwc-list/mwc-list-foundation';\n\nimport { Switch } from '@material/mwc-switch';\n\nimport '@material/mwc-formfield';\nimport '@material/mwc-list/mwc-list-item';\nimport '@material/mwc-switch';\n\nimport '@openscd/open-scd/src/wizard-textfield.js';\nimport '@openscd/open-scd/src/WizardDivider.js';\nimport { WizardSelect } from '@openscd/open-scd/src/wizard-select.js';\n\nimport {\n  getNameAttribute,\n  getValue,\n  newWizardEvent,\n  Wizard,\n  WizardActor,\n  WizardInputElement,\n} from '@openscd/open-scd/src/foundation.js';\nimport {\n  ComplexAction,\n  EditorAction,\n} from '@openscd/core/foundation/deprecated/editor.js';\nimport {\n  getCdcValueFromDOElement,\n  getCtlModel,\n  getFullPath,\n} from '../foundation/foundation.js';\nimport {\n  cdcProcessings,\n  SupportedCdcType,\n  TiInformation,\n} from '../foundation/cdc.js';\nimport { createActions, createCheckActions } from '../foundation/actions.js';\nimport { getSignalName } from '../foundation/signalNames.js';\n\nfunction getSwitchValue(wizard: Element, name: string): boolean {\n  const switchElement = wizard.shadowRoot?.querySelector(\n    `mwc-switch[id=\"${name}\"`\n  ) as Switch;\n  return switchElement?.checked ?? false;\n}\n\nexport function createAddressesAction(\n  lnElement: Element,\n  doElement: Element,\n  hasControlTis: boolean\n): WizardActor {\n  return (inputs: WizardInputElement[], wizard: Element): EditorAction[] => {\n    // Close previous wizard (SelectDO) to prevent it from showing after saving.\n    wizard.dispatchEvent(newWizardEvent());\n\n    const cdc = getCdcValueFromDOElement(doElement) ?? '';\n    const cdcProcessing = cdcProcessings[<SupportedCdcType>cdc];\n    const complexAction: ComplexAction = {\n      actions: [],\n      title: get('protocol104.values.addedAddress', {\n        name: getNameAttribute(doElement) ?? 'Unknown',\n        lnName: getFullPath(lnElement, 'IED'),\n      }),\n    };\n\n    // Create a Deep Clone of the LN Element, to keep track on which structure is initialized.\n    const lnClonedElement = <Element>lnElement.cloneNode(true);\n\n    // Create all Monitor Addresses\n    const selectedMonitorTi =\n      getValue(inputs.find(i => i.label === 'monitorTi')!)?.split(' (')[0] ??\n      '';\n    const monitorInverted = getSwitchValue(wizard, 'monitorInverted');\n    const tiInformation = cdcProcessing.monitor[selectedMonitorTi];\n    if (tiInformation) {\n      complexAction.actions.push(\n        ...createActions(\n          lnElement,\n          lnClonedElement,\n          doElement,\n          wizard,\n          selectedMonitorTi,\n          monitorInverted,\n          tiInformation\n        )\n      );\n    }\n\n    const monitorCheck = getSwitchValue(wizard, 'monitorCheck');\n    if (monitorCheck) {\n      complexAction.actions.push(\n        ...createCheckActions(\n          lnElement,\n          lnClonedElement,\n          doElement,\n          wizard,\n          selectedMonitorTi,\n          tiInformation\n        )\n      );\n    }\n\n    // Create all Control Addresses\n    if (hasControlTis) {\n      const ctlModel = getCtlModel(lnElement, doElement);\n      if (ctlModel !== null && ctlModel !== 'status-only') {\n        const selectedControlTi =\n          getValue(inputs.find(i => i.label === 'controlTi')!)?.split(\n            ' ('\n          )[0] ?? '';\n        const controlInverted = getSwitchValue(wizard, 'controlInverted');\n\n        const tiInformation = cdcProcessing.control[selectedControlTi];\n        if (tiInformation) {\n          complexAction.actions.push(\n            ...createActions(\n              lnElement,\n              lnClonedElement,\n              doElement,\n              wizard,\n              selectedControlTi,\n              controlInverted,\n              tiInformation\n            )\n          );\n        }\n\n        const controlCheck = getSwitchValue(wizard, 'controlCheck');\n        if (controlCheck) {\n          complexAction.actions.push(\n            ...createCheckActions(\n              lnElement,\n              lnClonedElement,\n              doElement,\n              wizard,\n              selectedControlTi,\n              tiInformation\n            )\n          );\n        }\n      }\n    }\n\n    if (complexAction.actions.length > 0) {\n      return [complexAction];\n    }\n    // There are no Address elements created for any DAI, close window.\n    wizard.dispatchEvent(newWizardEvent());\n    return [];\n  };\n}\n\nexport function disableCheckSwitch(\n  tiInfo: Record<string, TiInformation>\n): boolean {\n  let disableSwitch = true;\n  Object.values(tiInfo).forEach(tiInformation => {\n    if (tiInformation.checkDaPaths && tiInformation.checkCreate) {\n      disableSwitch = false;\n    }\n  });\n  return disableSwitch;\n}\n\nexport function disableInvertedSwitch(\n  tiInfo: Record<string, TiInformation>\n): boolean {\n  let disableSwitch = true;\n  Object.values(tiInfo).forEach(tiInformation => {\n    if (tiInformation.inverted === true) {\n      disableSwitch = false;\n    }\n  });\n  return disableSwitch;\n}\n\nexport function disableMonitorInvertedSwitch(\n  tiInfo: Record<string, TiInformation>,\n  tiNumberInfo: string\n): boolean {\n  let disableSwitch = true;\n  const tiNumber = tiNumberInfo.split(' (')[0];\n\n  if (!isNaN(+tiNumber)) disableSwitch = !tiInfo[tiNumber].inverted;\n\n  return disableSwitch;\n}\n\nexport function createAddressesWizard(\n  lnElement: Element,\n  doElement: Element\n): Wizard {\n  const foundCdc = getCdcValueFromDOElement(doElement) ?? '';\n  const reqCmvMapping = foundCdc === 'WYE' || foundCdc === 'DEL';\n  const cdc = reqCmvMapping ? 'CMV' : foundCdc;\n  const cdcProcessing = cdcProcessings[<SupportedCdcType>foundCdc];\n\n  const monitorTis = Object.keys(cdcProcessing.monitor);\n  const controlTis = Object.keys(cdcProcessing.control);\n\n  function renderCreateAddressesWizard(): TemplateResult[] {\n    const doName = getNameAttribute(doElement) ?? '';\n    const iedElement = lnElement.closest('IED');\n    const fullPath = getFullPath(lnElement, 'IED');\n\n    function setMonitorInvertedSwitch(e: SelectedEvent): void {\n      const selectedTi = (<Select>e.target).selected!.value;\n      const selectElement = (<Select>e.target).parentElement!.querySelector(\n        'mwc-switch[id=\"monitorInverted\"]'\n      );\n\n      if (!selectElement) return;\n\n      (<Switch>selectElement).disabled = disableMonitorInvertedSwitch(\n        cdcProcessing.monitor,\n        selectedTi\n      );\n    }\n\n    function setMonitorControlValue(\n      e: SelectedEvent,\n      isMonitor: boolean\n    ): void {\n      const selectedTi = (<Select>e.target).selected!.value;\n      const counterType = isMonitor ? 'controlTi' : 'monitorTi';\n      const availableTis = (<Select>e.target).parentElement!.querySelector(\n        `wizard-select[label=\"${counterType}\"]`\n      ) as WizardSelect;\n\n      availableTis.maybeValue = isMonitor\n        ? selectedTi === '30'\n          ? '58'\n          : '62'\n        : selectedTi === '58'\n        ? '30'\n        : '35';\n    }\n\n    // Add the basic fields to the list.\n    const fields = [\n      html`<wizard-textfield\n        label=\"IED\"\n        .maybeValue=\"${getNameAttribute(iedElement!)}\"\n        disabled\n        readonly\n      >\n      </wizard-textfield>`,\n      html`<mwc-textarea\n        label=\"LN(0)\"\n        value=\"${fullPath}\"\n        rows=\"2\"\n        cols=\"40\"\n        readonly\n        disabled\n      >\n      </mwc-textarea>`,\n      html`<wizard-textfield\n        label=\"DO\"\n        .maybeValue=\"${doName}\"\n        disabled\n        readonly\n      >\n      </wizard-textfield>`,\n      html`<wizard-textfield\n        label=\"Common Data Class\"\n        .maybeValue=\"${cdc}\"\n        .helper=\"${reqCmvMapping\n          ? get('protocol104.mappedCmv', { cdc: foundCdc })\n          : ''}\"\n        .helperPersistent=\"${reqCmvMapping}\"\n        disabled\n        readonly\n      >\n      </wizard-textfield>`,\n    ];\n\n    if (monitorTis.length > 0) {\n      fields.push(html`<wizard-divider></wizard-divider>`);\n      let disabledSwitchByDefault = true;\n      if (monitorTis.length > 1) {\n        fields.push(\n          html`<wizard-select\n            label=\"monitorTi\"\n            helper=\"${get('protocol104.wizard.monitorTiHelper')}\"\n            fixedMenuPosition\n            required\n            @selected=${(e: SelectedEvent) => {\n              setMonitorInvertedSwitch(e);\n              if (cdc === 'ENC') setMonitorControlValue(e, true);\n            }}\n          >\n            ${monitorTis.map(\n              monitorTi =>\n                html` <mwc-list-item value=\"${monitorTi}\">\n                  <span\n                    >${monitorTi + ' (' + getSignalName(monitorTi) + ')'}</span\n                  >\n                </mwc-list-item>`\n            )}\n          </wizard-select>`\n        );\n      } else {\n        disabledSwitchByDefault = disableMonitorInvertedSwitch(\n          cdcProcessing.monitor,\n          monitorTis[0]\n        );\n        fields.push(\n          html`<wizard-textfield\n            label=\"monitorTi\"\n            .maybeValue=${monitorTis[0]\n              ? monitorTis[0] + ' (' + getSignalName(monitorTis[0]) + ')'\n              : ''}\n            disabled\n          >\n          </wizard-textfield>`\n        );\n      }\n      fields.push(\n        html`<mwc-formfield\n          label=\"${get('protocol104.wizard.monitorInverted')}\"\n        >\n          <mwc-switch\n            id=\"monitorInverted\"\n            .disabled=\"${disabledSwitchByDefault}\"\n          >\n          </mwc-switch>\n        </mwc-formfield>`\n      );\n      fields.push(\n        html`<mwc-formfield label=\"${get('protocol104.wizard.monitorCheck')}\">\n          <mwc-switch\n            id=\"monitorCheck\"\n            .disabled=\"${disableCheckSwitch(cdcProcessing.monitor)}\"\n          >\n          </mwc-switch>\n        </mwc-formfield>`\n      );\n    }\n\n    if (controlTis.length > 0) {\n      fields.push(html` <wizard-divider></wizard-divider>`);\n\n      const ctlModel = getCtlModel(lnElement, doElement);\n      if (ctlModel !== null) {\n        fields.push(html` <wizard-textfield\n          label=\"ctlModel\"\n          .maybeValue=${ctlModel}\n          disabled\n          readonly\n        >\n        </wizard-textfield>`);\n      }\n\n      if (ctlModel !== null && ctlModel !== 'status-only') {\n        if (controlTis.length > 1) {\n          fields.push(\n            html` <wizard-select\n              label=\"controlTi\"\n              helper=\"${get('protocol104.wizard.controlTiHelper')}\"\n              fixedMenuPosition\n              required\n              @selected=${(e: SelectedEvent) => {\n                if (cdc === 'ENC') setMonitorControlValue(e, false);\n              }}\n            >\n              ${controlTis.map(\n                controlTi =>\n                  html` <mwc-list-item value=\"${controlTi}\">\n                    <span\n                      >${controlTi +\n                      ' (' +\n                      getSignalName(controlTi) +\n                      ')'}</span\n                    >\n                  </mwc-list-item>`\n              )}\n            </wizard-select>`\n          );\n        } else {\n          fields.push(\n            html` <wizard-textfield\n              label=\"controlTi\"\n              .maybeValue=${controlTis[0]\n                ? controlTis[0] + ' (' + getSignalName(controlTis[0]) + ')'\n                : ''}\n              disabled\n            >\n            </wizard-textfield>`\n          );\n        }\n        fields.push(\n          html` <mwc-formfield\n            label=\"${get('protocol104.wizard.controlInverted')}\"\n          >\n            <mwc-switch\n              id=\"controlInverted\"\n              .disabled=\"${disableInvertedSwitch(cdcProcessing.control)}\"\n            >\n            </mwc-switch>\n          </mwc-formfield>`\n        );\n        fields.push(\n          html` <mwc-formfield\n            label=\"${get('protocol104.wizard.controlCheck')}\"\n          >\n            <mwc-switch\n              id=\"controlCheck\"\n              .disabled=\"${disableCheckSwitch(cdcProcessing.control)}\"\n            >\n            </mwc-switch>\n          </mwc-formfield>`\n        );\n      }\n    }\n    return fields;\n  }\n\n  return [\n    {\n      title: get('wizard.title.add', { tagName: 'Address' }),\n      primary: {\n        icon: 'add',\n        label: get('add'),\n        action: createAddressesAction(\n          lnElement,\n          doElement,\n          controlTis.length > 0\n        ),\n      },\n      content: renderCreateAddressesWizard(),\n    },\n  ];\n}\n"]}