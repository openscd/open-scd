{"version":3,"file":"datype.js","sourceRoot":"","sources":["../../../src/validators/templates/datype.ts"],"names":[],"mappings":"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","sourcesContent":["import { get } from 'lit-translate';\nimport { identity } from '@openscd/open-scd/src/foundation.js';\nimport { LogDetailBase } from '@openscd/core/foundation/deprecated/history.js';\nimport { validateChildren } from './foundation.js';\nimport { iec6185073, iec6185081 } from '@openscd/open-scd/src/foundation/nsd.js';\n\nasync function getChildren(\n  cdc: string | null | undefined,\n  daName: string | null | undefined\n): Promise<Element[]> {\n  const nsd73 = await iec6185073;\n\n  const dataAttribute = nsd73\n    .querySelector(`CDC[name=\"${cdc}\"] > DataAttribute[name=\"${daName}\"]`)\n    ?.getAttribute('type');\n\n  return Array.from(\n    nsd73.querySelectorAll(\n      `ConstructedAttributes > ConstructedAttribute[name=\"${dataAttribute}\"] > SubDataAttribute[presCond=\"M\"]`\n    )\n  );\n}\n\nasync function getServiceChildren(\n  daName: string | null | undefined\n): Promise<Element[]> {\n  const nsd81 = await iec6185081;\n\n  return Array.from(\n    nsd81.querySelectorAll(\n      `ServiceConstructedAttributes > ServiceConstructedAttribute[name=\"${daName}\"] > ` +\n        ` SubDataAttribute[presCond=\"M\"]`\n    )\n  );\n}\n\nasync function getMandatoryChildren(datype: Element): Promise<Element[]> {\n  const id = datype.getAttribute('id');\n  if (!id) return [];\n\n  const dataAttribute = datype\n    .closest('DataTypeTemplates')\n    ?.querySelector(`DOType > DA[type=\"${id}\"]`);\n  const daName = dataAttribute?.getAttribute('name');\n\n  if (daName && ['Oper', 'SBOw', 'SBO', 'Cancel'].includes(daName))\n    return await getServiceChildren(daName);\n\n  const cdc = dataAttribute?.parentElement?.getAttribute('cdc');\n  return getChildren(cdc, daName);\n}\n\nasync function missingMandatoryChildren(\n  datype: Element\n): Promise<LogDetailBase[]> {\n  const mandatoryChildren = await getMandatoryChildren(datype);\n  const mandatoryChildNames = mandatoryChildren.map(\n    DA => DA.getAttribute('name')!\n  );\n  const missingDaNames = mandatoryChildNames.filter(\n    da => !datype.querySelector(`BDA[name=\"${da}\"]`)\n  );\n\n  return missingDaNames.map(missingDa => {\n    return {\n      title: get('validator.templates.mandatoryChild', {\n        tag: 'DAType',\n        id: datype.getAttribute('id')!,\n        childTag: 'BDA',\n        childId: missingDa,\n      }),\n      message: `${identity(datype)}`,\n    };\n  });\n}\n\nexport async function dATypeValidator(\n  datype: Element\n): Promise<LogDetailBase[]> {\n  const errors: LogDetailBase[] = [];\n\n  if (datype.tagName !== 'DAType') return [];\n\n  const missingChildren = await missingMandatoryChildren(datype);\n  const issuesChildren = await validateChildren(datype);\n\n  return errors.concat(missingChildren, issuesChildren);\n}\n"]}