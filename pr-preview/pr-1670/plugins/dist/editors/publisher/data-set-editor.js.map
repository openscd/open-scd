{"version":3,"file":"data-set-editor.js","sourceRoot":"","sources":["../../../src/editors/publisher/data-set-editor.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  css,\n  customElement,\n  html,\n  LitElement,\n  property,\n  query,\n  state,\n  TemplateResult,\n} from 'lit-element';\nimport { get } from 'lit-translate';\n\nimport '@material/mwc-button';\nimport '@material/mwc-list/mwc-list-item';\nimport { Button } from '@material/mwc-button';\nimport { ListItem } from '@material/mwc-list/mwc-list-item';\n\nimport './data-set-element-editor.js';\nimport '@openscd/open-scd/src/filtered-list.js';\nimport { FilteredList } from '@openscd/open-scd/src/filtered-list.js';\n\nimport {\n  compareNames,\n  identity,\n  find,\n} from '@openscd/open-scd/src/foundation.js';\nimport { styles, updateElementReference } from './foundation.js';\n\n@customElement('data-set-editor')\nexport class DataSetEditor extends LitElement {\n  /** The document being edited as provided to plugins by [[`OpenSCD`]]. */\n  @property({ attribute: false })\n  doc!: XMLDocument;\n\n  @state()\n  selectedDataSet?: Element;\n\n  @query('.selectionlist') selectionList!: FilteredList;\n  @query('mwc-button') selectDataSetButton!: Button;\n\n  /** Resets selected GOOSE, if not existing in new doc */\n  update(props: Map<string | number | symbol, unknown>): void {\n    if (props.has('doc') && this.selectedDataSet) {\n      const newDataSet = updateElementReference(this.doc, this.selectedDataSet);\n\n      this.selectedDataSet = newDataSet ?? undefined;\n\n      if (!newDataSet && this.selectionList && this.selectionList.selected)\n        (this.selectionList.selected as ListItem).selected = false;\n    }\n\n    super.update(props);\n  }\n\n  private selectDataSet(evt: Event): void {\n    const id = ((evt.target as FilteredList).selected as ListItem).value;\n    const dataSet = find(this.doc, 'DataSet', id);\n\n    if (dataSet) {\n      this.selectedDataSet = dataSet;\n      (evt.target as FilteredList).classList.add('hidden');\n      this.selectDataSetButton.classList.remove('hidden');\n    }\n  }\n\n  private renderElementEditorContainer(): TemplateResult {\n    if (this.selectedDataSet)\n      return html`<div class=\"elementeditorcontainer\">\n        <data-set-element-editor\n          .element=${this.selectedDataSet}\n        ></data-set-element-editor>\n      </div>`;\n\n    return html``;\n  }\n\n  private renderSelectionList(): TemplateResult {\n    return html`<filtered-list\n      activatable\n      @action=${this.selectDataSet}\n      class=\"selectionlist\"\n      >${Array.from(this.doc.querySelectorAll('IED'))\n        .sort(compareNames)\n        .flatMap(ied => {\n          const ieditem = html`<mwc-list-item\n              class=\"listitem header\"\n              noninteractive\n              graphic=\"icon\"\n              value=\"${Array.from(ied.querySelectorAll('DataSet'))\n                .map(element => {\n                  const id = identity(element) as string;\n                  return typeof id === 'string' ? id : '';\n                })\n                .join(' ')}\"\n            >\n              <span>${ied.getAttribute('name')}</span>\n              <mwc-icon slot=\"graphic\">developer_board</mwc-icon>\n            </mwc-list-item>\n            <li divider role=\"separator\"></li>`;\n\n          const dataSets = Array.from(ied.querySelectorAll('DataSet')).map(\n            dataSet =>\n              html`<mwc-list-item twoline value=\"${identity(dataSet)}\"\n                ><span>${dataSet.getAttribute('name')}</span\n                ><span slot=\"secondary\">${identity(dataSet)}</span>\n              </mwc-list-item>`\n          );\n\n          return [ieditem, ...dataSets];\n        })}</filtered-list\n    >`;\n  }\n\n  private renderToggleButton(): TemplateResult {\n    return html`<mwc-button\n      outlined\n      label=\"${get('publisher.selectbutton', { type: 'DataSet' })}\"\n      @click=${() => {\n        this.selectionList.classList.remove('hidden');\n        this.selectDataSetButton.classList.add('hidden');\n      }}\n    ></mwc-button>`;\n  }\n\n  render(): TemplateResult {\n    return html`${this.renderToggleButton()}\n      <div class=\"content\">\n        ${this.renderSelectionList()}${this.renderElementEditorContainer()}\n      </div>`;\n  }\n\n  static styles = css`\n    ${styles}\n\n    data-set-element-editor {\n      flex: auto;\n    }\n  `;\n}\n"]}