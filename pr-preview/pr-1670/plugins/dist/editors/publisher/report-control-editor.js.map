{"version":3,"file":"report-control-editor.js","sourceRoot":"","sources":["../../../src/editors/publisher/report-control-editor.ts"],"names":[],"mappings":";AAAA,OAAO,EACL,GAAG,EACH,aAAa,EACb,IAAI,EACJ,UAAU,EACV,QAAQ,EACR,KAAK,EACL,KAAK,GAEN,MAAM,aAAa,CAAC;AACrB,OAAO,EAAE,GAAG,EAAE,MAAM,eAAe,CAAC;AAEpC,OAAO,sBAAsB,CAAC;AAC9B,OAAO,kCAAkC,CAAC;AAI1C,OAAO,8BAA8B,CAAC;AACtC,OAAO,oCAAoC,CAAC;AAC5C,OAAO,wCAAwC,CAAC;AAGhD,OAAO,EACL,YAAY,EACZ,QAAQ,EACR,IAAI,GACL,MAAM,qCAAqC,CAAC;AAC7C,OAAO,EAAE,UAAU,EAAE,MAAM,sCAAsC,CAAC;AAClE,OAAO,EAAE,MAAM,EAAE,sBAAsB,EAAE,MAAM,iBAAiB,CAAC;AAG1D,IAAM,mBAAmB,GAAzB,MAAM,mBAAoB,SAAQ,UAAU;IAA5C;;QAKL,cAAS,GAAG,CAAC,CAAC,CAAC;IA4JjB,CAAC;IAlJC,yEAAyE;IACzE,MAAM,CAAC,KAA6C;QAClD,IAAI,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,qBAAqB,EAAE;YAClD,MAAM,gBAAgB,GAAG,sBAAsB,CAC7C,IAAI,CAAC,GAAG,EACR,IAAI,CAAC,qBAAqB,CAC3B,CAAC;YAEF,IAAI,CAAC,qBAAqB,GAAG,gBAAgB,IAAI,SAAS,CAAC;YAC3D,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,qBAAqB;gBAC/C,CAAC,CAAC,sBAAsB,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,eAAgB,CAAC;gBACzD,CAAC,CAAC,SAAS,CAAC;YAEd,IACE,CAAC,gBAAgB;gBACjB,IAAI,CAAC,aAAa;gBAClB,IAAI,CAAC,aAAa,CAAC,QAAQ;gBAE1B,IAAI,CAAC,aAAa,CAAC,QAAqB,CAAC,QAAQ,GAAG,KAAK,CAAC;SAC9D;QAED,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACtB,CAAC;IAEO,mBAAmB,CAAC,GAAU;QACpC,MAAM,EAAE,GAAK,GAAG,CAAC,MAAuB,CAAC,QAAqB,CAAC,KAAK,CAAC;QACrE,MAAM,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,eAAe,EAAE,EAAE,CAAC,CAAC;QAC1D,IAAI,CAAC,aAAa;YAAE,OAAO;QAE3B,IAAI,CAAC,qBAAqB,GAAG,aAAa,CAAC;QAE3C,IAAI,IAAI,CAAC,qBAAqB,EAAE;YAC9B,IAAI,CAAC,eAAe;gBAClB,IAAI,CAAC,qBAAqB,CAAC,aAAa,EAAE,aAAa,CACrD,iBAAiB,IAAI,CAAC,qBAAqB,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CACvE,CAAC;YACH,GAAG,CAAC,MAAuB,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YACrD,IAAI,CAAC,yBAAyB,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;SAC3D;IACH,CAAC;IAEO,4BAA4B;QAClC,IAAI,IAAI,CAAC,qBAAqB,KAAK,SAAS;YAC1C,OAAO,IAAI,CAAA;;uBAEM,IAAI,CAAC,SAAS;iBACpB,IAAI,CAAC,GAAG;qBACJ,IAAI,CAAC,eAAgB;;;uBAGnB,IAAI,CAAC,SAAS;iBACpB,IAAI,CAAC,GAAG;qBACJ,IAAI,CAAC,qBAAqB;;aAElC,CAAC;QAEV,OAAO,IAAI,CAAA,EAAE,CAAC;IAChB,CAAC;IAEO,mBAAmB;QACzB,OAAO,IAAI,CAAA;;;gBAGC,IAAI,CAAC,mBAAmB;SAC/B,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;aAC5C,IAAI,CAAC,YAAY,CAAC;aAClB,OAAO,CAAC,GAAG,CAAC,EAAE;YACb,MAAM,OAAO,GAAG,IAAI,CAAA;;;;uBAIP,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,eAAe,CAAC,CAAC;iBACvD,GAAG,CAAC,OAAO,CAAC,EAAE;gBACb,MAAM,EAAE,GAAG,QAAQ,CAAC,OAAO,CAAW,CAAC;gBACvC,OAAO,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;YAC1C,CAAC,CAAC;iBACD,IAAI,CAAC,GAAG,CAAC;;sBAEJ,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC;;;+CAGC,CAAC;YAEtC,MAAM,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,eAAe,CAAC,CAAC,CAAC,GAAG,CACnE,QAAQ,CAAC,EAAE,CACT,IAAI,CAAA;;yBAEO,QAAQ,CAAC,QAAQ,CAAC;;yBAElB,QAAQ,CAAC,YAAY,CAAC,MAAM,CAAC;0CACZ,QAAQ,CAAC,QAAQ,CAAC;2CACjB,UAAU;+BACtB,CACpB,CAAC;YAEF,OAAO,CAAC,OAAO,EAAE,GAAG,OAAO,CAAC,CAAC;QAC/B,CAAC,CAAC;MACJ,CAAC;IACL,CAAC;IAEO,kBAAkB;QACxB,OAAO,IAAI,CAAA;;eAEA,GAAG,CAAC,wBAAwB,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;eACjD,GAAG,EAAE;YACZ,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YAC9C,IAAI,CAAC,yBAAyB,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACzD,CAAC;mBACY,CAAC;IAClB,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAA,GAAG,IAAI,CAAC,kBAAkB,EAAE;;UAEjC,IAAI,CAAC,mBAAmB,EAAE,GAAG,IAAI,CAAC,4BAA4B,EAAE;aAC7D,CAAC;IACZ,CAAC;;AAEM,0BAAM,GAAG,GAAG,CAAA;MACf,MAAM;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BT,CAAC;AA7JF;IADC,QAAQ,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;gDACb;AAElB;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;sDACZ;AAGf;IADC,KAAK,EAAE;kEACwB;AAEhC;IADC,KAAK,EAAE;4DACyB;AAER;IAAxB,KAAK,CAAC,gBAAgB,CAAC;0DAA8B;AACjC;IAApB,KAAK,CAAC,YAAY,CAAC;sEAAoC;AAb7C,mBAAmB;IAD/B,aAAa,CAAC,uBAAuB,CAAC;GAC1B,mBAAmB,CAiK/B;SAjKY,mBAAmB","sourcesContent":["import {\n  css,\n  customElement,\n  html,\n  LitElement,\n  property,\n  query,\n  state,\n  TemplateResult,\n} from 'lit-element';\nimport { get } from 'lit-translate';\n\nimport '@material/mwc-button';\nimport '@material/mwc-list/mwc-list-item';\nimport { Button } from '@material/mwc-button';\nimport { ListItem } from '@material/mwc-list/mwc-list-item';\n\nimport './data-set-element-editor.js';\nimport './report-control-element-editor.js';\nimport '@openscd/open-scd/src/filtered-list.js';\nimport { FilteredList } from '@openscd/open-scd/src/filtered-list.js';\n\nimport {\n  compareNames,\n  identity,\n  find,\n} from '@openscd/open-scd/src/foundation.js';\nimport { reportIcon } from '@openscd/open-scd/src/icons/icons.js';\nimport { styles, updateElementReference } from './foundation.js';\n\n@customElement('report-control-editor')\nexport class ReportControlEditor extends LitElement {\n  /** The document being edited as provided to plugins by [[`OpenSCD`]]. */\n  @property({ attribute: false })\n  doc!: XMLDocument;\n  @property({ type: Number })\n  editCount = -1;\n\n  @state()\n  selectedReportControl?: Element;\n  @state()\n  selectedDataSet?: Element | null;\n\n  @query('.selectionlist') selectionList!: FilteredList;\n  @query('mwc-button') selectReportControlButton!: Button;\n\n  /** Resets selected Report and its DataSet, if not existing in new doc */\n  update(props: Map<string | number | symbol, unknown>): void {\n    if (props.has('doc') && this.selectedReportControl) {\n      const newReportControl = updateElementReference(\n        this.doc,\n        this.selectedReportControl\n      );\n\n      this.selectedReportControl = newReportControl ?? undefined;\n      this.selectedDataSet = this.selectedReportControl\n        ? updateElementReference(this.doc, this.selectedDataSet!)\n        : undefined;\n\n      if (\n        !newReportControl &&\n        this.selectionList &&\n        this.selectionList.selected\n      )\n        (this.selectionList.selected as ListItem).selected = false;\n    }\n\n    super.update(props);\n  }\n\n  private selectReportControl(evt: Event): void {\n    const id = ((evt.target as FilteredList).selected as ListItem).value;\n    const reportControl = find(this.doc, 'ReportControl', id);\n    if (!reportControl) return;\n\n    this.selectedReportControl = reportControl;\n\n    if (this.selectedReportControl) {\n      this.selectedDataSet =\n        this.selectedReportControl.parentElement?.querySelector(\n          `DataSet[name=\"${this.selectedReportControl.getAttribute('datSet')}\"]`\n        );\n      (evt.target as FilteredList).classList.add('hidden');\n      this.selectReportControlButton.classList.remove('hidden');\n    }\n  }\n\n  private renderElementEditorContainer(): TemplateResult {\n    if (this.selectedReportControl !== undefined)\n      return html`<div class=\"elementeditorcontainer\">\n        <data-set-element-editor\n          .editCount=${this.editCount}\n          .doc=${this.doc}\n          .element=${this.selectedDataSet!}\n        ></data-set-element-editor>\n        <report-control-element-editor\n          .editCount=${this.editCount}\n          .doc=${this.doc}\n          .element=${this.selectedReportControl}\n        ></report-control-element-editor>\n      </div>`;\n\n    return html``;\n  }\n\n  private renderSelectionList(): TemplateResult {\n    return html`<filtered-list\n      activatable\n      class=\"selectionlist\"\n      @action=${this.selectReportControl}\n      >${Array.from(this.doc.querySelectorAll('IED'))\n        .sort(compareNames)\n        .flatMap(ied => {\n          const ieditem = html`<mwc-list-item\n              class=\"listitem header\"\n              noninteractive\n              graphic=\"icon\"\n              value=\"${Array.from(ied.querySelectorAll('ReportControl'))\n                .map(element => {\n                  const id = identity(element) as string;\n                  return typeof id === 'string' ? id : '';\n                })\n                .join(' ')}\"\n            >\n              <span>${ied.getAttribute('name')}</span>\n              <mwc-icon slot=\"graphic\">developer_board</mwc-icon>\n            </mwc-list-item>\n            <li divider role=\"separator\"></li>`;\n\n          const reports = Array.from(ied.querySelectorAll('ReportControl')).map(\n            reportCb =>\n              html`<mwc-list-item\n                twoline\n                value=\"${identity(reportCb)}\"\n                graphic=\"icon\"\n                ><span>${reportCb.getAttribute('name')}</span\n                ><span slot=\"secondary\">${identity(reportCb)}</span>\n                <mwc-icon slot=\"graphic\">${reportIcon}</mwc-icon>\n              </mwc-list-item>`\n          );\n\n          return [ieditem, ...reports];\n        })}</filtered-list\n    >`;\n  }\n\n  private renderToggleButton(): TemplateResult {\n    return html`<mwc-button\n      outlined\n      label=\"${get('publisher.selectbutton', { type: 'Report' })}\"\n      @click=${() => {\n        this.selectionList.classList.remove('hidden');\n        this.selectReportControlButton.classList.add('hidden');\n      }}\n    ></mwc-button>`;\n  }\n\n  render(): TemplateResult {\n    return html`${this.renderToggleButton()}\n      <div class=\"content\">\n        ${this.renderSelectionList()}${this.renderElementEditorContainer()}\n      </div>`;\n  }\n\n  static styles = css`\n    ${styles}\n\n    .elementeditorcontainer {\n      flex: 65%;\n      margin: 4px 8px 4px 4px;\n      background-color: var(--mdc-theme-surface);\n      overflow-y: scroll;\n      display: grid;\n      grid-gap: 12px;\n      padding: 8px 12px 16px;\n      grid-template-columns: repeat(3, 1fr);\n    }\n\n    data-set-element-editor {\n      grid-column: 1 / 2;\n    }\n\n    report-control-element-editor {\n      grid-column: 2 / 4;\n    }\n\n    @media (max-width: 950px) {\n      .elementeditorcontainer {\n        display: block;\n      }\n    }\n  `;\n}\n"]}