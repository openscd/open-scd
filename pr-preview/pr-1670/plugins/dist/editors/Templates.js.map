{"version":3,"file":"Templates.js","sourceRoot":"","sources":["../../src/editors/Templates.ts"],"names":[],"mappings":"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","sourcesContent":["import { LitElement, html, TemplateResult, property, css } from 'lit-element';\nimport { get } from 'lit-translate';\n\nimport '@material/mwc-fab';\nimport '@material/mwc-icon-button';\nimport '@material/mwc-list';\nimport '@material/mwc-list/mwc-list-item';\n\nimport '@openscd/open-scd/src/filtered-list.js';\nimport {\n  identity,\n  newWizardEvent,\n} from '@openscd/open-scd/src/foundation.js';\n\nimport {\n  createElement,\n} from '@openscd/xml';\n\nimport { newActionEvent } from '@openscd/core/foundation/deprecated/editor.js';\nimport { styles } from './templates/foundation.js';\n\nimport {\n  createEnumTypeWizard,\n  eNumTypeEditWizard,\n} from './templates/enumtype-wizard.js';\nimport {\n  createDATypeWizard,\n  editDaTypeWizard,\n} from './templates/datype-wizards.js';\nimport {\n  createDOTypeWizard,\n  dOTypeWizard,\n} from './templates/dotype-wizards.js';\nimport {\n  createLNodeTypeWizard,\n  lNodeTypeWizard,\n} from './templates/lnodetype-wizard.js';\n\nimport { List } from '@material/mwc-list';\nimport { ListItem } from '@material/mwc-list/mwc-list-item';\nimport { SingleSelectedEvent } from '@material/mwc-list/mwc-list-foundation';\n\nconst templates = fetch('public/xml/templates.scd')\n  .then(response => response.text())\n  .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n\nconst nsd74 = fetch('public/xml/IEC_61850-7-4_2007B3.nsd')\n  .then(response => response.text())\n  .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n\nconst nsd7420 = fetch('public/xml/IEC_61850-7-420_2019A4.nsd')\n  .then(response => response.text())\n  .then(str => new DOMParser().parseFromString(str, 'application/xml'));\n\n/** An editor [[`plugin`]] for editing the `DataTypeTemplates` section. */\nexport default class TemplatesPlugin extends LitElement {\n  /** The document being edited as provided to plugins by [[`OpenSCD`]]. */\n  @property({ attribute: false })\n  doc!: XMLDocument;\n  @property({ type: Number })\n  editCount = -1;\n\n  async openCreateLNodeTypeWizard(): Promise<void> {\n    this.createDataTypeTemplates();\n\n    this.dispatchEvent(\n      newWizardEvent(\n        createLNodeTypeWizard(\n          this.doc.querySelector(':root > DataTypeTemplates')!,\n          await templates,\n          await nsd74,\n          await nsd7420\n        )\n      )\n    );\n  }\n\n  openLNodeTypeWizard(identity: string): void {\n    const wizard = lNodeTypeWizard(identity, this.doc);\n    if (wizard)\n      this.dispatchEvent(\n        newWizardEvent(() => lNodeTypeWizard(identity, this.doc)!)\n      );\n  }\n\n  async openCreateDOTypeWizard(): Promise<void> {\n    this.createDataTypeTemplates();\n\n    this.dispatchEvent(\n      newWizardEvent(\n        createDOTypeWizard(\n          this.doc.querySelector(':root > DataTypeTemplates')!,\n          await templates\n        )\n      )\n    );\n  }\n\n  openDOTypeWizard(identity: string): void {\n    const wizard = dOTypeWizard(identity, this.doc);\n    if (wizard)\n      this.dispatchEvent(\n        newWizardEvent(() => dOTypeWizard(identity, this.doc)!)\n      );\n  }\n\n  openDATypeWizard(identity: string): void {\n    const wizard = editDaTypeWizard(identity, this.doc);\n    if (wizard)\n      this.dispatchEvent(\n        newWizardEvent(() => editDaTypeWizard(identity, this.doc)!)\n      );\n  }\n\n  async openCreateDATypeWizard(): Promise<void> {\n    this.createDataTypeTemplates();\n\n    this.dispatchEvent(\n      newWizardEvent(\n        createDATypeWizard(\n          this.doc.querySelector(':root > DataTypeTemplates')!,\n          await templates\n        )\n      )\n    );\n  }\n\n  openEnumTypeWizard(identity: string): void {\n    const wizard = eNumTypeEditWizard(identity, this.doc);\n    if (wizard)\n      this.dispatchEvent(\n        newWizardEvent(() => eNumTypeEditWizard(identity, this.doc)!)\n      );\n  }\n\n  async openCreateEnumWizard(): Promise<void> {\n    this.createDataTypeTemplates();\n\n    this.dispatchEvent(\n      newWizardEvent(\n        createEnumTypeWizard(\n          this.doc.querySelector(':root > DataTypeTemplates')!,\n          await templates\n        )\n      )\n    );\n  }\n\n  createDataTypeTemplates(): void {\n    if (!this.doc.querySelector(':root > DataTypeTemplates'))\n      this.dispatchEvent(\n        newActionEvent({\n          new: {\n            parent: this.doc.documentElement,\n            element: createElement(this.doc, 'DataTypeTemplates', {}),\n          },\n        })\n      );\n  }\n\n  render(): TemplateResult {\n    if (!this.doc?.querySelector(':root > DataTypeTemplates'))\n      return html`<h1>\n        <span style=\"color: var(--base1)\">${get('templates.missing')}</span>\n        <mwc-fab\n          extended\n          icon=\"add\"\n          label=\"${get('templates.add')}\"\n          @click=${() => this.createDataTypeTemplates()}\n        ></mwc-fab>\n      </h1>`;\n    return html`\n      <div id=\"containerTemplates\">\n        <section tabindex=\"0\">\n          <h1>\n            ${get('scl.LNodeType')}\n            <nav>\n              <abbr title=\"${get('add')}\">\n                <mwc-icon-button\n                  icon=\"playlist_add\"\n                  @click=${() => this.openCreateLNodeTypeWizard()}\n                ></mwc-icon-button>\n              </abbr>\n            </nav>\n          </h1>\n          <filtered-list\n            id=\"lnodetypelist\"\n            @action=${(e: SingleSelectedEvent) =>\n              this.openLNodeTypeWizard(\n                (<ListItem>(<List>e.target).selected).value\n              )}\n          >\n            ${Array.from(\n              this.doc.querySelectorAll(\n                ':root > DataTypeTemplates > LNodeType'\n              ) ?? []\n            ).map(\n              lnodetype =>\n                html`<mwc-list-item\n              twoline\n              value=\"${identity(lnodetype)}\"\n              tabindex=\"0\"\n              hasMeta\n              ><span>${lnodetype.getAttribute('id')}</span\n              ><span slot=\"secondary\">${lnodetype.getAttribute(\n                'lnClass'\n              )}</span></span><span slot=\"meta\"\n                >${lnodetype.querySelectorAll('DO').length}</span\n              ></mwc-list-item\n            >`\n            )}\n          </filtered-list>\n        </section>\n        <section tabindex=\"0\">\n          <h1>\n            ${get('scl.DOType')}\n            <nav>\n              <abbr title=\"${get('add')}\">\n                <mwc-icon-button\n                  icon=\"playlist_add\"\n                  @click=${() => this.openCreateDOTypeWizard()}\n                ></mwc-icon-button>\n              </abbr>\n            </nav>\n          </h1>\n          <filtered-list\n            id=\"dotypelist\"\n            @action=${(e: SingleSelectedEvent) =>\n              this.openDOTypeWizard(\n                (<ListItem>(<List>e.target).selected).value\n              )}\n          >\n            ${Array.from(\n              this.doc.querySelectorAll(':root > DataTypeTemplates > DOType') ??\n                []\n            ).map(\n              dotype =>\n                html`<mwc-list-item\n                  twoline\n                  value=\"${identity(dotype)}\"\n                  tabindex=\"0\"\n                  hasMeta\n                  ><span>${dotype.getAttribute('id')}</span\n                  ><span slot=\"secondary\">${dotype.getAttribute(\n                    'cdc'\n                  )}</span></span><span slot=\"meta\"\n                    >${dotype.querySelectorAll('SDO, DA').length}</span\n                  ></mwc-list-item\n                >`\n            )}\n          </filtered-list>\n        </section>\n        <section tabindex=\"0\">\n          <h1>\n            ${get('scl.DAType')}\n            <nav>\n              <abbr title=\"${get('add')}\">\n                <mwc-icon-button\n                  icon=\"playlist_add\"\n                  @click=${() => this.openCreateDATypeWizard()}\n                ></mwc-icon-button>\n              </abbr>\n            </nav>\n          </h1>\n          <filtered-list\n            id=\"datypelist\"\n            @action=${(e: SingleSelectedEvent) =>\n              this.openDATypeWizard(\n                (<ListItem>(<List>e.target).selected).value\n              )}\n          >\n            ${Array.from(\n              this.doc.querySelectorAll(':root > DataTypeTemplates > DAType') ??\n                []\n            ).map(\n              datype =>\n                html`<mwc-list-item\n                  value=\"${identity(datype)}\"\n                  tabindex=\"0\"\n                  hasMeta\n                  ><span>${datype.getAttribute('id')}</span\n                  ><span slot=\"meta\"\n                    >${datype.querySelectorAll('BDA').length}</span\n                  ></mwc-list-item\n                >`\n            )}\n          </filtered-list>\n        </section>\n        <section tabindex=\"0\">\n          <h1>\n            ${get('scl.EnumType')}\n            <nav>\n              <abbr title=\"${get('add')}\">\n                <mwc-icon-button\n                  icon=\"playlist_add\"\n                  @click=${() => this.openCreateEnumWizard()}\n                ></mwc-icon-button>\n              </abbr>\n            </nav>\n          </h1>\n          <filtered-list\n            id=\"enumtypelist\"\n            @action=${(e: SingleSelectedEvent) =>\n              this.openEnumTypeWizard(\n                (<ListItem>(<List>e.target).selected).value\n              )}\n          >\n            ${Array.from(\n              this.doc.querySelectorAll(\n                ':root > DataTypeTemplates > EnumType'\n              ) ?? []\n            ).map(\n              enumtype =>\n                html`<mwc-list-item\n                  value=\"${identity(enumtype)}\"\n                  tabindex=\"0\"\n                  hasMeta\n                  ><span>${enumtype.getAttribute('id')}</span\n                  ><span slot=\"meta\"\n                    >${enumtype.querySelectorAll('EnumVal').length}</span\n                  ></mwc-list-item\n                >`\n            )}\n          </filtered-list>\n        </section>\n      </div>\n    `;\n  }\n\n  static styles = css`\n    ${styles}\n\n    mwc-fab {\n      position: fixed;\n      bottom: 32px;\n      right: 32px;\n    }\n\n    :host {\n      width: 100vw;\n    }\n\n    #containerTemplates {\n      display: grid;\n      grid-gap: 12px;\n      padding: 8px 12px 16px;\n      box-sizing: border-box;\n      grid-template-columns: repeat(auto-fit, minmax(316px, auto));\n    }\n\n    @media (max-width: 387px) {\n      #containerTemplates {\n        grid-template-columns: repeat(auto-fit, minmax(196px, auto));\n      }\n    }\n  `;\n}\n"]}