{"version":3,"file":"SingleLineDiagram.js","sourceRoot":"","sources":["../../src/editors/SingleLineDiagram.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  css,\n  html,\n  LitElement,\n  property,\n  PropertyValues,\n  query,\n  state,\n  TemplateResult,\n} from 'lit-element';\nimport panzoom from 'panzoom';\n\nimport {\n  compareNames,\n  getDescriptionAttribute,\n  getNameAttribute,\n  getPathNameAttribute,\n  identity,\n  newWizardEvent,\n  SCLTag,\n} from '@openscd/open-scd/src/foundation.js';\nimport {\n  addLabelToBay,\n  addLabelToBusBar,\n  createBayElement,\n  createBusBarElement,\n  createConductingEquipmentElement,\n  createConnectivityNodeElement,\n  createPowerTransformerElement,\n  createSubstationElement,\n  createTerminalElement,\n  createVoltageLevelElement,\n  drawBusBarRoute,\n  drawCNodeConnections,\n  getAbsolutePosition,\n  getAbsolutePositionBusBar,\n  getAbsolutePositionTerminal,\n  getBusBarLength,\n  getConnectivityNodesDrawingPosition,\n  getDirections,\n} from './singlelinediagram/sld-drawing.js';\nimport {\n  getCommonParentElement,\n  getConnectedTerminals,\n  isBusBar,\n} from './singlelinediagram/foundation.js';\nimport { isSCLNamespace } from '@openscd/open-scd/src/schemas.js';\nimport { wizards } from './singlelinediagram/wizards/wizard-library.js';\nimport { SingleSelectedEvent } from '@material/mwc-list/mwc-list-foundation';\nimport { get } from 'lit-translate';\n\nimport '@material/mwc-list/mwc-list-item';\nimport '@material/mwc-select';\nimport '@material/mwc-textfield';\n\n/*\n * We need a variable outside the plugin to save the selected substation, because the Plugin is created\n * more than once during working with the SLD, for instance when opening a Wizard to edit equipment.\n */\nlet sldEditorSelectedSubstation: Element | undefined;\n/*\n * We will also add an Event Listener when a new document is opened. We then want to reset the selection\n * so setting it to undefined will set the selected Substation again on the first in the list.\n */\nfunction onOpenDocResetSelectedSubstation() {\n  sldEditorSelectedSubstation = undefined;\n}\naddEventListener('open-doc', onOpenDocResetSelectedSubstation);\n\n/**\n * Main class plugin for Single Line Diagram editor.\n */\nexport default class SingleLineDiagramPlugin extends LitElement {\n  // The full given XML document.\n  @property({ attribute: false })\n  doc!: XMLDocument;\n\n  // Container for giving the panzoom to.\n  @query('#panzoom') panzoomContainer!: HTMLElement;\n  // The main canvas to draw everything on.\n  @query('#svg') svg!: SVGGraphicsElement;\n\n  private get substations(): Element[] {\n    return this.doc\n      ? Array.from(this.doc.querySelectorAll(':root > Substation')).sort(\n          (a, b) => compareNames(a, b)\n        )\n      : [];\n  }\n\n  @state()\n  private set selectedSubstation(element: Element | undefined) {\n    sldEditorSelectedSubstation = element;\n  }\n\n  private get selectedSubstation(): Element | undefined {\n    if (sldEditorSelectedSubstation === undefined) {\n      const substationList = this.substations;\n      if (substationList.length > 0) {\n        sldEditorSelectedSubstation = substationList[0];\n      }\n    }\n    return sldEditorSelectedSubstation;\n  }\n\n  /**\n   * Get all the Power Transformers from an element.\n   */\n  private getPowerTransformers(parentElement: Element): Element[] {\n    return Array.from(\n      parentElement.querySelectorAll('PowerTransformer')\n    ).filter(isSCLNamespace);\n  }\n\n  /**\n   * Get all the Voltage Levels from the substation.\n   */\n  private getVoltageLevels(substationElement: Element): Element[] {\n    return Array.from(\n      substationElement.querySelectorAll('VoltageLevel')\n    ).filter(isSCLNamespace);\n  }\n\n  /**\n   * Get all the BusBars from the voltage level.\n   */\n  private getBusBars(voltageLevelElement: Element): Element[] {\n    return Array.from(voltageLevelElement.querySelectorAll('Bay'))\n      .filter(isSCLNamespace)\n      .filter(bay => isBusBar(bay));\n  }\n\n  /**\n   * Get all the bays from the voltage level.\n   */\n  private getBays(voltageLevelElement: Element): Element[] {\n    return Array.from(voltageLevelElement.querySelectorAll('Bay'))\n      .filter(isSCLNamespace)\n      .filter(bay => !isBusBar(bay));\n  }\n\n  /**\n   * Get all the Conducting Equipment from a Bay.\n   * @param bayElement - The Bay to search in.\n   */\n  private getConductingEquipments(bayElement: Element): Element[] {\n    return Array.from(\n      bayElement.querySelectorAll('ConductingEquipment')\n    ).filter(isSCLNamespace);\n  }\n\n  /**\n   * Get all the Connectivity Nodes from a Bay/Busbar.\n   * @param bayElement - The Bay/Busbar to search in.\n   */\n  private getConnectivityNode(bayElement: Element): Element[] {\n    return Array.from(bayElement.querySelectorAll('ConnectivityNode'))\n      .filter(isSCLNamespace)\n      .filter(cNode => cNode.getAttribute('name') !== 'grounded');\n  }\n\n  /**\n   * Search for Equipment (ConductionEquipment or PowerTransformer) which has a terminal wth a connectivityNode\n   * tha is the same as the passed pathName.\n   * @param parentElement - The Element to search in for Equipment.\n   * @param pathName      - The PathName to search for in the Terminal.\n   */\n  private findEquipment(\n    parentElement: Element,\n    pathName: string | undefined\n  ): Element[] {\n    return Array.from(\n      parentElement.querySelectorAll('ConductingEquipment, PowerTransformer')\n    )\n      .filter(isSCLNamespace)\n      .filter(element =>\n        element.querySelector(`Terminal[connectivityNode=\"${pathName}\"]`)\n      );\n  }\n\n  /**\n   * Draw all equipment and connections of the selected Substation.\n   */\n  private drawSubstation(substation: Element): void {\n    const substationGroup = createSubstationElement(substation);\n    this.svg.appendChild(substationGroup);\n\n    this.drawPowerTransformers(substation, substationGroup);\n    this.drawVoltageLevels(substation, substationGroup);\n  }\n\n  /**\n   * Draw all available `PowerTransformer`s of passed parent element.\n   * Should only be a <g> element.\n   * @param parentElement - The parent element to search for PowerTransformers.\n   * @param parentGroup   - The SVG Group to which to add the PowerTransformer.\n   */\n  private drawPowerTransformers(\n    parentElement: Element,\n    parentGroup: SVGElement\n  ): void {\n    this.getPowerTransformers(parentElement).forEach(powerTransformerElement =>\n      this.drawPowerTransformer(parentGroup, powerTransformerElement)\n    );\n  }\n\n  /**\n   * Draw an SVG from the passed PowerTransformer Element.\n   * Should only be a <g> element.\n   * @param parentGroup             - The SVG Group to which to add the PowerTransformer.\n   * @param powerTransformerElement - The PowerTransformer to draw.\n   */\n  private drawPowerTransformer(\n    parentGroup: SVGElement,\n    powerTransformerElement: Element\n  ): void {\n    const powerTransformerGroup = createPowerTransformerElement(\n      powerTransformerElement,\n      (event: Event) => this.openEditWizard(event, powerTransformerElement)\n    );\n    parentGroup.appendChild(powerTransformerGroup);\n  }\n\n  /**\n   * Draw all available Voltage Levels of the passed Substation Element.\n   * Should only be a <g> element.\n   *  @param substationElement - The substation containing the voltage levels.\n   *  @param substationGroup   - The group to which to add the SVGs.\n   */\n  private drawVoltageLevels(\n    substationElement: Element,\n    substationGroup: SVGElement\n  ): void {\n    // First draw all the devices on the SVG for all voltage levels.\n    this.getVoltageLevels(substationElement).forEach(voltageLevelElement => {\n      const voltageLevelGroup = createVoltageLevelElement(voltageLevelElement);\n      substationGroup.appendChild(voltageLevelGroup);\n\n      this.drawPowerTransformers(voltageLevelElement, voltageLevelGroup);\n      this.drawBays(voltageLevelElement, voltageLevelGroup);\n      this.drawBusBars(voltageLevelElement, voltageLevelGroup);\n    });\n\n    // After all devices are drawn we can draw the connections between the devices.\n    // And also add the label on the correct place, we now know where the boundaries are.\n    this.getVoltageLevels(substationElement).forEach(voltageLevelElement => {\n      this.getBusBars(voltageLevelElement).forEach(busbarElement => {\n        this.drawBusBarConnections(substationElement, this.svg, busbarElement);\n\n        addLabelToBusBar(this.svg, busbarElement, (event: Event) =>\n          this.openEditWizard(event, busbarElement)\n        );\n      });\n\n      this.getBays(voltageLevelElement).forEach(bayElement => {\n        this.drawBayConnections(substationElement, this.svg, bayElement);\n\n        addLabelToBay(this.svg, bayElement, (event: Event) =>\n          this.openEditWizard(event, bayElement)\n        );\n      });\n    });\n  }\n\n  /**\n   * Draw all available Bays of the passed Voltage Level Element.\n   * Should only be a <g> element.\n   * @param voltageLevelElement - The Voltage Level containing the bays.\n   * @param voltageLevelGroup   - The group to which to add the SVGs.\n   * */\n  private drawBays(\n    voltageLevelElement: Element,\n    voltageLevelGroup: SVGElement\n  ): void {\n    this.getBays(voltageLevelElement).forEach(bayElement => {\n      const bayGroup = createBayElement(bayElement);\n      voltageLevelGroup.appendChild(bayGroup);\n\n      this.drawPowerTransformers(bayElement, bayGroup);\n      this.drawConductingEquipments(bayElement, bayGroup);\n      this.drawConnectivityNodes(bayElement, bayGroup);\n    });\n  }\n\n  /**\n   * Draw all available Conducting Equipments of the passed Bay Element.\n   * Should only be a <g> element.\n   * @param bayElement - The Bay containing the Conducting Equipment.\n   * @param bayGroup   - The group to which to add the SVGs.\n   */\n  private drawConductingEquipments(\n    bayElement: Element,\n    bayGroup: SVGElement\n  ): void {\n    this.getConductingEquipments(bayElement)\n      .filter(\n        conductingEquipmentElement =>\n          Array.from(\n            conductingEquipmentElement.querySelectorAll('Terminal')\n          ).filter(\n            terminal => terminal.getAttribute('cNodeName') !== 'grounded'\n          ).length !== 0\n      )\n      .forEach(conductingEquipmentElement => {\n        const conductingEquipmentGroup = createConductingEquipmentElement(\n          conductingEquipmentElement,\n          (event: Event) =>\n            this.openEditWizard(event, conductingEquipmentElement!)\n        );\n        bayGroup.appendChild(conductingEquipmentGroup);\n      });\n  }\n\n  /**\n   * Draw all available Connectivity Nodes of the passed Bay Element.\n   * @param bayElement - The Bay containing the Connectivity Nodes.\n   * @param bayGroup   - The group to which to add the SVGs.\n   * */\n  private drawConnectivityNodes(\n    bayElement: Element,\n    bayGroup: SVGElement\n  ): void {\n    this.getConnectivityNode(bayElement)\n      .filter(cNode => getConnectedTerminals(cNode).length > 0)\n      .forEach(cNode => {\n        const cNodegroup = createConnectivityNodeElement(\n          cNode,\n          (event: Event) => this.openEditWizard(event, cNode)\n        );\n\n        bayGroup.appendChild(cNodegroup);\n      });\n  }\n\n  /**\n   * Draw all connections between the different Equipment in the Bay and the Bay has with other Equipment outside\n   * the bay.\n   * @param rootElement - The Element containing all the other elements to which the Bay is connected.\n   * @param rootGroup   - The SVG Element that contains all groups from the elements to add path to.\n   * @param bayElement  - The Bay that holds the Connectivity Node to connect with.\n   */\n  private drawBayConnections(\n    rootElement: Element,\n    rootGroup: SVGElement,\n    bayElement: Element\n  ): void {\n    this.getConnectivityNode(bayElement).forEach(cNode => {\n      this.findEquipment(rootElement, getPathNameAttribute(cNode)).forEach(\n        equipmentElement => {\n          const commonParentElement = getCommonParentElement(\n            cNode,\n            equipmentElement,\n            bayElement\n          );\n          const sides = getDirections(equipmentElement, cNode);\n\n          const elementsTerminalPosition = getAbsolutePositionTerminal(\n            equipmentElement,\n            sides.startDirection\n          );\n\n          const cNodePosition = getConnectivityNodesDrawingPosition(\n            cNode,\n            sides.endDirection\n          );\n\n          rootGroup\n            .querySelectorAll(`g[id=\"${identity(commonParentElement)}\"]`)\n            .forEach(eq =>\n              drawCNodeConnections(\n                cNodePosition,\n                elementsTerminalPosition,\n                <SVGElement>eq\n              )\n            );\n\n          const terminalElement = equipmentElement.querySelector(\n            `Terminal[connectivityNode=\"${cNode.getAttribute('pathName')}\"]`\n          );\n\n          const terminal = createTerminalElement(\n            terminalElement!,\n            sides.startDirection,\n            (event: Event) => this.openEditWizard(event, terminalElement!)\n          );\n\n          rootGroup\n            .querySelectorAll(`g[id=\"${identity(equipmentElement)}\"]`)\n            .forEach(eq => eq.appendChild(terminal));\n        }\n      );\n    });\n  }\n\n  /**\n   * Draw all available Busbars of the passed Voltage Level Element.\n   * @param voltageLevelElement - The Voltage Level containing the Busbars.\n   * @param voltageLevelGroup   - The group to which to add the SVGs.\n   */\n  private drawBusBars(\n    voltageLevelElement: Element,\n    voltageLevelGroup: SVGElement\n  ): void {\n    this.getBusBars(voltageLevelElement).forEach(busbarElement => {\n      const busbarGroup = createBusBarElement(\n        busbarElement,\n        getBusBarLength(voltageLevelElement)\n      );\n      voltageLevelGroup.appendChild(busbarGroup);\n    });\n  }\n\n  /**\n   * Draw all the connections a Busbar has with other Equipment.\n   * @param rootElement   - The Element containing all the other elements to which the Busbar is connected.\n   * @param rootGroup     - The SVG Element that contains all groups from the elements to add path to.\n   * @param busbarElement - The Busbar that holds the Connectivity Node to connect with.\n   */\n  private drawBusBarConnections(\n    rootElement: Element,\n    rootGroup: SVGElement,\n    busbarElement: Element\n  ): void {\n    const pathName = getPathNameAttribute(busbarElement.children[0]);\n    const busbarPosition = getAbsolutePositionBusBar(busbarElement);\n\n    this.findEquipment(rootElement, pathName).forEach(element => {\n      const parentElement = element.parentElement;\n      const elementPosition = getAbsolutePosition(element);\n\n      const elementsTerminalSide =\n        busbarPosition.y < elementPosition.y ? 'top' : 'bottom';\n\n      const elementsTerminalPosition = getAbsolutePositionTerminal(\n        element,\n        elementsTerminalSide\n      );\n\n      const busbarTerminalPosition = {\n        x: elementsTerminalPosition.x,\n        y: busbarPosition.y,\n      };\n\n      const terminalElement = element.querySelector(\n        `Terminal[connectivityNode=\"${pathName}\"]`\n      );\n\n      rootGroup\n        .querySelectorAll(`g[id=\"${identity(parentElement)}\"]`)\n        .forEach(eq =>\n          drawBusBarRoute(\n            busbarTerminalPosition,\n            elementsTerminalPosition,\n            <SVGElement>eq\n          )\n        );\n\n      const terminal = createTerminalElement(\n        terminalElement!,\n        elementsTerminalSide,\n        (event: Event) => this.openEditWizard(event, terminalElement!)\n      );\n\n      rootGroup\n        .querySelectorAll(`g[id=\"${identity(element)}\"]`)\n        .forEach(eq => eq.appendChild(terminal));\n    });\n  }\n\n  /**\n   * Remove all the child elements (and descendants) from the SVG Element, to have a clean start.\n   */\n  private clearSVG(): void {\n    while (this.svg.firstChild) {\n      this.svg.removeChild(this.svg.lastChild!);\n    }\n  }\n\n  /**\n   * Draw all the elements of the selected Substation.\n   */\n  drawSVGElements(): void {\n    // First clean the existing drawing, because the selected substation may have changed.\n    this.clearSVG();\n\n    // Only draw the diagram if there is a substation selected.\n    const selectedSubstationElement = this.selectedSubstation;\n    if (selectedSubstationElement) {\n      this.drawSubstation(selectedSubstationElement);\n\n      // Set the new size of the SVG.\n      const bbox = this.svg.getBBox();\n      this.svg.setAttribute(\n        'viewBox',\n        bbox.x -\n          10 +\n          ' ' +\n          (bbox.y - 10) +\n          ' ' +\n          (bbox.width + 20) +\n          ' ' +\n          (bbox.height + 20)\n      );\n      this.svg.setAttribute('width', bbox.width + 20 + 'px');\n      this.svg.setAttribute('height', bbox.height + 20 + 'px');\n\n      panzoom(this.panzoomContainer, {\n        zoomSpeed: 0.2,\n        maxZoom: 1.5,\n        minZoom: 0.2,\n        initialZoom: 0.5,\n      });\n    }\n  }\n\n  /**\n   * Open an Edit wizard for an element.\n   * @param element - The element to show the wizard for.\n   */\n  openEditWizard(event: Event, element: Element): void {\n    const wizard = wizards[<SCLTag>element.tagName].edit(element);\n    if (wizard) {\n      this.dispatchEvent(newWizardEvent(wizard));\n      event.stopPropagation();\n    }\n  }\n\n  protected updated(_changedProperties: PropertyValues): void {\n    super.updated(_changedProperties);\n\n    // When the document is updated, we also will retrieve the history again, because probably it has changed.\n    if (\n      _changedProperties.has('doc') ||\n      _changedProperties.has('selectedSubstation')\n    ) {\n      this.drawSVGElements();\n    }\n  }\n\n  onSelect(event: SingleSelectedEvent): void {\n    // Set the selected Substation.\n    this.selectedSubstation = this.substations[event.detail.index];\n    this.requestUpdate('selectedSubstation');\n  }\n\n  private renderSubstationSelector(): TemplateResult {\n    const substationList = this.substations;\n    if (substationList.length > 0) {\n      if (substationList.length > 1) {\n        return html`\n          <mwc-select\n            id=\"substationSelector\"\n            label=\"${get('sld.substationSelector')}\"\n            @selected=${this.onSelect}\n          >\n            ${substationList.map(substation => {\n              const name = getNameAttribute(substation);\n              const description = getDescriptionAttribute(substation);\n              return html` <mwc-list-item\n                value=\"${name}\"\n                ?selected=${substation == this.selectedSubstation}\n              >\n                ${name}${description !== undefined\n                  ? ' (' + description + ')'\n                  : ''}\n              </mwc-list-item>`;\n            })}\n          </mwc-select>\n        `;\n      }\n\n      const selectedSubstationElement = this.selectedSubstation!;\n      const name = getNameAttribute(selectedSubstationElement);\n      const description = getDescriptionAttribute(selectedSubstationElement);\n      return html`\n        <mwc-textfield\n          label=\"${get('substation.name')}\"\n          value=\"${name}${description !== undefined\n            ? ' (' + description + ')'\n            : ''}\"\n          id=\"selectedSubstation\"\n          readonly\n          disabled\n        >\n        </mwc-textfield>\n      `;\n    }\n    return html`\n      <h1>\n        <span id=\"noSubstationSelector\">${get('substation.missing')}</span>\n      </h1>\n    `;\n  }\n\n  render(): TemplateResult {\n    // TODO: Width and Height should be a percentage, not fixed height/width.\n    return html` ${this.renderSubstationSelector()}\n\n      <div class=\"sldContainer\">\n        <div id=\"panzoom\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" id=\"svg\"></svg>\n        </div>\n      </div>`;\n  }\n\n  static styles = css`\n    h1 {\n      color: var(--mdc-theme-on-surface);\n      font-family: 'Roboto', sans-serif;\n      font-weight: 300;\n      overflow: hidden;\n      white-space: nowrap;\n      text-overflow: ellipsis;\n      margin: 0px;\n      line-height: 48px;\n      padding-left: 0.3em;\n    }\n\n    #substationSelector,\n    #selectedSubstation {\n      width: 35vw;\n      margin: 0.67em 0 0 0.67em;\n    }\n\n    #noSubstationSelector {\n      color: var(--base1);\n    }\n\n    .sldContainer {\n      overflow: hidden;\n    }\n\n    g {\n      pointer-events: bounding-box;\n    }\n\n    g[type='Bay'] > g[type='BayLabel'] {\n      visibility: hidden;\n    }\n    g[type='Bay']:hover > g[type='BayLabel'] {\n      visibility: visible;\n    }\n\n    g[type='Busbar'] > g[type='BusbarLabel'] {\n      visibility: hidden;\n    }\n    g[type='Busbar'] > g[type='BusbarLabel'] > text,\n    g[type='Busbar']:hover > g[type='BusbarLabel'] {\n      visibility: visible;\n    }\n\n    g[type='Bay']:hover,\n    g[type='Busbar']:hover,\n    g[type='ConductingEquipment']:hover,\n    g[type='ConnectivityNode']:hover,\n    g[type='PowerTransformer']:hover,\n    g[type='Terminal']:hover {\n      outline: 2px dashed var(--mdc-theme-primary);\n      transition: transform 200ms linear, box-shadow 250ms linear;\n    }\n  `;\n}\n"]}