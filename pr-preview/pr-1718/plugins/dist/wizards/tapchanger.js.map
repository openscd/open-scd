{"version":3,"file":"tapchanger.js","sourceRoot":"","sources":["../../src/wizards/tapchanger.ts"],"names":[],"mappings":"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","sourcesContent":["import { html, TemplateResult } from 'lit-element';\nimport { get } from 'lit-translate';\n\nimport {\n  cloneElement,\n  createElement,\n  getChildElementsByTagName,\n} from '@openscd/xml';\n\nimport {\n  getValue,\n  Wizard,\n  WizardActor,\n  WizardInputElement,\n} from '@openscd/open-scd/src/foundation.js';\nimport { SimpleAction } from '@openscd/core/foundation/deprecated/editor';\n\nfunction createTapChangerAction(parent: Element): WizardActor {\n  return (inputs: WizardInputElement[]) => {\n    const tapChangerAttrs: Record<string, string | null> = {};\n    const tapChangerKeys = ['name', 'desc', 'type', 'virtual'];\n    tapChangerKeys.forEach(key => {\n      tapChangerAttrs[key] = getValue(inputs.find(i => i.label === key)!);\n    });\n\n    const tapChanger = createElement(\n      parent.ownerDocument,\n      'TapChanger',\n      tapChangerAttrs\n    );\n\n    return [{ new: { parent, element: tapChanger } }];\n  };\n}\n\nfunction updateTapChangerAction(element: Element): WizardActor {\n  return (inputs: WizardInputElement[]): SimpleAction[] => {\n    const tapChangerAttrs: Record<string, string | null> = {};\n    const tapChangerKeys = ['name', 'desc', 'type', 'virtual'];\n    tapChangerKeys.forEach(key => {\n      tapChangerAttrs[key] = getValue(inputs.find(i => i.label === key)!);\n    });\n\n    if (\n      tapChangerKeys.some(\n        key => tapChangerAttrs[key] !== element.getAttribute(key)\n      )\n    ) {\n      const newElement = cloneElement(element, tapChangerAttrs);\n      return [\n        {\n          old: { element },\n          new: { element: newElement },\n        },\n      ];\n    }\n    return [];\n  };\n}\n\ninterface ContentOptions {\n  name: string | null;\n  desc: string | null;\n  type: string | null;\n  virtual: string | null;\n  reservedNames: string[];\n}\n\nexport function contentTapChangerWizard(\n  content: ContentOptions\n): TemplateResult[] {\n  return [\n    html`<wizard-textfield\n      label=\"name\"\n      .maybeValue=${content.name}\n      helper=\"${get('scl.name')}\"\n      required\n      validationMessage=\"${get('textfield.required')}\"\n      .reservedValues=${content.reservedNames}\n      dialogInitialFocus\n    ></wizard-textfield>`,\n    html`<wizard-textfield\n      label=\"desc\"\n      .maybeValue=${content.desc}\n      nullable\n      helper=\"${get('scl.desc')}\"\n    ></wizard-textfield>`,\n    html`<wizard-textfield\n      label=\"type\"\n      .maybeValue=${content.type}\n      disabled\n      helper=\"${get('scl.type')}\"\n    ></wizard-textfield>`,\n    html`<wizard-checkbox\n      label=\"virtual\"\n      .maybeValue=${content.virtual}\n      helper=\"${get('scl.virtual')}\"\n      nullable\n    ></wizard-checkbox>`,\n  ];\n}\n\nexport function createTapChangerWizard(parent: Element): Wizard {\n  const name = '';\n  const desc = null;\n  const type = 'LTC';\n  const virtual = null;\n  const reservedNames = Array.from(parent.querySelectorAll('TapChanger')).map(\n    TapChanger => TapChanger.getAttribute('name')!\n  );\n\n  return [\n    {\n      title: get('wizard.title.add', { tagName: 'TapChanger' }),\n      primary: {\n        icon: 'save',\n        label: get('save'),\n        action: createTapChangerAction(parent),\n      },\n      content: [\n        ...contentTapChangerWizard({\n          name,\n          desc,\n          type,\n          virtual,\n          reservedNames,\n        }),\n      ],\n    },\n  ];\n}\n\nexport function editTapChangerWizard(element: Element): Wizard {\n  const name = element.getAttribute('name');\n  const desc = element.getAttribute('desc');\n  const type = element.getAttribute('type');\n  const virtual = element.getAttribute('virtual');\n  const reservedNames: string[] = getChildElementsByTagName(\n    element.parentElement!,\n    'TapChanger'\n  )\n    .filter(sibling => sibling !== element)\n    .map(sibling => sibling.getAttribute('name')!);\n  return [\n    {\n      title: get('wizard.title.edit', { tagName: 'TapChanger' }),\n      primary: {\n        icon: 'save',\n        label: get('save'),\n        action: updateTapChangerAction(element),\n      },\n      content: [\n        ...contentTapChangerWizard({\n          name,\n          desc,\n          type,\n          virtual,\n          reservedNames,\n        }),\n      ],\n    },\n  ];\n}\n"]}