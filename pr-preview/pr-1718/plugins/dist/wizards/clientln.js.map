{"version":3,"file":"clientln.js","sourceRoot":"","sources":["../../src/wizards/clientln.ts"],"names":[],"mappings":"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","sourcesContent":["import { html } from 'lit-element';\nimport { get } from 'lit-translate';\n\nimport '@material/mwc-list/mwc-check-list-item';\nimport '@material/mwc-icon';\nimport { List } from '@material/mwc-list';\nimport { ListItemBase } from '@material/mwc-list/mwc-list-item-base';\n\nimport '@openscd/open-scd/src/filtered-list.js';\nimport {\n  find,\n  identity,\n  pathParts,\n  Wizard,\n  WizardAction,\n  WizardActor,\n  WizardInputElement,\n} from '@openscd/open-scd/src/foundation.js';\n\nimport {\n  createElement,\n} from '@openscd/xml';\n\nimport { clientIcon } from '@openscd/open-scd/src/icons/icons.js';\nimport { openCommunicationMappingWizard } from './commmap-wizards.js';\n\nfunction getPath(identity: string | number): string {\n  if (typeof identity !== 'string') return '';\n\n  return pathParts(identity)[0] ?? '';\n}\n\nfunction getElement(identity: string | number): string {\n  if (typeof identity !== 'string') return '';\n\n  return pathParts(identity)[1] ?? '';\n}\n\nfunction getLogicalNode(doc: XMLDocument, identity: string): Element | null {\n  if (identity.split('>').length === 4) {\n    return find(doc, 'LN', identity);\n  }\n\n  if (identity.split('>').length === 3) {\n    if (getElement(identity).split(' ').length > 1) {\n      return find(doc, 'LN', identity);\n    }\n\n    if (getElement(identity).split(' ').length === 1) {\n      return find(doc, 'LN0', identity);\n    }\n  }\n\n  return null;\n}\n\nfunction hasClientLN(cb: Element, identity: string): boolean {\n  for (const clientLN of Array.from(cb.getElementsByTagName('ClientLN'))) {\n    const [iedName, apRef, ldInst, prefix, lnClass, lnInst] = [\n      'iedName',\n      'apRef',\n      'ldInst',\n      'prefix',\n      'lnClass',\n      'lnInst',\n    ].map(attribute => clientLN.getAttribute(attribute));\n\n    const ln = getLogicalNode(cb.ownerDocument, identity);\n    if (!ln) break;\n    const ied = ln.closest('IED');\n    const ap = ln.closest('AccessPoint');\n    const ld = ln.closest('LDevice');\n\n    if (identity.split('>').length === 4) {\n      if (\n        iedName === ied?.getAttribute('name') &&\n        apRef === ap?.getAttribute('name') &&\n        ldInst === ld?.getAttribute('inst') &&\n        (prefix ?? '') === (ln.getAttribute('prefix') ?? '') &&\n        lnClass === ln.getAttribute('lnClass') &&\n        (lnInst ?? '') === (ln.getAttribute('inst') ?? '')\n      )\n        return true;\n    }\n\n    if (identity.split('>').length === 3) {\n      if (getElement(identity).split(' ').length > 1) {\n        // ClientLNs for LNs inside an AccessPoint have these requirements:\n        // apRef: AccessPoint name (optional if IED has only one AccessPoint)\n        // ldInst: can be arbitrary\n        const apCount = ied?.querySelectorAll('AccessPoint').length;\n        if (\n          iedName === ied?.getAttribute('name') &&\n          apCount &&\n          (apCount <= 1 || apRef === ap?.getAttribute('name')) &&\n          (prefix ?? '') === (ln.getAttribute('prefix') ?? '') &&\n          lnClass === ln.getAttribute('lnClass') &&\n          (lnInst ?? '') === (ln.getAttribute('inst') ?? '')\n        )\n          return true;\n      }\n\n      if (getElement(identity).split(' ').length === 1) {\n        if (\n          iedName === ied?.getAttribute('name') &&\n          apRef === ap?.getAttribute('name') &&\n          ldInst === ld?.getAttribute('inst') &&\n          lnClass === ln.getAttribute('lnClass')\n        )\n          return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction addClientLnAction(doc: XMLDocument): WizardActor {\n  return (inputs: WizardInputElement[], wizard: Element): WizardAction[] => {\n    const cbSelected = <ListItemBase[]>(\n      (<List>wizard.shadowRoot!.querySelector('#sourcelist')).selected\n    );\n\n    const selectedLNs = <ListItemBase[]>(\n      (<List>wizard.shadowRoot!.querySelector('#sinklist')).selected\n    );\n\n    const actions: WizardAction[] = [];\n\n    selectedLNs.forEach(selectedLN => {\n      const lnIdentity = selectedLN.value;\n\n      const reportCbs = <Element[]>cbSelected\n        .map(cb => cb.value)\n        .map(cbValue => find(doc, 'ReportControl', cbValue))\n        .filter(cb => cb !== null);\n\n      reportCbs.forEach(cb => {\n        //RptEnabled is the parent for ClientLN and might be missing\n        if (cb.querySelector('RptEnabled') === null) {\n          const rptEnabled: Element = createElement(doc, 'RptEnabled', {\n            max: '1',\n          });\n          cb.appendChild(rptEnabled);\n        }\n\n        const ln = getLogicalNode(doc, lnIdentity);\n        if (\n          cb.querySelector('RptEnabled') !== null &&\n          !hasClientLN(cb, lnIdentity) &&\n          ln\n        ) {\n          const element: Element = createElement(doc, 'ClientLN', {\n            iedName: ln?.closest('IED')?.getAttribute('name') ?? null,\n            apRef: ln?.closest('AccessPoint')?.getAttribute('name') ?? null,\n            ldInst: ln?.closest('LDevice')?.getAttribute('inst') ?? 'LD0', //ldInst is required and with Ed2 'LD0' for client ln's\n            prefix: ln?.getAttribute('prefix') ?? '', //OpenSCD empty string over null\n            lnClass: ln?.getAttribute('lnClass') ?? '',\n            lnInst: ln?.getAttribute('inst') ?? '', //OpenSCD empty string over null\n          });\n          actions.push({\n            new: {\n              parent: cb.querySelector('RptEnabled')!,\n              element,\n            },\n          });\n        }\n      });\n    });\n\n    return actions;\n  };\n}\n\nexport function createClientLnWizard(\n  sourceIEDs: Element[],\n  sinkIED: Element\n): Wizard {\n  const reportItems = sourceIEDs.flatMap(sourceIED => {\n    return Array.from(sourceIED.getElementsByTagName('ReportControl')).map(\n      cb => {\n        return {\n          identity: identity(cb),\n          numberClientLNs: Array.from(cb.getElementsByTagName('ClientLN'))\n            .length,\n          max: Number(cb.querySelector('RptEnabled')?.getAttribute('max')),\n        };\n      }\n    );\n  });\n  const clientLns = Array.from(\n    sinkIED.querySelectorAll(':root > IED > AccessPoint > LN')\n  );\n  const serverLns = Array.from(\n    sinkIED.querySelectorAll(\n      ':root > IED > AccessPoint > Server > LDevice > LN'\n    )\n  );\n  const serverLn0s = Array.from(\n    sinkIED.querySelectorAll(\n      ':root > IED > AccessPoint > Server > LDevice > LN0'\n    )\n  );\n\n  return [\n    {\n      title: get('commmap.connectToIED', {\n        iedName: sinkIED.getAttribute('name') ?? '',\n      }),\n      primary: {\n        label: get('connect'),\n        icon: '',\n        action: addClientLnAction(sinkIED.ownerDocument),\n      },\n      content: [\n        html`<div\n          class=\"wrapper\"\n          style=\"display: grid; grid-template-columns: 1fr 1fr;\"\n        >\n          <filtered-list\n            id=\"sourcelist\"\n            multi\n            searchFieldLabel=\"${get('scl.Report')}\"\n            >${reportItems\n              .sort((a, b) => b.numberClientLNs - a.numberClientLNs)\n              .map(\n                item =>\n                  html`<mwc-check-list-item\n                    left\n                    hasMeta\n                    twoline\n                    value=\"${item.identity}\"\n                    ?disabled=${item.numberClientLNs >= item.max}\n                    ><span>${getElement(item.identity)}</span\n                    ><span slot=\"secondary\">${getPath(item.identity)}</span\n                    ><span slot=\"meta\"\n                      >${item.max\n                        ? item.numberClientLNs + `/` + item.max\n                        : item.numberClientLNs}</span\n                    ></mwc-check-list-item\n                  >`\n              )}</filtered-list\n          ><filtered-list\n            multi\n            id=\"sinklist\"\n            activatable\n            searchFieldLabel=\"${get('scl.LN')}\"\n            >${clientLns.map(\n              ln =>\n                html`<mwc-check-list-item twoline value=\"${identity(ln)}\">\n                  <span>${getElement(identity(ln))}</span>\n                  <span slot=\"secondary\">${getPath(identity(ln))}</span>\n                </mwc-check-list-item>`\n            )}\n            <li divider role=\"separator\"></li>\n            ${serverLns.map(\n              ln =>\n                html`<mwc-check-list-item twoline value=\"${identity(ln)}\">\n                  <span>${getElement(identity(ln))}</span>\n                  <span slot=\"secondary\">${getPath(identity(ln))}</span>\n                </mwc-check-list-item>`\n            )}\n            ${serverLn0s.map(\n              ln0 =>\n                html`<mwc-check-list-item twoline value=\"${identity(ln0)}\">\n                  <span>LLN0</span>\n                  <span slot=\"secondary\">${identity(ln0)}</span>\n                </mwc-check-list-item>`\n            )}</filtered-list\n          >\n        </div>`,\n      ],\n    },\n  ];\n}\n\nfunction disconnectClientLnAction(elements: Element[]): WizardActor {\n  return (\n    inputs: WizardInputElement[],\n    wizard: Element,\n    list?: List | null\n  ): WizardAction[] => {\n    const items = <Set<number>>list!.index;\n    const selectedClientLNs = Array.from(items).map(index => elements[index]);\n\n    const actions: WizardAction[] = [];\n    selectedClientLNs.forEach(clientLN => {\n      actions.push({\n        old: {\n          parent: clientLN.parentElement!,\n          element: clientLN,\n          reference: clientLN.nextElementSibling,\n        },\n      });\n    });\n\n    return actions;\n  };\n}\n\nexport function selectClientLNsWizard(\n  clientLns: Element[],\n  root: XMLDocument | Element\n): Wizard {\n  const controlBlock = clientLns[0].closest('ReportControl');\n  const cbId = identity(controlBlock);\n  const sinkIedName = clientLns[0].getAttribute('iedName');\n\n  return [\n    {\n      title: cbId + ' - ' + sinkIedName,\n      primary: {\n        icon: 'delete',\n        label: get('disconnect'),\n        action: disconnectClientLnAction(clientLns),\n      },\n      secondary: {\n        icon: '',\n        label: get('back'),\n        action: openCommunicationMappingWizard(root),\n      },\n      content: [\n        html`<filtered-list multi\n          >${clientLns.map(clientLN => {\n            const ln =\n              (clientLN.getAttribute('prefix') ?? '') +\n              clientLN.getAttribute('lnClass') +\n              (clientLN.getAttribute('lnInst') ?? '');\n\n            return html`<mwc-check-list-item graphic=\"icon\">\n              <span>${ln}</span>\n              <mwc-icon slot=\"graphic\">${clientIcon}</mwc-icon>\n            </mwc-check-list-item> `;\n          })}</filtered-list\n        >`,\n      ],\n    },\n  ];\n}\n"]}