{"version":3,"file":"connectedap.js","sourceRoot":"","sources":["../../../../src/editors/protocol104/wizards/connectedap.ts"],"names":[],"mappings":"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","sourcesContent":["import { html, TemplateResult } from 'lit-element';\nimport { get } from 'lit-translate';\nimport { ifDefined } from 'lit-html/directives/if-defined';\n\nimport '@material/mwc-checkbox';\nimport '@material/mwc-switch';\nimport '@material/mwc-formfield';\nimport '@material/mwc-list/mwc-list-item';\nimport '@material/mwc-list/mwc-check-list-item';\nimport '@material/mwc-icon';\n\nimport { Checkbox } from '@material/mwc-checkbox';\nimport { List } from '@material/mwc-list';\nimport { ListItemBase } from '@material/mwc-list/mwc-list-item-base';\nimport { SingleSelectedEvent } from '@material/mwc-list/mwc-list-foundation';\n\nimport '@openscd/open-scd/src/wizard-textfield.js';\nimport '@openscd/open-scd/src/filtered-list.js';\n\nimport {\n  pTypes104,\n  stationTypeOptions,\n  typeDescriptiveNameKeys,\n  typePattern,\n} from '../foundation/p-types.js';\nimport {\n  compareNames,\n  getValue,\n  identity,\n  isPublic,\n  newSubWizardEvent,\n  newWizardEvent,\n  Wizard,\n  WizardActor,\n  WizardInputElement,\n  WizardMenuActor,\n} from '@openscd/open-scd/src/foundation.js';\n\nimport { cloneElement, createElement } from '@openscd/xml';\n\nimport {\n  ComplexAction,\n  EditorAction,\n} from '@openscd/core/foundation/deprecated/editor.js';\nimport { getTypeAttribute } from '../foundation/foundation.js';\nimport {\n  createRedundancyGroupWizard,\n  editRedundancyGroupWizard,\n} from './redundancygroup.js';\n\ninterface AccessPointDescription {\n  element: Element;\n  connected?: boolean;\n}\n\n/** Sorts connected `AccessPoint`s to the bottom. */\nfunction compareAccessPointConnection(\n  a: AccessPointDescription,\n  b: AccessPointDescription\n): number {\n  if (a.connected !== b.connected) return b.connected ? -1 : 1;\n  return 0;\n}\n\nfunction createConnectedApAction(parent: Element): WizardActor {\n  return (\n    _: WizardInputElement[],\n    __: Element,\n    list?: List | null\n  ): EditorAction[] => {\n    if (!list) return [];\n\n    const identities = (<ListItemBase[]>list.selected).map(item => item.value);\n\n    const actions = identities.map(identity => {\n      const [iedName, apName] = identity.split('>');\n\n      return {\n        new: {\n          parent,\n          element: createElement(parent.ownerDocument, 'ConnectedAP', {\n            iedName,\n            apName,\n          }),\n        },\n      };\n    });\n\n    return actions;\n  };\n}\n\nfunction existConnectedAp(accesspoint: Element): boolean {\n  const iedName = accesspoint.closest('IED')?.getAttribute('name');\n  const apName = accesspoint.getAttribute('name');\n\n  const connAp = accesspoint.ownerDocument.querySelector(\n    `ConnectedAP[iedName=\"${iedName}\"][apName=\"${apName}\"]`\n  );\n\n  return (connAp && isPublic(connAp)) ?? false;\n}\n\n/** @returns single page  [[`Wizard`]] for creating SCL element ConnectedAP. */\nexport function createConnectedApWizard(element: Element): Wizard {\n  const doc = element.ownerDocument;\n\n  const accessPoints = Array.from(doc.querySelectorAll(':root > IED'))\n    .sort(compareNames)\n    .flatMap(ied =>\n      Array.from(ied.querySelectorAll(':root > IED > AccessPoint'))\n    )\n    .map(accesspoint => {\n      return {\n        element: accesspoint,\n        connected: existConnectedAp(accesspoint),\n      };\n    })\n    .sort(compareAccessPointConnection);\n\n  return [\n    {\n      title: get('wizard.title.add', { tagName: 'ConnectedAP' }),\n      primary: {\n        icon: 'save',\n        label: get('save'),\n        action: createConnectedApAction(element),\n      },\n      content: [\n        html` <filtered-list id=\"apList\" multi\n          >${accessPoints.map(accesspoint => {\n            const id = identity(accesspoint.element);\n\n            return html`<mwc-check-list-item\n              value=\"${id}\"\n              ?disabled=${accesspoint.connected}\n              ><span>${id}</span></mwc-check-list-item\n            >`;\n          })}\n        </filtered-list>`,\n      ],\n    },\n  ];\n}\n\nfunction isEqualAddress(oldAddress: Element, newAddress: Element): boolean {\n  return Array.from(oldAddress.querySelectorAll('Address > P')).every(pType =>\n    newAddress\n      .querySelector(`Address > P[type=\"${getTypeAttribute(pType)}\"]`)\n      ?.isEqualNode(pType)\n  );\n}\n\nfunction createAddressElement(\n  inputs: WizardInputElement[],\n  parent: Element,\n  typeRestriction: boolean\n): Element {\n  const element = createElement(parent.ownerDocument, 'Address', {});\n\n  inputs\n    .filter(input => getValue(input) !== null)\n    .forEach(validInput => {\n      const type = validInput.label;\n      const child = createElement(parent.ownerDocument, 'P', { type });\n\n      if (typeRestriction)\n        child.setAttributeNS(\n          'http://www.w3.org/2001/XMLSchema-instance',\n          'xsi:type',\n          'tP_' + type\n        );\n\n      child.textContent = getValue(validInput);\n      element.appendChild(child);\n    });\n\n  return element;\n}\n\n/** @returns single page [[`Wizard`]] to edit SCL element ConnectedAP for the 104 plugin. */\nexport function editConnectedApWizard(\n  parent: Element,\n  redundancy?: boolean\n): Wizard {\n  const redundancyGroupNumbers = getRedundancyGroupNumbers(parent);\n  return [\n    {\n      title: get('protocol104.network.connectedAp.wizard.title.edit'),\n      element: parent,\n      menuActions: redundancy\n        ? [\n            {\n              icon: 'playlist_add',\n              label: get(\n                'protocol104.network.connectedAp.wizard.addRedundancyGroup'\n              ),\n              action: openRedundancyGroupWizard(parent, redundancyGroupNumbers),\n            },\n          ]\n        : undefined,\n      primary: {\n        icon: 'save',\n        label: get('save'),\n        action: editConnectedApAction(parent, redundancy),\n      },\n      content: [\n        html`<mwc-formfield\n            label=\"${get(\n              'protocol104.network.connectedAp.wizard.redundancySwitchLabel'\n            )}\"\n          >\n            <mwc-switch\n              id=\"redundancy\"\n              ?checked=${redundancy}\n              @change=${(event: Event) => {\n                event.target!.dispatchEvent(newWizardEvent());\n                event.target!.dispatchEvent(\n                  newSubWizardEvent(() =>\n                    editConnectedApWizard(parent, !redundancy)\n                  )\n                );\n              }}\n            ></mwc-switch>\n          </mwc-formfield>\n          <wizard-divider></wizard-divider>\n          ${createTypeRestrictionCheckbox(parent)}\n          <wizard-select\n            label=\"StationType\"\n            .maybeValue=${parent.querySelector(\n              `Address > P[type=\"StationType\"]`\n            )?.innerHTML ?? null}\n            required\n            fixedMenuPosition\n            helper=\"${get(typeDescriptiveNameKeys['StationType'])}\"\n          >\n            ${stationTypeOptions.map(\n              option =>\n                html`<mwc-list-item value=\"${option}\">${option}</mwc-list-item>`\n            )}\n          </wizard-select>\n          ${redundancy\n            ? html`<h3>\n                  ${get(\n                    'protocol104.network.connectedAp.wizard.redundancyGroupTitle'\n                  )}\n                </h3>\n                <mwc-list\n                  @selected=${(e: SingleSelectedEvent) => {\n                    e.target!.dispatchEvent(\n                      newSubWizardEvent(() =>\n                        editRedundancyGroupWizard(\n                          parent,\n                          redundancyGroupNumbers[e.detail.index]\n                        )\n                      )\n                    );\n                  }}\n                >\n                  ${redundancyGroupNumbers.length != 0\n                    ? redundancyGroupNumbers.map(\n                        number =>\n                          html`<mwc-list-item\n                            >Redundancy Group ${number}</mwc-list-item\n                          >`\n                      )\n                    : html`<p>\n                        ${get(\n                          'protocol104.network.connectedAp.wizard.noRedundancyGroupsAvailable'\n                        )}\n                      </p>`}\n                </mwc-list>`\n            : html`${pTypes104.map(\n                pType => html`${createEditTextField(parent, pType)}`\n              )}`} `,\n      ],\n    },\n  ];\n}\n\nfunction editConnectedApAction(\n  parent: Element,\n  redundancy?: boolean\n): WizardActor {\n  return (inputs: WizardInputElement[], wizard: Element): EditorAction[] => {\n    const typeRestriction: boolean =\n      (<Checkbox>wizard.shadowRoot?.querySelector('#typeRestriction'))\n        ?.checked ?? false;\n\n    const newAddress = createAddressElement(inputs, parent, typeRestriction);\n    const oldAddress = parent.querySelector('Address');\n\n    const complexAction: ComplexAction = {\n      actions: [],\n      title: get('connectedap.action.addaddress', {\n        iedName: parent.getAttribute('iedName') ?? '',\n        apName: parent.getAttribute('apName') ?? '',\n      }),\n    };\n    // When we have a redundanct ConnectedAP, we are only interested in the StationType value.\n    // All redundancy group actions are done in those wizards itself.\n    if (redundancy) {\n      const stationTypeValue = getValue(\n        inputs.find(i => i.label === 'StationType')!\n      )!;\n      const originalElement = oldAddress?.querySelector(\n        'P[type=\"StationType\"]'\n      );\n\n      const elementClone = cloneElement(originalElement!, {});\n      elementClone!.textContent = stationTypeValue;\n\n      complexAction.actions.push({\n        old: {\n          element: originalElement!,\n        },\n        new: {\n          element: elementClone,\n        },\n      });\n    } else if (oldAddress !== null && !isEqualAddress(oldAddress, newAddress)) {\n      //address & child elements P are changed: cannot use replace editor action\n      complexAction.actions.push({\n        old: {\n          parent,\n          element: oldAddress,\n        },\n      });\n      complexAction.actions.push({\n        new: {\n          parent,\n          element: newAddress,\n        },\n      });\n    } else if (oldAddress === null)\n      complexAction.actions.push({\n        new: {\n          parent: parent,\n          element: newAddress,\n        },\n      });\n\n    return complexAction.actions.length ? [complexAction] : [];\n  };\n}\n\nfunction openRedundancyGroupWizard(\n  element: Element,\n  rGNumbers: number[]\n): WizardMenuActor {\n  return (wizard: Element): void => {\n    wizard.dispatchEvent(\n      newSubWizardEvent(createRedundancyGroupWizard(element, rGNumbers))\n    );\n  };\n}\n\n/**\n * Get all the current used Redundancy Group numbers.\n * @param parent - The parent element of all the P elements.\n * @returns An array with all the Redundancy Group numbers.\n */\nfunction getRedundancyGroupNumbers(parent: Element): number[] {\n  const groupNumbers: number[] = [];\n\n  parent.querySelectorAll(`Address > P[type^=\"RG\"]`).forEach(p => {\n    const redundancyGroupPart = getTypeAttribute(p)?.split('-')[0];\n    const number = Number(redundancyGroupPart?.substring(2));\n\n    if (!groupNumbers.includes(number)) groupNumbers.push(number);\n  });\n\n  return groupNumbers.sort();\n}\n\n/**\n * Create a wizard-textfield element for the Edit wizard.\n * @param parent - The parent element of the P to create.\n * @param pType - The type of P a Text Field has to be created for.\n * @returns - A Text Field created for a specific type for the Edit wizard.\n */\nfunction createEditTextField(parent: Element, pType: string): TemplateResult {\n  return html`<wizard-textfield\n    required\n    label=\"${pType}\"\n    pattern=\"${ifDefined(typePattern[pType])}\"\n    .maybeValue=${parent.querySelector(`Address > P[type=\"${pType}\"]`)\n      ?.innerHTML ?? null}\n  ></wizard-textfield>`;\n}\n\nfunction createTypeRestrictionCheckbox(element: Element): TemplateResult {\n  return html`<mwc-formfield\n    label=\"${get('connectedap.wizard.addschemainsttype')}\"\n    ><mwc-checkbox\n      id=\"typeRestriction\"\n      ?checked=${hasTypeRestriction(element)}\n    ></mwc-checkbox>\n  </mwc-formfield>`;\n}\n\nfunction hasTypeRestriction(element: Element): boolean {\n  return Array.from(element.querySelectorAll('Address > P'))\n    .filter(p => isPublic(p))\n    .some(pType => pType.getAttribute('xsi:type'));\n}\n"]}