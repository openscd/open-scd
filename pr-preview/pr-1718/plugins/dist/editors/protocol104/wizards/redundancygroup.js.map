{"version":3,"file":"redundancygroup.js","sourceRoot":"","sources":["../../../../src/editors/protocol104/wizards/redundancygroup.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,aAAa,CAAC;AACnC,OAAO,EAAE,GAAG,EAAE,MAAM,eAAe,CAAC;AAEpC,OAAO,2CAA2C,CAAC;AACnD,OAAO,EAAE,wBAAwB,EAAE,MAAM,0BAA0B,CAAC;AACpE,OAAO,EACL,QAAQ,EACR,iBAAiB,EACjB,cAAc,GAKf,MAAM,qCAAqC,CAAC;AAE7C,OAAO,EACL,YAAY,EACZ,aAAa,GACd,MAAM,cAAc,CAAC;AAEtB,OAAO,EAGL,cAAc,EAEf,MAAM,+CAA+C,CAAC;AAEvD,OAAO,EAAE,qBAAqB,EAAE,mBAAmB,EAAE,MAAM,gBAAgB,CAAC;AAC5E,OAAO,EACL,sBAAsB,EACtB,gBAAgB,GACjB,MAAM,6BAA6B,CAAC;AAErC,MAAM,UAAU,yBAAyB,CACvC,MAAe,EACf,QAAgB;IAEhB,MAAM,aAAa,GAAG,mBAAmB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;IAC5D,OAAO;QACL;YACE,KAAK,EAAE,GAAG,CAAC,uDAAuD,CAAC;YACnE,WAAW,EAAE;gBACX;oBACE,IAAI,EAAE,cAAc;oBACpB,KAAK,EAAE,GAAG,CAAC,yDAAyD,CAAC;oBACrE,MAAM,EAAE,CAAC,MAAe,EAAQ,EAAE;wBAChC,MAAM,CAAC,aAAa,CAClB,iBAAiB,CACf,qBAAqB,CAAC,MAAM,EAAE,QAAQ,EAAE,aAAa,CAAC,CACvD,CACF,CAAC;oBACJ,CAAC;iBACF;gBACD;oBACE,IAAI,EAAE,QAAQ;oBACd,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC;oBACpB,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,QAAQ,CAAC;iBACjC;aACF;YACD,OAAO,EAAE;gBACP,IAAI,EAAE,MAAM;gBACZ,KAAK,EAAE,GAAG,CAAC,MAAM,CAAC;gBAClB,MAAM,EAAE,yBAAyB,CAAC,MAAM,EAAE,QAAQ,CAAC;aACpD;YACD,OAAO,EAAE;gBACP,IAAI,CAAA;;qBAES,GAAG,CACV,uEAAuE,CACxE;0BACa,QAAQ;;YAEtB,wBAAwB,CAAC,GAAG,CAC5B,KAAK,CAAC,EAAE,CACN,IAAI,CAAA,GAAG,sBAAsB,CAC3B,KAAK,EACL,MAAM,CAAC,aAAa,CAClB,wBAAwB,QAAQ,IAAI,KAAK,IAAI,CAC9C,EAAE,SAAS,CACb,EAAE,CACN;;cAEG,GAAG,CACH,gEAAgE,CACjE;;;wBAGW,CAAC,CAAsB,EAAE,EAAE;oBACrC,CAAC,CAAC,MAAO,CAAC,aAAa,CACrB,iBAAiB,CAAC,GAAG,EAAE,CACrB,mBAAmB,CACjB,MAAM,EACN,QAAQ,EACR,aAAa,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAC9B,CACF,CACF,CAAC;gBACJ,CAAC;;cAEC,aAAa,CAAC,MAAM,IAAI,CAAC;oBACzB,CAAC,CAAC,aAAa,CAAC,GAAG,CACf,MAAM,CAAC,EAAE,CACP,IAAI,CAAA,6BAA6B,MAAM,kBAAkB,CAC5D;oBACH,CAAC,CAAC,IAAI,CAAA;oBACA,GAAG,CACH,kEAAkE,CACnE;qBACE;sBACC;aACf;SACF;KACF,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,2BAA2B,CACzC,MAAe,EACf,iBAA2B;IAE3B,iEAAiE;IACjE,IAAI,QAAQ,GAAG,CAAC,CAAC;IACjB,OAAO,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,QAAQ,CAAC,EAAE;QACjD,QAAQ,EAAE,CAAC;KACZ;IAED,OAAO;QACL;YACE,KAAK,EAAE,GAAG,CAAC,sDAAsD,CAAC;YAClE,OAAO,EAAE;gBACP,IAAI,EAAE,EAAE;gBACR,KAAK,EAAE,GAAG,CAAC,MAAM,CAAC;gBAClB,MAAM,EAAE,wBAAwB,CAAC,MAAM,EAAE,QAAQ,CAAC;aACnD;YACD,OAAO,EAAE;gBACP,IAAI,CAAA;;qBAES,GAAG,CACV,uEAAuE,CACxE;qBACQ,QAAQ;;YAEjB,wBAAwB,CAAC,GAAG,CAC5B,KAAK,CAAC,EAAE,CAAC,IAAI,CAAA,GAAG,sBAAsB,CAAC,KAAK,CAAC,EAAE,CAChD,EAAE;aACN;SACF;KACF,CAAC;AACJ,CAAC;AAED;;;;;GAKG;AACH,SAAS,MAAM,CAAC,MAAe,EAAE,QAAgB;IAC/C,OAAO,CAAC,MAAe,EAAQ,EAAE;QAC/B,MAAM,cAAc,GAAG,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;QAEvD,MAAM,aAAa,GAAkB;YACnC,OAAO,EAAE,EAAE;YACX,KAAK,EAAE,GAAG,CACR,mEAAmE,EACnE;gBACE,QAAQ;gBACR,cAAc,EAAE,MAAM,CAAC,aAAc,CAAC,YAAY,CAAC,MAAM,CAAE;gBAC3D,MAAM,EAAE,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAE;gBACtC,OAAO,EAAE,MAAM,CAAC,YAAY,CAAC,SAAS,CAAE;aACzC,CACF;SACF,CAAC;QAEF,cAAe,CAAC,gBAAgB,CAAC,cAAc,QAAQ,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;YACxE,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC;gBACzB,GAAG,EAAE;oBACH,MAAM,EAAE,cAAe;oBACvB,OAAO,EAAE,CAAE;iBACZ;aACF,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,aAAa,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC,CAAC;QACpD,MAAM,CAAC,aAAa,CAAC,cAAc,EAAE,CAAC,CAAC;IACzC,CAAC,CAAC;AACJ,CAAC;AAED,SAAS,yBAAyB,CAChC,MAAe,EACf,QAAgB;IAEhB,OAAO,CAAC,MAA4B,EAAkB,EAAE;QACtD,MAAM,OAAO,GAAmB,EAAE,CAAC;QAEnC,wBAAwB,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACtC,MAAM,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,KAAK,IAAI,CAAE,CAAE,CAAC;YAClE,MAAM,eAAe,GAAG,MAAM,CAAC,aAAa,CAC1C,uBAAuB,QAAQ,IAAI,IAAI,IAAI,CAC5C,CAAC;YAEF,IAAI,eAAe,IAAI,IAAI,EAAE;gBAC3B,MAAM,QAAQ,GAAG,aAAa,CAAC,MAAM,CAAC,aAAa,EAAE,GAAG,EAAE;oBACxD,IAAI,EAAE,KAAK,QAAQ,IAAI,IAAI,EAAE;iBAC9B,CAAC,CAAC;gBACH,QAAQ,CAAC,WAAW,GAAG,UAAU,CAAC;gBAElC,OAAO,CAAC,IAAI,CAAC;oBACX,GAAG,EAAE;wBACH,MAAM,EAAE,MAAM,CAAC,aAAa,CAAC,SAAS,CAAE;wBACxC,OAAO,EAAE,QAAQ;qBAClB;iBACF,CAAC,CAAC;aACJ;iBAAM,IAAI,UAAU,KAAK,eAAe,EAAE,WAAW,EAAE;gBACtD,MAAM,YAAY,GAAG,YAAY,CAAC,eAAgB,EAAE,EAAE,CAAC,CAAC;gBACxD,YAAY,CAAC,WAAW,GAAG,UAAU,CAAC;gBAEtC,OAAO,CAAC,IAAI,CAAC;oBACX,GAAG,EAAE;wBACH,OAAO,EAAE,eAAgB;qBAC1B;oBACD,GAAG,EAAE;wBACH,OAAO,EAAE,YAAY;qBACtB;iBACF,CAAC,CAAC;aACJ;QACH,CAAC,CAAC,CAAC;QAEH,OAAO,OAAO,CAAC,MAAM,IAAI,CAAC;YACxB,CAAC,CAAC;gBACE;oBACE,OAAO;oBACP,KAAK,EAAE,GAAG,CACR,kEAAkE,EAClE;wBACE,QAAQ;wBACR,cAAc,EAAE,MAAM,CAAC,aAAc,CAAC,YAAY,CAAC,MAAM,CAAE;wBAC3D,MAAM,EAAE,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAE;wBACtC,OAAO,EAAE,MAAM,CAAC,YAAY,CAAC,SAAS,CAAE;qBACzC,CACF;iBACF;aACF;YACH,CAAC,CAAC,EAAE,CAAC;IACT,CAAC,CAAC;AACJ,CAAC;AAED,SAAS,wBAAwB,CAC/B,MAAe,EACf,QAAgB;IAEhB,OAAO,CAAC,MAA4B,EAAkB,EAAE;QACtD,MAAM,aAAa,GAAkB;YACnC,OAAO,EAAE,EAAE;YACX,KAAK,EAAE,GAAG,CACR,kEAAkE,EAClE;gBACE,QAAQ;gBACR,cAAc,EAAE,MAAM,CAAC,aAAc,CAAC,YAAY,CAAC,MAAM,CAAE;gBAC3D,MAAM,EAAE,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAE;gBACtC,OAAO,EAAE,MAAM,CAAC,YAAY,CAAC,SAAS,CAAE;aACzC,CACF;SACF,CAAC;QAEF,wBAAwB,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACtC,MAAM,QAAQ,GAAG,aAAa,CAAC,MAAM,CAAC,aAAa,EAAE,GAAG,EAAE;gBACxD,IAAI,EAAE,KAAK,QAAQ,IAAI,IAAI,EAAE;aAC9B,CAAC,CAAC;YACH,QAAQ,CAAC,WAAW,GAAG,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,KAAK,IAAI,CAAE,CAAE,CAAC;YAEtE,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC;gBACzB,GAAG,EAAE;oBACH,MAAM,EAAE,MAAM,CAAC,aAAa,CAAC,SAAS,CAAE;oBACxC,OAAO,EAAE,QAAQ;iBAClB;aACF,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,OAAO,CAAC,aAAa,CAAC,CAAC;IACzB,CAAC,CAAC;AACJ,CAAC;AAED;;;;;GAKG;AACH,SAAS,mBAAmB,CAAC,MAAe,EAAE,QAAgB;IAC5D,MAAM,WAAW,GAAa,EAAE,CAAC;IAEjC,MAAM;SACH,gBAAgB,CAAC,wBAAwB,QAAQ,OAAO,CAAC;SACzD,OAAO,CAAC,CAAC,CAAC,EAAE;QACX,MAAM,aAAa,GAAG,gBAAgB,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACzD,MAAM,MAAM,GAAG,MAAM,CAAC,aAAa,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;QAEnD,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC;YAAE,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC9D,CAAC,CAAC,CAAC;IAEL,OAAO,WAAW,CAAC,IAAI,EAAE,CAAC;AAC5B,CAAC","sourcesContent":["import { html } from 'lit-element';\nimport { get } from 'lit-translate';\n\nimport '@openscd/open-scd/src/wizard-textfield.js';\nimport { pTypesRedundancyGroup104 } from '../foundation/p-types.js';\nimport {\n  getValue,\n  newSubWizardEvent,\n  newWizardEvent,\n  Wizard,\n  WizardActor,\n  WizardInputElement,\n  WizardMenuActor,\n} from '@openscd/open-scd/src/foundation.js';\n\nimport {\n  cloneElement,\n  createElement,\n} from '@openscd/xml';\n\nimport {\n  ComplexAction,\n  EditorAction,\n  newActionEvent,\n  SimpleAction\n} from '@openscd/core/foundation/deprecated/editor.js';\nimport { SingleSelectedEvent } from '@material/mwc-list/mwc-list-foundation';\nimport { createLogicLinkWizard, editLogicLinkWizard } from './logiclink.js';\nimport {\n  createNetworkTextField,\n  getTypeAttribute,\n} from '../foundation/foundation.js';\n\nexport function editRedundancyGroupWizard(\n  parent: Element,\n  rGNumber: number\n): Wizard {\n  const usedLLNumbers = getLogicLinkNumbers(parent, rGNumber);\n  return [\n    {\n      title: get('protocol104.network.redundancyGroup.wizard.title.edit'),\n      menuActions: [\n        {\n          icon: 'playlist_add',\n          label: get('protocol104.network.redundancyGroup.wizard.addLogicLink'),\n          action: (wizard: Element): void => {\n            wizard.dispatchEvent(\n              newSubWizardEvent(\n                createLogicLinkWizard(parent, rGNumber, usedLLNumbers)\n              )\n            );\n          },\n        },\n        {\n          icon: 'delete',\n          label: get('remove'),\n          action: remove(parent, rGNumber),\n        },\n      ],\n      primary: {\n        icon: 'save',\n        label: get('save'),\n        action: editRedundancyGroupAction(parent, rGNumber),\n      },\n      content: [\n        html`<wizard-textfield\n            readOnly\n            label=\"${get(\n              'protocol104.network.redundancyGroup.wizard.redundancyGroupNumberLabel'\n            )}\"\n            .maybeValue=${rGNumber}\n          ></wizard-textfield>\n          ${pTypesRedundancyGroup104.map(\n            pType =>\n              html`${createNetworkTextField(\n                pType,\n                parent.querySelector(\n                  `Address > P[type$=\"RG${rGNumber}-${pType}\"]`\n                )?.innerHTML\n              )}`\n          )}\n          <h3>\n            ${get(\n              'protocol104.network.redundancyGroup.wizard.logicLinkGroupTitle'\n            )}\n          </h3>\n          <mwc-list\n            @selected=${(e: SingleSelectedEvent) => {\n              e.target!.dispatchEvent(\n                newSubWizardEvent(() =>\n                  editLogicLinkWizard(\n                    parent,\n                    rGNumber,\n                    usedLLNumbers[e.detail.index]\n                  )\n                )\n              );\n            }}\n          >\n            ${usedLLNumbers.length != 0\n              ? usedLLNumbers.map(\n                  number =>\n                    html`<mwc-list-item>Logic Link ${number}</mwc-list-item>`\n                )\n              : html`<p>\n                  ${get(\n                    'protocol104.network.redundancyGroup.wizard.noLogicLinksAvailable'\n                  )}\n                </p>`}\n          </mwc-list>`,\n      ],\n    },\n  ];\n}\n\nexport function createRedundancyGroupWizard(\n  parent: Element,\n  occupiedRGNumbers: number[]\n): Wizard {\n  // Calculate the first available number for the Logic Link group.\n  let rGNumber = 1;\n  while (occupiedRGNumbers.find(n => n == rGNumber)) {\n    rGNumber++;\n  }\n\n  return [\n    {\n      title: get('protocol104.network.redundancyGroup.wizard.title.add'),\n      primary: {\n        icon: '',\n        label: get('save'),\n        action: addRedundancyGroupAction(parent, rGNumber),\n      },\n      content: [\n        html`<wizard-textfield\n            readOnly\n            label=\"${get(\n              'protocol104.network.redundancyGroup.wizard.redundancyGroupNumberLabel'\n            )}\"\n            value=\"${rGNumber}\"\n          ></wizard-textfield>\n          ${pTypesRedundancyGroup104.map(\n            pType => html`${createNetworkTextField(pType)}`\n          )}`,\n      ],\n    },\n  ];\n}\n\n/**\n * Remove all P elements belonging to a single Redundancy Group.\n * @param parent - The parent element of the P elements to remove.\n * @param rGNumber - The Redundancy Group number of all the P elements to remove.\n * @returns - Removing all P elements belonging to a Redundancy Group.\n */\nfunction remove(parent: Element, rGNumber: number): WizardMenuActor {\n  return (wizard: Element): void => {\n    const addressElement = parent.querySelector('Address');\n\n    const complexAction: ComplexAction = {\n      actions: [],\n      title: get(\n        'protocol104.network.redundancyGroup.wizard.removedRedundancyGroup',\n        {\n          rGNumber,\n          subNetworkName: parent.parentElement!.getAttribute('name')!,\n          apName: parent.getAttribute('apName')!,\n          iedName: parent.getAttribute('iedName')!,\n        }\n      ),\n    };\n\n    addressElement!.querySelectorAll(`P[type^=\"RG${rGNumber}-\"]`).forEach(p => {\n      complexAction.actions.push({\n        old: {\n          parent: addressElement!,\n          element: p!,\n        },\n      });\n    });\n\n    wizard.dispatchEvent(newActionEvent(complexAction));\n    wizard.dispatchEvent(newWizardEvent());\n  };\n}\n\nfunction editRedundancyGroupAction(\n  parent: Element,\n  rGNumber: number\n): WizardActor {\n  return (inputs: WizardInputElement[]): EditorAction[] => {\n    const actions: SimpleAction[] = [];\n\n    pTypesRedundancyGroup104.forEach(type => {\n      const inputValue = getValue(inputs.find(i => i.label === type)!)!;\n      const elementOriginal = parent.querySelector(\n        `Address > P[type=\"RG${rGNumber}-${type}\"]`\n      );\n\n      if (elementOriginal == null) {\n        const pElement = createElement(parent.ownerDocument, 'P', {\n          type: `RG${rGNumber}-${type}`,\n        });\n        pElement.textContent = inputValue;\n\n        actions.push({\n          new: {\n            parent: parent.querySelector('Address')!,\n            element: pElement,\n          },\n        });\n      } else if (inputValue !== elementOriginal?.textContent) {\n        const elementClone = cloneElement(elementOriginal!, {});\n        elementClone.textContent = inputValue;\n\n        actions.push({\n          old: {\n            element: elementOriginal!,\n          },\n          new: {\n            element: elementClone,\n          },\n        });\n      }\n    });\n\n    return actions.length != 0\n      ? [\n          {\n            actions,\n            title: get(\n              'protocol104.network.redundancyGroup.wizard.editedRedundancyGroup',\n              {\n                rGNumber,\n                subNetworkName: parent.parentElement!.getAttribute('name')!,\n                apName: parent.getAttribute('apName')!,\n                iedName: parent.getAttribute('iedName')!,\n              }\n            ),\n          },\n        ]\n      : [];\n  };\n}\n\nfunction addRedundancyGroupAction(\n  parent: Element,\n  rGNumber: number\n): WizardActor {\n  return (inputs: WizardInputElement[]): EditorAction[] => {\n    const complexAction: ComplexAction = {\n      actions: [],\n      title: get(\n        'protocol104.network.redundancyGroup.wizard.addedLRedundancyGroup',\n        {\n          rGNumber,\n          subNetworkName: parent.parentElement!.getAttribute('name')!,\n          apName: parent.getAttribute('apName')!,\n          iedName: parent.getAttribute('iedName')!,\n        }\n      ),\n    };\n\n    pTypesRedundancyGroup104.forEach(type => {\n      const pElement = createElement(parent.ownerDocument, 'P', {\n        type: `RG${rGNumber}-${type}`,\n      });\n      pElement.textContent = getValue(inputs.find(i => i.label === type)!)!;\n\n      complexAction.actions.push({\n        new: {\n          parent: parent.querySelector('Address')!,\n          element: pElement,\n        },\n      });\n    });\n\n    return [complexAction];\n  };\n}\n\n/**\n * Get all the current used Logic Link numbers.\n * @param parent - The parent element of all the P elements.\n * @param rGNumber - The Redundancy Group number to use for searching Logic Link groups.\n * @returns An array with all the Logic Link group numbers.\n */\nfunction getLogicLinkNumbers(parent: Element, rGNumber: number): number[] {\n  const usedNumbers: number[] = [];\n\n  parent\n    .querySelectorAll(`Address > P[type^=\"RG${rGNumber}-LL\"]`)\n    .forEach(p => {\n      const logicLinkPart = getTypeAttribute(p)?.split('-')[1];\n      const number = Number(logicLinkPart?.substring(2));\n\n      if (!usedNumbers.includes(number)) usedNumbers.push(number);\n    });\n\n  return usedNumbers.sort();\n}\n"]}