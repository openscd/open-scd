{"version":3,"file":"scl.js","sourceRoot":"","sources":["../../../src/wizards/foundation/scl.ts"],"names":[],"mappings":"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","sourcesContent":["export function getConnectedAP(element: Element): Element | null {\n  return element.ownerDocument.querySelector(\n    `:root > Communication > SubNetwork > ConnectedAP[iedName=\"${element\n      .closest('IED')\n      ?.getAttribute('name')}\"][apName=\"${element\n      .closest('AccessPoint')\n      ?.getAttribute('name')}\"]`\n  );\n}\n\nexport function isAccessPointConnected(element: Element): boolean {\n  return getConnectedAP(element) ? true : false;\n}\n\nfunction incrementMac(oldMac: string): string {\n  const mac = oldMac.split('-').join('');\n  //destination MAC in IEC61850 always starts with 01:0C:CD:...\n  const newMac = '0' + (parseInt(mac, 16) + 1).toString(16).toUpperCase();\n  return newMac.match(/.{1,2}/g)!.join('-');\n}\n\nexport function uniqueMacAddress(\n  doc: XMLDocument,\n  serviceType: 'SMV' | 'GOOSE'\n): string | null {\n  const maxMac =\n    serviceType === 'GOOSE' ? '01-0C-CD-01-01-FF' : '01-0C-CD-04-01-FF';\n  const startMac =\n    serviceType === 'GOOSE' ? '01-0C-CD-01-00-00' : '01-0C-CD-04-00-00';\n\n  const givenMacs = Array.from(doc.querySelectorAll('Address > P'))\n    .filter(pElement => pElement.getAttribute('type') === 'MAC-Address')\n    .map(mac => mac.innerHTML.trim());\n\n  let mac = startMac;\n  while (mac !== maxMac) {\n    if (!givenMacs.includes(mac)) return mac;\n    mac = incrementMac(mac);\n  }\n\n  return givenMacs.includes(mac) ? null : mac;\n}\n\nfunction incrementAppId(oldAppId: string): string {\n  return (parseInt(oldAppId, 16) + 1)\n    .toString(16)\n    .toUpperCase()\n    .padStart(4, '0');\n}\n\nexport function uniqueAppId(doc: XMLDocument): string | null {\n  const maxAppId = 'FFFF';\n  const startAppId = '0001';\n\n  const givenAppIds = Array.from(doc.querySelectorAll('Address > P'))\n    .filter(pElement => pElement.getAttribute('type') === 'APPID')\n    .map(mac => mac.innerHTML.trim());\n\n  if (givenAppIds.length === 0) return null;\n\n  let appId = startAppId;\n  while (appId !== maxAppId) {\n    if (!givenAppIds.includes(appId)) return appId;\n    appId = incrementAppId(appId);\n  }\n\n  return givenAppIds.includes(appId) ? null : appId;\n}\n"]}